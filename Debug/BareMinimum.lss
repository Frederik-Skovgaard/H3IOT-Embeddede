
BareMinimum.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000004  00800200  00001340  000013d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001340  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000a3  00800204  00800204  000013d8  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000013d8  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001408  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000220  00000000  00000000  00001448  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002994  00000000  00000000  00001668  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001601  00000000  00000000  00003ffc  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001435  00000000  00000000  000055fd  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000078c  00000000  00000000  00006a34  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000e4f  00000000  00000000  000071c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001722  00000000  00000000  0000800f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001a0  00000000  00000000  00009731  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	07 c1       	rjmp	.+526    	; 0x210 <__ctors_end>
       2:	00 00       	nop
       4:	35 c1       	rjmp	.+618    	; 0x270 <__bad_interrupt>
       6:	00 00       	nop
       8:	33 c1       	rjmp	.+614    	; 0x270 <__bad_interrupt>
       a:	00 00       	nop
       c:	31 c1       	rjmp	.+610    	; 0x270 <__bad_interrupt>
       e:	00 00       	nop
      10:	2f c1       	rjmp	.+606    	; 0x270 <__bad_interrupt>
      12:	00 00       	nop
      14:	2d c1       	rjmp	.+602    	; 0x270 <__bad_interrupt>
      16:	00 00       	nop
      18:	2b c1       	rjmp	.+598    	; 0x270 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	29 c1       	rjmp	.+594    	; 0x270 <__bad_interrupt>
      1e:	00 00       	nop
      20:	27 c1       	rjmp	.+590    	; 0x270 <__bad_interrupt>
      22:	00 00       	nop
      24:	25 c1       	rjmp	.+586    	; 0x270 <__bad_interrupt>
      26:	00 00       	nop
      28:	23 c1       	rjmp	.+582    	; 0x270 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	21 c1       	rjmp	.+578    	; 0x270 <__bad_interrupt>
      2e:	00 00       	nop
      30:	1f c1       	rjmp	.+574    	; 0x270 <__bad_interrupt>
      32:	00 00       	nop
      34:	1d c1       	rjmp	.+570    	; 0x270 <__bad_interrupt>
      36:	00 00       	nop
      38:	1b c1       	rjmp	.+566    	; 0x270 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	19 c1       	rjmp	.+562    	; 0x270 <__bad_interrupt>
      3e:	00 00       	nop
      40:	17 c1       	rjmp	.+558    	; 0x270 <__bad_interrupt>
      42:	00 00       	nop
      44:	1c c3       	rjmp	.+1592   	; 0x67e <__vector_17>
      46:	00 00       	nop
      48:	13 c1       	rjmp	.+550    	; 0x270 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	11 c1       	rjmp	.+546    	; 0x270 <__bad_interrupt>
      4e:	00 00       	nop
      50:	0f c1       	rjmp	.+542    	; 0x270 <__bad_interrupt>
      52:	00 00       	nop
      54:	0d c1       	rjmp	.+538    	; 0x270 <__bad_interrupt>
      56:	00 00       	nop
      58:	0b c1       	rjmp	.+534    	; 0x270 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	d3 c6       	rjmp	.+3494   	; 0xe04 <__vector_23>
      5e:	00 00       	nop
      60:	07 c1       	rjmp	.+526    	; 0x270 <__bad_interrupt>
      62:	00 00       	nop
      64:	05 c1       	rjmp	.+522    	; 0x270 <__bad_interrupt>
      66:	00 00       	nop
      68:	03 c1       	rjmp	.+518    	; 0x270 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	01 c1       	rjmp	.+514    	; 0x270 <__bad_interrupt>
      6e:	00 00       	nop
      70:	ff c0       	rjmp	.+510    	; 0x270 <__bad_interrupt>
      72:	00 00       	nop
      74:	fd c0       	rjmp	.+506    	; 0x270 <__bad_interrupt>
      76:	00 00       	nop
      78:	fb c0       	rjmp	.+502    	; 0x270 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	f9 c0       	rjmp	.+498    	; 0x270 <__bad_interrupt>
      7e:	00 00       	nop
      80:	35 c3       	rjmp	.+1642   	; 0x6ec <__vector_32>
      82:	00 00       	nop
      84:	f5 c0       	rjmp	.+490    	; 0x270 <__bad_interrupt>
      86:	00 00       	nop
      88:	f3 c0       	rjmp	.+486    	; 0x270 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	f1 c0       	rjmp	.+482    	; 0x270 <__bad_interrupt>
      8e:	00 00       	nop
      90:	ef c0       	rjmp	.+478    	; 0x270 <__bad_interrupt>
      92:	00 00       	nop
      94:	ed c0       	rjmp	.+474    	; 0x270 <__bad_interrupt>
      96:	00 00       	nop
      98:	eb c0       	rjmp	.+470    	; 0x270 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	e9 c0       	rjmp	.+466    	; 0x270 <__bad_interrupt>
      9e:	00 00       	nop
      a0:	e7 c0       	rjmp	.+462    	; 0x270 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	e5 c0       	rjmp	.+458    	; 0x270 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	58 c3       	rjmp	.+1712   	; 0x75a <__vector_42>
      aa:	00 00       	nop
      ac:	e1 c0       	rjmp	.+450    	; 0x270 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	df c0       	rjmp	.+446    	; 0x270 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	dd c0       	rjmp	.+442    	; 0x270 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	db c0       	rjmp	.+438    	; 0x270 <__bad_interrupt>
      ba:	00 00       	nop
      bc:	85 c3       	rjmp	.+1802   	; 0x7c8 <__vector_47>
      be:	00 00       	nop
      c0:	d7 c0       	rjmp	.+430    	; 0x270 <__bad_interrupt>
      c2:	00 00       	nop
      c4:	d5 c0       	rjmp	.+426    	; 0x270 <__bad_interrupt>
      c6:	00 00       	nop
      c8:	d3 c0       	rjmp	.+422    	; 0x270 <__bad_interrupt>
      ca:	00 00       	nop
      cc:	d1 c0       	rjmp	.+418    	; 0x270 <__bad_interrupt>
      ce:	00 00       	nop
      d0:	cf c0       	rjmp	.+414    	; 0x270 <__bad_interrupt>
      d2:	00 00       	nop
      d4:	cd c0       	rjmp	.+410    	; 0x270 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	cb c0       	rjmp	.+406    	; 0x270 <__bad_interrupt>
      da:	00 00       	nop
      dc:	c9 c0       	rjmp	.+402    	; 0x270 <__bad_interrupt>
      de:	00 00       	nop
      e0:	c7 c0       	rjmp	.+398    	; 0x270 <__bad_interrupt>
      e2:	00 00       	nop
      e4:	4b 08       	sbc	r4, r11
      e6:	4e 08       	sbc	r4, r14
      e8:	3d 08       	sbc	r3, r13
      ea:	41 08       	sbc	r4, r1
      ec:	47 08       	sbc	r4, r7
      ee:	85 08       	sbc	r8, r5
      f0:	52 08       	sbc	r5, r2
      f2:	56 08       	sbc	r5, r6
      f4:	5c 08       	sbc	r5, r12
      f6:	60 08       	sbc	r6, r0
      f8:	64 08       	sbc	r6, r4
      fa:	6a 08       	sbc	r6, r10
      fc:	6e 08       	sbc	r6, r14
      fe:	72 08       	sbc	r7, r2
     100:	85 08       	sbc	r8, r5
     102:	78 08       	sbc	r7, r8
     104:	7c 08       	sbc	r7, r12
     106:	80 08       	sbc	r8, r0

00000108 <__trampolines_end>:
     108:	00 00       	nop
     10a:	0a 0b       	sbc	r16, r26
     10c:	02 09       	sbc	r16, r2
     10e:	0c 0d       	add	r16, r12
     110:	0e 08       	sbc	r0, r14
     112:	07 03       	mulsu	r16, r23
     114:	04 01       	movw	r0, r8
	...
     132:	00 00       	nop
     134:	12 11       	cpse	r17, r2
     136:	10 00       	.word	0x0010	; ????
	...

0000014e <digital_pin_to_bit_mask_PGM>:
     14e:	01 02 10 20 20 08 08 10 20 40 10 20 40 80 02 01     ...  ... @. @...
     15e:	02 01 08 04 02 01 01 02 04 08 10 20 40 80 80 40     ........... @..@
     16e:	20 10 08 04 02 01 80 04 02 01 80 40 20 10 08 04      ..........@ ...
     17e:	02 01 08 04 02 01 01 02 04 08 10 20 40 80 01 02     ........... @...
     18e:	04 08 10 20 40 80                                   ... @.

00000194 <digital_pin_to_port_PGM>:
     194:	05 05 05 05 07 05 08 08 08 08 02 02 02 02 0a 0a     ................
     1a4:	08 08 04 04 04 04 01 01 01 01 01 01 01 01 03 03     ................
     1b4:	03 03 03 03 03 03 04 07 07 07 0c 0c 0c 0c 0c 0c     ................
     1c4:	0c 0c 02 02 02 02 06 06 06 06 06 06 06 06 0b 0b     ................
     1d4:	0b 0b 0b 0b 0b 0b                                   ......

000001da <port_to_output_PGM>:
     1da:	00 00 22 00 25 00 28 00 2b 00 2e 00 31 00 34 00     ..".%.(.+...1.4.
     1ea:	02 01 00 00 05 01 08 01 0b 01                       ..........

000001f4 <port_to_mode_PGM>:
     1f4:	00 00 21 00 24 00 27 00 2a 00 2d 00 30 00 33 00     ..!.$.'.*.-.0.3.
     204:	01 01 00 00 04 01 07 01 0a 01                       ..........

0000020e <__ctors_start>:
     20e:	b7 01       	movw	r22, r14

00000210 <__ctors_end>:
     210:	11 24       	eor	r1, r1
     212:	1f be       	out	0x3f, r1	; 63
     214:	cf ef       	ldi	r28, 0xFF	; 255
     216:	d1 e2       	ldi	r29, 0x21	; 33
     218:	de bf       	out	0x3e, r29	; 62
     21a:	cd bf       	out	0x3d, r28	; 61
     21c:	00 e0       	ldi	r16, 0x00	; 0
     21e:	0c bf       	out	0x3c, r16	; 60

00000220 <__do_copy_data>:
     220:	12 e0       	ldi	r17, 0x02	; 2
     222:	a0 e0       	ldi	r26, 0x00	; 0
     224:	b2 e0       	ldi	r27, 0x02	; 2
     226:	e0 e4       	ldi	r30, 0x40	; 64
     228:	f3 e1       	ldi	r31, 0x13	; 19
     22a:	00 e0       	ldi	r16, 0x00	; 0
     22c:	0b bf       	out	0x3b, r16	; 59
     22e:	02 c0       	rjmp	.+4      	; 0x234 <__do_copy_data+0x14>
     230:	07 90       	elpm	r0, Z+
     232:	0d 92       	st	X+, r0
     234:	a4 30       	cpi	r26, 0x04	; 4
     236:	b1 07       	cpc	r27, r17
     238:	d9 f7       	brne	.-10     	; 0x230 <__do_copy_data+0x10>

0000023a <__do_clear_bss>:
     23a:	22 e0       	ldi	r18, 0x02	; 2
     23c:	a4 e0       	ldi	r26, 0x04	; 4
     23e:	b2 e0       	ldi	r27, 0x02	; 2
     240:	01 c0       	rjmp	.+2      	; 0x244 <.do_clear_bss_start>

00000242 <.do_clear_bss_loop>:
     242:	1d 92       	st	X+, r1

00000244 <.do_clear_bss_start>:
     244:	a7 3a       	cpi	r26, 0xA7	; 167
     246:	b2 07       	cpc	r27, r18
     248:	e1 f7       	brne	.-8      	; 0x242 <.do_clear_bss_loop>

0000024a <__do_global_ctors>:
     24a:	11 e0       	ldi	r17, 0x01	; 1
     24c:	c8 e0       	ldi	r28, 0x08	; 8
     24e:	d1 e0       	ldi	r29, 0x01	; 1
     250:	00 e0       	ldi	r16, 0x00	; 0
     252:	06 c0       	rjmp	.+12     	; 0x260 <__do_global_ctors+0x16>
     254:	21 97       	sbiw	r28, 0x01	; 1
     256:	01 09       	sbc	r16, r1
     258:	80 2f       	mov	r24, r16
     25a:	fe 01       	movw	r30, r28
     25c:	0e 94 7d 09 	call	0x12fa	; 0x12fa <__tablejump2__>
     260:	c7 30       	cpi	r28, 0x07	; 7
     262:	d1 07       	cpc	r29, r17
     264:	80 e0       	ldi	r24, 0x00	; 0
     266:	08 07       	cpc	r16, r24
     268:	a9 f7       	brne	.-22     	; 0x254 <__do_global_ctors+0xa>
     26a:	c1 d5       	rcall	.+2946   	; 0xdee <main>
     26c:	0c 94 9e 09 	jmp	0x133c	; 0x133c <_exit>

00000270 <__bad_interrupt>:
     270:	c7 ce       	rjmp	.-626    	; 0x0 <__vectors>

00000272 <setup>:
Servo myservo;
int potpin = A1;

int val;

void setup(){
     272:	cf 93       	push	r28
     274:	df 93       	push	r29
     276:	cd b7       	in	r28, 0x3d	; 61
     278:	de b7       	in	r29, 0x3e	; 62
	
	myservo.attach(9);
     27a:	69 e0       	ldi	r22, 0x09	; 9
     27c:	70 e0       	ldi	r23, 0x00	; 0
     27e:	84 e0       	ldi	r24, 0x04	; 4
     280:	92 e0       	ldi	r25, 0x02	; 2
     282:	c3 d3       	rcall	.+1926   	; 0xa0a <_ZN5Servo6attachEi>
	
	
	//myservo.write(0);
	//delay(2000);
}
     284:	00 00       	nop
     286:	df 91       	pop	r29
     288:	cf 91       	pop	r28
     28a:	08 95       	ret

0000028c <loop>:

void loop(){
     28c:	af 92       	push	r10
     28e:	bf 92       	push	r11
     290:	cf 92       	push	r12
     292:	df 92       	push	r13
     294:	ef 92       	push	r14
     296:	ff 92       	push	r15
     298:	0f 93       	push	r16
     29a:	1f 93       	push	r17
     29c:	cf 93       	push	r28
     29e:	df 93       	push	r29
     2a0:	cd b7       	in	r28, 0x3d	; 61
     2a2:	de b7       	in	r29, 0x3e	; 62
	
	val = analogRead(potpin);
     2a4:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <__DATA_REGION_ORIGIN__>
     2a8:	90 91 01 02 	lds	r25, 0x0201	; 0x800201 <__DATA_REGION_ORIGIN__+0x1>
     2ac:	b5 d6       	rcall	.+3434   	; 0x1018 <analogRead>
     2ae:	90 93 08 02 	sts	0x0208, r25	; 0x800208 <val+0x1>
     2b2:	80 93 07 02 	sts	0x0207, r24	; 0x800207 <val>
	
	val = map(val, 0, 1023, 0, 180);
     2b6:	80 91 07 02 	lds	r24, 0x0207	; 0x800207 <val>
     2ba:	90 91 08 02 	lds	r25, 0x0208	; 0x800208 <val+0x1>
     2be:	09 2e       	mov	r0, r25
     2c0:	00 0c       	add	r0, r0
     2c2:	aa 0b       	sbc	r26, r26
     2c4:	bb 0b       	sbc	r27, r27
     2c6:	1f 92       	push	r1
     2c8:	1f 92       	push	r1
     2ca:	1f 92       	push	r1
     2cc:	24 eb       	ldi	r18, 0xB4	; 180
     2ce:	2f 93       	push	r18
     2d0:	a1 2c       	mov	r10, r1
     2d2:	b1 2c       	mov	r11, r1
     2d4:	65 01       	movw	r12, r10
     2d6:	ee 24       	eor	r14, r14
     2d8:	ea 94       	dec	r14
     2da:	13 e0       	ldi	r17, 0x03	; 3
     2dc:	f1 2e       	mov	r15, r17
     2de:	00 e0       	ldi	r16, 0x00	; 0
     2e0:	10 e0       	ldi	r17, 0x00	; 0
     2e2:	20 e0       	ldi	r18, 0x00	; 0
     2e4:	30 e0       	ldi	r19, 0x00	; 0
     2e6:	a9 01       	movw	r20, r18
     2e8:	bc 01       	movw	r22, r24
     2ea:	cd 01       	movw	r24, r26
     2ec:	79 d7       	rcall	.+3826   	; 0x11e0 <_Z3maplllll>
     2ee:	0f 90       	pop	r0
     2f0:	0f 90       	pop	r0
     2f2:	0f 90       	pop	r0
     2f4:	0f 90       	pop	r0
     2f6:	dc 01       	movw	r26, r24
     2f8:	cb 01       	movw	r24, r22
     2fa:	90 93 08 02 	sts	0x0208, r25	; 0x800208 <val+0x1>
     2fe:	80 93 07 02 	sts	0x0207, r24	; 0x800207 <val>
	
	myservo.write(val);
     302:	80 91 07 02 	lds	r24, 0x0207	; 0x800207 <val>
     306:	90 91 08 02 	lds	r25, 0x0208	; 0x800208 <val+0x1>
     30a:	bc 01       	movw	r22, r24
     30c:	84 e0       	ldi	r24, 0x04	; 4
     30e:	92 e0       	ldi	r25, 0x02	; 2
     310:	26 d4       	rcall	.+2124   	; 0xb5e <_ZN5Servo5writeEi>
	delay(15);
     312:	6f e0       	ldi	r22, 0x0F	; 15
     314:	70 e0       	ldi	r23, 0x00	; 0
     316:	80 e0       	ldi	r24, 0x00	; 0
     318:	90 e0       	ldi	r25, 0x00	; 0
     31a:	e3 d5       	rcall	.+3014   	; 0xee2 <delay>
	//for (int i = 179; i >= 0; i--)
	//{
		//myservo.write(i);
		//delay(20);
	//}
     31c:	00 00       	nop
     31e:	df 91       	pop	r29
     320:	cf 91       	pop	r28
     322:	1f 91       	pop	r17
     324:	0f 91       	pop	r16
     326:	ff 90       	pop	r15
     328:	ef 90       	pop	r14
     32a:	df 90       	pop	r13
     32c:	cf 90       	pop	r12
     32e:	bf 90       	pop	r11
     330:	af 90       	pop	r10
     332:	08 95       	ret

00000334 <_Z41__static_initialization_and_destruction_0ii>:
     334:	cf 93       	push	r28
     336:	df 93       	push	r29
     338:	00 d0       	rcall	.+0      	; 0x33a <_Z41__static_initialization_and_destruction_0ii+0x6>
     33a:	1f 92       	push	r1
     33c:	cd b7       	in	r28, 0x3d	; 61
     33e:	de b7       	in	r29, 0x3e	; 62
     340:	9a 83       	std	Y+2, r25	; 0x02
     342:	89 83       	std	Y+1, r24	; 0x01
     344:	7c 83       	std	Y+4, r23	; 0x04
     346:	6b 83       	std	Y+3, r22	; 0x03
     348:	89 81       	ldd	r24, Y+1	; 0x01
     34a:	9a 81       	ldd	r25, Y+2	; 0x02
     34c:	01 97       	sbiw	r24, 0x01	; 1
     34e:	39 f4       	brne	.+14     	; 0x35e <_Z41__static_initialization_and_destruction_0ii+0x2a>
     350:	8b 81       	ldd	r24, Y+3	; 0x03
     352:	9c 81       	ldd	r25, Y+4	; 0x04
     354:	01 96       	adiw	r24, 0x01	; 1
     356:	19 f4       	brne	.+6      	; 0x35e <_Z41__static_initialization_and_destruction_0ii+0x2a>
#include <Arduino.h>
#include <Servo.h>

Servo myservo;
     358:	84 e0       	ldi	r24, 0x04	; 4
     35a:	92 e0       	ldi	r25, 0x02	; 2
     35c:	22 d3       	rcall	.+1604   	; 0x9a2 <_ZN5ServoC1Ev>
	//for (int i = 179; i >= 0; i--)
	//{
		//myservo.write(i);
		//delay(20);
	//}
     35e:	00 00       	nop
     360:	0f 90       	pop	r0
     362:	0f 90       	pop	r0
     364:	0f 90       	pop	r0
     366:	0f 90       	pop	r0
     368:	df 91       	pop	r29
     36a:	cf 91       	pop	r28
     36c:	08 95       	ret

0000036e <_GLOBAL__sub_I_myservo>:
     36e:	cf 93       	push	r28
     370:	df 93       	push	r29
     372:	cd b7       	in	r28, 0x3d	; 61
     374:	de b7       	in	r29, 0x3e	; 62
     376:	6f ef       	ldi	r22, 0xFF	; 255
     378:	7f ef       	ldi	r23, 0xFF	; 255
     37a:	81 e0       	ldi	r24, 0x01	; 1
     37c:	90 e0       	ldi	r25, 0x00	; 0
     37e:	da df       	rcall	.-76     	; 0x334 <_Z41__static_initialization_and_destruction_0ii>
     380:	df 91       	pop	r29
     382:	cf 91       	pop	r28
     384:	08 95       	ret

00000386 <_ZL17handle_interrupts18timer16_Sequence_tPVjS1_>:
  servos[this->servoIndex].Pin.isActive = false;
  timer16_Sequence_t timer = SERVO_INDEX_TO_TIMER(servoIndex);
  if(isTimerActive(timer) == false) {
    finISR(timer);
  }
}
     386:	cf 93       	push	r28
     388:	df 93       	push	r29
     38a:	00 d0       	rcall	.+0      	; 0x38c <_ZL17handle_interrupts18timer16_Sequence_tPVjS1_+0x6>
     38c:	1f 92       	push	r1
     38e:	1f 92       	push	r1
     390:	cd b7       	in	r28, 0x3d	; 61
     392:	de b7       	in	r29, 0x3e	; 62
     394:	89 83       	std	Y+1, r24	; 0x01
     396:	7b 83       	std	Y+3, r23	; 0x03
     398:	6a 83       	std	Y+2, r22	; 0x02
     39a:	5d 83       	std	Y+5, r21	; 0x05
     39c:	4c 83       	std	Y+4, r20	; 0x04
     39e:	89 81       	ldd	r24, Y+1	; 0x01
     3a0:	88 2f       	mov	r24, r24
     3a2:	90 e0       	ldi	r25, 0x00	; 0
     3a4:	87 56       	subi	r24, 0x67	; 103
     3a6:	9d 4f       	sbci	r25, 0xFD	; 253
     3a8:	fc 01       	movw	r30, r24
     3aa:	80 81       	ld	r24, Z
     3ac:	88 1f       	adc	r24, r24
     3ae:	88 27       	eor	r24, r24
     3b0:	88 1f       	adc	r24, r24
     3b2:	88 23       	and	r24, r24
     3b4:	31 f0       	breq	.+12     	; 0x3c2 <_ZL17handle_interrupts18timer16_Sequence_tPVjS1_+0x3c>
     3b6:	8a 81       	ldd	r24, Y+2	; 0x02
     3b8:	9b 81       	ldd	r25, Y+3	; 0x03
     3ba:	fc 01       	movw	r30, r24
     3bc:	11 82       	std	Z+1, r1	; 0x01
     3be:	10 82       	st	Z, r1
     3c0:	71 c0       	rjmp	.+226    	; 0x4a4 <__LOCK_REGION_LENGTH__+0xa4>
     3c2:	89 81       	ldd	r24, Y+1	; 0x01
     3c4:	28 2f       	mov	r18, r24
     3c6:	30 e0       	ldi	r19, 0x00	; 0
     3c8:	c9 01       	movw	r24, r18
     3ca:	88 0f       	add	r24, r24
     3cc:	99 1f       	adc	r25, r25
     3ce:	82 0f       	add	r24, r18
     3d0:	93 1f       	adc	r25, r19
     3d2:	88 0f       	add	r24, r24
     3d4:	99 1f       	adc	r25, r25
     3d6:	88 0f       	add	r24, r24
     3d8:	99 1f       	adc	r25, r25
     3da:	9c 01       	movw	r18, r24
     3dc:	89 81       	ldd	r24, Y+1	; 0x01
     3de:	88 2f       	mov	r24, r24
     3e0:	90 e0       	ldi	r25, 0x00	; 0
     3e2:	87 56       	subi	r24, 0x67	; 103
     3e4:	9d 4f       	sbci	r25, 0xFD	; 253
     3e6:	fc 01       	movw	r30, r24
     3e8:	80 81       	ld	r24, Z
     3ea:	08 2e       	mov	r0, r24
     3ec:	00 0c       	add	r0, r0
     3ee:	99 0b       	sbc	r25, r25
     3f0:	28 0f       	add	r18, r24
     3f2:	39 1f       	adc	r19, r25
     3f4:	80 91 9d 02 	lds	r24, 0x029D	; 0x80029d <ServoCount>
     3f8:	88 2f       	mov	r24, r24
     3fa:	90 e0       	ldi	r25, 0x00	; 0
     3fc:	28 17       	cp	r18, r24
     3fe:	39 07       	cpc	r19, r25
     400:	4c f5       	brge	.+82     	; 0x454 <__LOCK_REGION_LENGTH__+0x54>
     402:	89 81       	ldd	r24, Y+1	; 0x01
     404:	28 2f       	mov	r18, r24
     406:	30 e0       	ldi	r19, 0x00	; 0
     408:	c9 01       	movw	r24, r18
     40a:	88 0f       	add	r24, r24
     40c:	99 1f       	adc	r25, r25
     40e:	82 0f       	add	r24, r18
     410:	93 1f       	adc	r25, r19
     412:	88 0f       	add	r24, r24
     414:	99 1f       	adc	r25, r25
     416:	88 0f       	add	r24, r24
     418:	99 1f       	adc	r25, r25
     41a:	9c 01       	movw	r18, r24
     41c:	89 81       	ldd	r24, Y+1	; 0x01
     41e:	88 2f       	mov	r24, r24
     420:	90 e0       	ldi	r25, 0x00	; 0
     422:	87 56       	subi	r24, 0x67	; 103
     424:	9d 4f       	sbci	r25, 0xFD	; 253
     426:	fc 01       	movw	r30, r24
     428:	80 81       	ld	r24, Z
     42a:	08 2e       	mov	r0, r24
     42c:	00 0c       	add	r0, r0
     42e:	99 0b       	sbc	r25, r25
     430:	28 0f       	add	r18, r24
     432:	39 1f       	adc	r19, r25
     434:	c9 01       	movw	r24, r18
     436:	88 0f       	add	r24, r24
     438:	99 1f       	adc	r25, r25
     43a:	82 0f       	add	r24, r18
     43c:	93 1f       	adc	r25, r19
     43e:	87 5f       	subi	r24, 0xF7	; 247
     440:	9d 4f       	sbci	r25, 0xFD	; 253
     442:	fc 01       	movw	r30, r24
     444:	80 81       	ld	r24, Z
     446:	86 fb       	bst	r24, 6
     448:	88 27       	eor	r24, r24
     44a:	80 f9       	bld	r24, 0
     44c:	81 30       	cpi	r24, 0x01	; 1
     44e:	11 f4       	brne	.+4      	; 0x454 <__LOCK_REGION_LENGTH__+0x54>
     450:	81 e0       	ldi	r24, 0x01	; 1
     452:	01 c0       	rjmp	.+2      	; 0x456 <__LOCK_REGION_LENGTH__+0x56>
     454:	80 e0       	ldi	r24, 0x00	; 0
     456:	88 23       	and	r24, r24
     458:	29 f1       	breq	.+74     	; 0x4a4 <__LOCK_REGION_LENGTH__+0xa4>
     45a:	89 81       	ldd	r24, Y+1	; 0x01
     45c:	28 2f       	mov	r18, r24
     45e:	30 e0       	ldi	r19, 0x00	; 0
     460:	c9 01       	movw	r24, r18
     462:	88 0f       	add	r24, r24
     464:	99 1f       	adc	r25, r25
     466:	82 0f       	add	r24, r18
     468:	93 1f       	adc	r25, r19
     46a:	88 0f       	add	r24, r24
     46c:	99 1f       	adc	r25, r25
     46e:	88 0f       	add	r24, r24
     470:	99 1f       	adc	r25, r25
     472:	9c 01       	movw	r18, r24
     474:	89 81       	ldd	r24, Y+1	; 0x01
     476:	88 2f       	mov	r24, r24
     478:	90 e0       	ldi	r25, 0x00	; 0
     47a:	87 56       	subi	r24, 0x67	; 103
     47c:	9d 4f       	sbci	r25, 0xFD	; 253
     47e:	fc 01       	movw	r30, r24
     480:	80 81       	ld	r24, Z
     482:	08 2e       	mov	r0, r24
     484:	00 0c       	add	r0, r0
     486:	99 0b       	sbc	r25, r25
     488:	28 0f       	add	r18, r24
     48a:	39 1f       	adc	r19, r25
     48c:	c9 01       	movw	r24, r18
     48e:	88 0f       	add	r24, r24
     490:	99 1f       	adc	r25, r25
     492:	82 0f       	add	r24, r18
     494:	93 1f       	adc	r25, r19
     496:	87 5f       	subi	r24, 0xF7	; 247
     498:	9d 4f       	sbci	r25, 0xFD	; 253
     49a:	fc 01       	movw	r30, r24
     49c:	80 81       	ld	r24, Z
     49e:	8f 73       	andi	r24, 0x3F	; 63
     4a0:	60 e0       	ldi	r22, 0x00	; 0
     4a2:	70 d6       	rcall	.+3296   	; 0x1184 <digitalWrite>
     4a4:	89 81       	ldd	r24, Y+1	; 0x01
     4a6:	88 2f       	mov	r24, r24
     4a8:	90 e0       	ldi	r25, 0x00	; 0
     4aa:	9c 01       	movw	r18, r24
     4ac:	27 56       	subi	r18, 0x67	; 103
     4ae:	3d 4f       	sbci	r19, 0xFD	; 253
     4b0:	f9 01       	movw	r30, r18
     4b2:	20 81       	ld	r18, Z
     4b4:	2f 5f       	subi	r18, 0xFF	; 255
     4b6:	87 56       	subi	r24, 0x67	; 103
     4b8:	9d 4f       	sbci	r25, 0xFD	; 253
     4ba:	fc 01       	movw	r30, r24
     4bc:	20 83       	st	Z, r18
     4be:	89 81       	ldd	r24, Y+1	; 0x01
     4c0:	28 2f       	mov	r18, r24
     4c2:	30 e0       	ldi	r19, 0x00	; 0
     4c4:	c9 01       	movw	r24, r18
     4c6:	88 0f       	add	r24, r24
     4c8:	99 1f       	adc	r25, r25
     4ca:	82 0f       	add	r24, r18
     4cc:	93 1f       	adc	r25, r19
     4ce:	88 0f       	add	r24, r24
     4d0:	99 1f       	adc	r25, r25
     4d2:	88 0f       	add	r24, r24
     4d4:	99 1f       	adc	r25, r25
     4d6:	9c 01       	movw	r18, r24
     4d8:	89 81       	ldd	r24, Y+1	; 0x01
     4da:	88 2f       	mov	r24, r24
     4dc:	90 e0       	ldi	r25, 0x00	; 0
     4de:	87 56       	subi	r24, 0x67	; 103
     4e0:	9d 4f       	sbci	r25, 0xFD	; 253
     4e2:	fc 01       	movw	r30, r24
     4e4:	80 81       	ld	r24, Z
     4e6:	08 2e       	mov	r0, r24
     4e8:	00 0c       	add	r0, r0
     4ea:	99 0b       	sbc	r25, r25
     4ec:	28 0f       	add	r18, r24
     4ee:	39 1f       	adc	r19, r25
     4f0:	80 91 9d 02 	lds	r24, 0x029D	; 0x80029d <ServoCount>
     4f4:	88 2f       	mov	r24, r24
     4f6:	90 e0       	ldi	r25, 0x00	; 0
     4f8:	28 17       	cp	r18, r24
     4fa:	39 07       	cpc	r19, r25
     4fc:	5c f4       	brge	.+22     	; 0x514 <__LOCK_REGION_LENGTH__+0x114>
     4fe:	89 81       	ldd	r24, Y+1	; 0x01
     500:	88 2f       	mov	r24, r24
     502:	90 e0       	ldi	r25, 0x00	; 0
     504:	87 56       	subi	r24, 0x67	; 103
     506:	9d 4f       	sbci	r25, 0xFD	; 253
     508:	fc 01       	movw	r30, r24
     50a:	80 81       	ld	r24, Z
     50c:	8c 30       	cpi	r24, 0x0C	; 12
     50e:	14 f4       	brge	.+4      	; 0x514 <__LOCK_REGION_LENGTH__+0x114>
     510:	81 e0       	ldi	r24, 0x01	; 1
     512:	01 c0       	rjmp	.+2      	; 0x516 <__LOCK_REGION_LENGTH__+0x116>
     514:	80 e0       	ldi	r24, 0x00	; 0
     516:	88 23       	and	r24, r24
     518:	09 f4       	brne	.+2      	; 0x51c <__LOCK_REGION_LENGTH__+0x11c>
     51a:	7e c0       	rjmp	.+252    	; 0x618 <__LOCK_REGION_LENGTH__+0x218>
     51c:	8a 81       	ldd	r24, Y+2	; 0x02
     51e:	9b 81       	ldd	r25, Y+3	; 0x03
     520:	fc 01       	movw	r30, r24
     522:	40 81       	ld	r20, Z
     524:	51 81       	ldd	r21, Z+1	; 0x01
     526:	89 81       	ldd	r24, Y+1	; 0x01
     528:	28 2f       	mov	r18, r24
     52a:	30 e0       	ldi	r19, 0x00	; 0
     52c:	c9 01       	movw	r24, r18
     52e:	88 0f       	add	r24, r24
     530:	99 1f       	adc	r25, r25
     532:	82 0f       	add	r24, r18
     534:	93 1f       	adc	r25, r19
     536:	88 0f       	add	r24, r24
     538:	99 1f       	adc	r25, r25
     53a:	88 0f       	add	r24, r24
     53c:	99 1f       	adc	r25, r25
     53e:	9c 01       	movw	r18, r24
     540:	89 81       	ldd	r24, Y+1	; 0x01
     542:	88 2f       	mov	r24, r24
     544:	90 e0       	ldi	r25, 0x00	; 0
     546:	87 56       	subi	r24, 0x67	; 103
     548:	9d 4f       	sbci	r25, 0xFD	; 253
     54a:	fc 01       	movw	r30, r24
     54c:	80 81       	ld	r24, Z
     54e:	08 2e       	mov	r0, r24
     550:	00 0c       	add	r0, r0
     552:	99 0b       	sbc	r25, r25
     554:	28 0f       	add	r18, r24
     556:	39 1f       	adc	r19, r25
     558:	c9 01       	movw	r24, r18
     55a:	88 0f       	add	r24, r24
     55c:	99 1f       	adc	r25, r25
     55e:	82 0f       	add	r24, r18
     560:	93 1f       	adc	r25, r19
     562:	86 5f       	subi	r24, 0xF6	; 246
     564:	9d 4f       	sbci	r25, 0xFD	; 253
     566:	fc 01       	movw	r30, r24
     568:	80 81       	ld	r24, Z
     56a:	91 81       	ldd	r25, Z+1	; 0x01
     56c:	9a 01       	movw	r18, r20
     56e:	28 0f       	add	r18, r24
     570:	39 1f       	adc	r19, r25
     572:	8c 81       	ldd	r24, Y+4	; 0x04
     574:	9d 81       	ldd	r25, Y+5	; 0x05
     576:	fc 01       	movw	r30, r24
     578:	31 83       	std	Z+1, r19	; 0x01
     57a:	20 83       	st	Z, r18
     57c:	89 81       	ldd	r24, Y+1	; 0x01
     57e:	28 2f       	mov	r18, r24
     580:	30 e0       	ldi	r19, 0x00	; 0
     582:	c9 01       	movw	r24, r18
     584:	88 0f       	add	r24, r24
     586:	99 1f       	adc	r25, r25
     588:	82 0f       	add	r24, r18
     58a:	93 1f       	adc	r25, r19
     58c:	88 0f       	add	r24, r24
     58e:	99 1f       	adc	r25, r25
     590:	88 0f       	add	r24, r24
     592:	99 1f       	adc	r25, r25
     594:	9c 01       	movw	r18, r24
     596:	89 81       	ldd	r24, Y+1	; 0x01
     598:	88 2f       	mov	r24, r24
     59a:	90 e0       	ldi	r25, 0x00	; 0
     59c:	87 56       	subi	r24, 0x67	; 103
     59e:	9d 4f       	sbci	r25, 0xFD	; 253
     5a0:	fc 01       	movw	r30, r24
     5a2:	80 81       	ld	r24, Z
     5a4:	08 2e       	mov	r0, r24
     5a6:	00 0c       	add	r0, r0
     5a8:	99 0b       	sbc	r25, r25
     5aa:	28 0f       	add	r18, r24
     5ac:	39 1f       	adc	r19, r25
     5ae:	c9 01       	movw	r24, r18
     5b0:	88 0f       	add	r24, r24
     5b2:	99 1f       	adc	r25, r25
     5b4:	82 0f       	add	r24, r18
     5b6:	93 1f       	adc	r25, r19
     5b8:	87 5f       	subi	r24, 0xF7	; 247
     5ba:	9d 4f       	sbci	r25, 0xFD	; 253
     5bc:	fc 01       	movw	r30, r24
     5be:	80 81       	ld	r24, Z
     5c0:	86 fb       	bst	r24, 6
     5c2:	88 27       	eor	r24, r24
     5c4:	80 f9       	bld	r24, 0
     5c6:	88 23       	and	r24, r24
     5c8:	09 f4       	brne	.+2      	; 0x5cc <__LOCK_REGION_LENGTH__+0x1cc>
     5ca:	50 c0       	rjmp	.+160    	; 0x66c <__LOCK_REGION_LENGTH__+0x26c>
     5cc:	89 81       	ldd	r24, Y+1	; 0x01
     5ce:	28 2f       	mov	r18, r24
     5d0:	30 e0       	ldi	r19, 0x00	; 0
     5d2:	c9 01       	movw	r24, r18
     5d4:	88 0f       	add	r24, r24
     5d6:	99 1f       	adc	r25, r25
     5d8:	82 0f       	add	r24, r18
     5da:	93 1f       	adc	r25, r19
     5dc:	88 0f       	add	r24, r24
     5de:	99 1f       	adc	r25, r25
     5e0:	88 0f       	add	r24, r24
     5e2:	99 1f       	adc	r25, r25
     5e4:	9c 01       	movw	r18, r24
     5e6:	89 81       	ldd	r24, Y+1	; 0x01
     5e8:	88 2f       	mov	r24, r24
     5ea:	90 e0       	ldi	r25, 0x00	; 0
     5ec:	87 56       	subi	r24, 0x67	; 103
     5ee:	9d 4f       	sbci	r25, 0xFD	; 253
     5f0:	fc 01       	movw	r30, r24
     5f2:	80 81       	ld	r24, Z
     5f4:	08 2e       	mov	r0, r24
     5f6:	00 0c       	add	r0, r0
     5f8:	99 0b       	sbc	r25, r25
     5fa:	28 0f       	add	r18, r24
     5fc:	39 1f       	adc	r19, r25
     5fe:	c9 01       	movw	r24, r18
     600:	88 0f       	add	r24, r24
     602:	99 1f       	adc	r25, r25
     604:	82 0f       	add	r24, r18
     606:	93 1f       	adc	r25, r19
     608:	87 5f       	subi	r24, 0xF7	; 247
     60a:	9d 4f       	sbci	r25, 0xFD	; 253
     60c:	fc 01       	movw	r30, r24
     60e:	80 81       	ld	r24, Z
     610:	8f 73       	andi	r24, 0x3F	; 63
     612:	61 e0       	ldi	r22, 0x01	; 1
     614:	b7 d5       	rcall	.+2926   	; 0x1184 <digitalWrite>
     616:	2a c0       	rjmp	.+84     	; 0x66c <__LOCK_REGION_LENGTH__+0x26c>
     618:	8a 81       	ldd	r24, Y+2	; 0x02
     61a:	9b 81       	ldd	r25, Y+3	; 0x03
     61c:	fc 01       	movw	r30, r24
     61e:	80 81       	ld	r24, Z
     620:	91 81       	ldd	r25, Z+1	; 0x01
     622:	04 96       	adiw	r24, 0x04	; 4
     624:	21 e0       	ldi	r18, 0x01	; 1
     626:	80 34       	cpi	r24, 0x40	; 64
     628:	9c 49       	sbci	r25, 0x9C	; 156
     62a:	08 f0       	brcs	.+2      	; 0x62e <__LOCK_REGION_LENGTH__+0x22e>
     62c:	20 e0       	ldi	r18, 0x00	; 0
     62e:	22 23       	and	r18, r18
     630:	41 f0       	breq	.+16     	; 0x642 <__LOCK_REGION_LENGTH__+0x242>
     632:	8c 81       	ldd	r24, Y+4	; 0x04
     634:	9d 81       	ldd	r25, Y+5	; 0x05
     636:	20 e4       	ldi	r18, 0x40	; 64
     638:	3c e9       	ldi	r19, 0x9C	; 156
     63a:	fc 01       	movw	r30, r24
     63c:	31 83       	std	Z+1, r19	; 0x01
     63e:	20 83       	st	Z, r18
     640:	0d c0       	rjmp	.+26     	; 0x65c <__LOCK_REGION_LENGTH__+0x25c>
     642:	8a 81       	ldd	r24, Y+2	; 0x02
     644:	9b 81       	ldd	r25, Y+3	; 0x03
     646:	fc 01       	movw	r30, r24
     648:	80 81       	ld	r24, Z
     64a:	91 81       	ldd	r25, Z+1	; 0x01
     64c:	9c 01       	movw	r18, r24
     64e:	2c 5f       	subi	r18, 0xFC	; 252
     650:	3f 4f       	sbci	r19, 0xFF	; 255
     652:	8c 81       	ldd	r24, Y+4	; 0x04
     654:	9d 81       	ldd	r25, Y+5	; 0x05
     656:	fc 01       	movw	r30, r24
     658:	31 83       	std	Z+1, r19	; 0x01
     65a:	20 83       	st	Z, r18
     65c:	89 81       	ldd	r24, Y+1	; 0x01
     65e:	88 2f       	mov	r24, r24
     660:	90 e0       	ldi	r25, 0x00	; 0
     662:	87 56       	subi	r24, 0x67	; 103
     664:	9d 4f       	sbci	r25, 0xFD	; 253
     666:	2f ef       	ldi	r18, 0xFF	; 255
     668:	fc 01       	movw	r30, r24
     66a:	20 83       	st	Z, r18
     66c:	00 00       	nop
     66e:	0f 90       	pop	r0
     670:	0f 90       	pop	r0
     672:	0f 90       	pop	r0
     674:	0f 90       	pop	r0
     676:	0f 90       	pop	r0
     678:	df 91       	pop	r29
     67a:	cf 91       	pop	r28
     67c:	08 95       	ret

0000067e <__vector_17>:
     67e:	1f 92       	push	r1
     680:	0f 92       	push	r0
     682:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7c005f>
     686:	0f 92       	push	r0
     688:	11 24       	eor	r1, r1
     68a:	00 90 5b 00 	lds	r0, 0x005B	; 0x80005b <__TEXT_REGION_LENGTH__+0x7c005b>
     68e:	0f 92       	push	r0
     690:	2f 93       	push	r18
     692:	3f 93       	push	r19
     694:	4f 93       	push	r20
     696:	5f 93       	push	r21
     698:	6f 93       	push	r22
     69a:	7f 93       	push	r23
     69c:	8f 93       	push	r24
     69e:	9f 93       	push	r25
     6a0:	af 93       	push	r26
     6a2:	bf 93       	push	r27
     6a4:	ef 93       	push	r30
     6a6:	ff 93       	push	r31
     6a8:	cf 93       	push	r28
     6aa:	df 93       	push	r29
     6ac:	cd b7       	in	r28, 0x3d	; 61
     6ae:	de b7       	in	r29, 0x3e	; 62
     6b0:	48 e8       	ldi	r20, 0x88	; 136
     6b2:	50 e0       	ldi	r21, 0x00	; 0
     6b4:	64 e8       	ldi	r22, 0x84	; 132
     6b6:	70 e0       	ldi	r23, 0x00	; 0
     6b8:	81 e0       	ldi	r24, 0x01	; 1
     6ba:	65 de       	rcall	.-822    	; 0x386 <_ZL17handle_interrupts18timer16_Sequence_tPVjS1_>
     6bc:	00 00       	nop
     6be:	df 91       	pop	r29
     6c0:	cf 91       	pop	r28
     6c2:	ff 91       	pop	r31
     6c4:	ef 91       	pop	r30
     6c6:	bf 91       	pop	r27
     6c8:	af 91       	pop	r26
     6ca:	9f 91       	pop	r25
     6cc:	8f 91       	pop	r24
     6ce:	7f 91       	pop	r23
     6d0:	6f 91       	pop	r22
     6d2:	5f 91       	pop	r21
     6d4:	4f 91       	pop	r20
     6d6:	3f 91       	pop	r19
     6d8:	2f 91       	pop	r18
     6da:	0f 90       	pop	r0
     6dc:	00 92 5b 00 	sts	0x005B, r0	; 0x80005b <__TEXT_REGION_LENGTH__+0x7c005b>
     6e0:	0f 90       	pop	r0
     6e2:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7c005f>
     6e6:	0f 90       	pop	r0
     6e8:	1f 90       	pop	r1
     6ea:	18 95       	reti

000006ec <__vector_32>:
     6ec:	1f 92       	push	r1
     6ee:	0f 92       	push	r0
     6f0:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7c005f>
     6f4:	0f 92       	push	r0
     6f6:	11 24       	eor	r1, r1
     6f8:	00 90 5b 00 	lds	r0, 0x005B	; 0x80005b <__TEXT_REGION_LENGTH__+0x7c005b>
     6fc:	0f 92       	push	r0
     6fe:	2f 93       	push	r18
     700:	3f 93       	push	r19
     702:	4f 93       	push	r20
     704:	5f 93       	push	r21
     706:	6f 93       	push	r22
     708:	7f 93       	push	r23
     70a:	8f 93       	push	r24
     70c:	9f 93       	push	r25
     70e:	af 93       	push	r26
     710:	bf 93       	push	r27
     712:	ef 93       	push	r30
     714:	ff 93       	push	r31
     716:	cf 93       	push	r28
     718:	df 93       	push	r29
     71a:	cd b7       	in	r28, 0x3d	; 61
     71c:	de b7       	in	r29, 0x3e	; 62
     71e:	48 e9       	ldi	r20, 0x98	; 152
     720:	50 e0       	ldi	r21, 0x00	; 0
     722:	64 e9       	ldi	r22, 0x94	; 148
     724:	70 e0       	ldi	r23, 0x00	; 0
     726:	82 e0       	ldi	r24, 0x02	; 2
     728:	2e de       	rcall	.-932    	; 0x386 <_ZL17handle_interrupts18timer16_Sequence_tPVjS1_>
     72a:	00 00       	nop
     72c:	df 91       	pop	r29
     72e:	cf 91       	pop	r28
     730:	ff 91       	pop	r31
     732:	ef 91       	pop	r30
     734:	bf 91       	pop	r27
     736:	af 91       	pop	r26
     738:	9f 91       	pop	r25
     73a:	8f 91       	pop	r24
     73c:	7f 91       	pop	r23
     73e:	6f 91       	pop	r22
     740:	5f 91       	pop	r21
     742:	4f 91       	pop	r20
     744:	3f 91       	pop	r19
     746:	2f 91       	pop	r18
     748:	0f 90       	pop	r0
     74a:	00 92 5b 00 	sts	0x005B, r0	; 0x80005b <__TEXT_REGION_LENGTH__+0x7c005b>
     74e:	0f 90       	pop	r0
     750:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7c005f>
     754:	0f 90       	pop	r0
     756:	1f 90       	pop	r1
     758:	18 95       	reti

0000075a <__vector_42>:
     75a:	1f 92       	push	r1
     75c:	0f 92       	push	r0
     75e:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7c005f>
     762:	0f 92       	push	r0
     764:	11 24       	eor	r1, r1
     766:	00 90 5b 00 	lds	r0, 0x005B	; 0x80005b <__TEXT_REGION_LENGTH__+0x7c005b>
     76a:	0f 92       	push	r0
     76c:	2f 93       	push	r18
     76e:	3f 93       	push	r19
     770:	4f 93       	push	r20
     772:	5f 93       	push	r21
     774:	6f 93       	push	r22
     776:	7f 93       	push	r23
     778:	8f 93       	push	r24
     77a:	9f 93       	push	r25
     77c:	af 93       	push	r26
     77e:	bf 93       	push	r27
     780:	ef 93       	push	r30
     782:	ff 93       	push	r31
     784:	cf 93       	push	r28
     786:	df 93       	push	r29
     788:	cd b7       	in	r28, 0x3d	; 61
     78a:	de b7       	in	r29, 0x3e	; 62
     78c:	48 ea       	ldi	r20, 0xA8	; 168
     78e:	50 e0       	ldi	r21, 0x00	; 0
     790:	64 ea       	ldi	r22, 0xA4	; 164
     792:	70 e0       	ldi	r23, 0x00	; 0
     794:	83 e0       	ldi	r24, 0x03	; 3
     796:	f7 dd       	rcall	.-1042   	; 0x386 <_ZL17handle_interrupts18timer16_Sequence_tPVjS1_>
     798:	00 00       	nop
     79a:	df 91       	pop	r29
     79c:	cf 91       	pop	r28
     79e:	ff 91       	pop	r31
     7a0:	ef 91       	pop	r30
     7a2:	bf 91       	pop	r27
     7a4:	af 91       	pop	r26
     7a6:	9f 91       	pop	r25
     7a8:	8f 91       	pop	r24
     7aa:	7f 91       	pop	r23
     7ac:	6f 91       	pop	r22
     7ae:	5f 91       	pop	r21
     7b0:	4f 91       	pop	r20
     7b2:	3f 91       	pop	r19
     7b4:	2f 91       	pop	r18
     7b6:	0f 90       	pop	r0
     7b8:	00 92 5b 00 	sts	0x005B, r0	; 0x80005b <__TEXT_REGION_LENGTH__+0x7c005b>
     7bc:	0f 90       	pop	r0
     7be:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7c005f>
     7c2:	0f 90       	pop	r0
     7c4:	1f 90       	pop	r1
     7c6:	18 95       	reti

000007c8 <__vector_47>:
     7c8:	1f 92       	push	r1
     7ca:	0f 92       	push	r0
     7cc:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7c005f>
     7d0:	0f 92       	push	r0
     7d2:	11 24       	eor	r1, r1
     7d4:	00 90 5b 00 	lds	r0, 0x005B	; 0x80005b <__TEXT_REGION_LENGTH__+0x7c005b>
     7d8:	0f 92       	push	r0
     7da:	2f 93       	push	r18
     7dc:	3f 93       	push	r19
     7de:	4f 93       	push	r20
     7e0:	5f 93       	push	r21
     7e2:	6f 93       	push	r22
     7e4:	7f 93       	push	r23
     7e6:	8f 93       	push	r24
     7e8:	9f 93       	push	r25
     7ea:	af 93       	push	r26
     7ec:	bf 93       	push	r27
     7ee:	ef 93       	push	r30
     7f0:	ff 93       	push	r31
     7f2:	cf 93       	push	r28
     7f4:	df 93       	push	r29
     7f6:	cd b7       	in	r28, 0x3d	; 61
     7f8:	de b7       	in	r29, 0x3e	; 62
     7fa:	48 e2       	ldi	r20, 0x28	; 40
     7fc:	51 e0       	ldi	r21, 0x01	; 1
     7fe:	64 e2       	ldi	r22, 0x24	; 36
     800:	71 e0       	ldi	r23, 0x01	; 1
     802:	80 e0       	ldi	r24, 0x00	; 0
     804:	c0 dd       	rcall	.-1152   	; 0x386 <_ZL17handle_interrupts18timer16_Sequence_tPVjS1_>
     806:	00 00       	nop
     808:	df 91       	pop	r29
     80a:	cf 91       	pop	r28
     80c:	ff 91       	pop	r31
     80e:	ef 91       	pop	r30
     810:	bf 91       	pop	r27
     812:	af 91       	pop	r26
     814:	9f 91       	pop	r25
     816:	8f 91       	pop	r24
     818:	7f 91       	pop	r23
     81a:	6f 91       	pop	r22
     81c:	5f 91       	pop	r21
     81e:	4f 91       	pop	r20
     820:	3f 91       	pop	r19
     822:	2f 91       	pop	r18
     824:	0f 90       	pop	r0
     826:	00 92 5b 00 	sts	0x005B, r0	; 0x80005b <__TEXT_REGION_LENGTH__+0x7c005b>
     82a:	0f 90       	pop	r0
     82c:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7c005f>
     830:	0f 90       	pop	r0
     832:	1f 90       	pop	r1
     834:	18 95       	reti

00000836 <_ZL7initISR18timer16_Sequence_t>:
     836:	cf 93       	push	r28
     838:	df 93       	push	r29
     83a:	1f 92       	push	r1
     83c:	cd b7       	in	r28, 0x3d	; 61
     83e:	de b7       	in	r29, 0x3e	; 62
     840:	89 83       	std	Y+1, r24	; 0x01
     842:	89 81       	ldd	r24, Y+1	; 0x01
     844:	81 30       	cpi	r24, 0x01	; 1
     846:	01 f5       	brne	.+64     	; 0x888 <_ZL7initISR18timer16_Sequence_t+0x52>
     848:	80 e8       	ldi	r24, 0x80	; 128
     84a:	90 e0       	ldi	r25, 0x00	; 0
     84c:	fc 01       	movw	r30, r24
     84e:	10 82       	st	Z, r1
     850:	81 e8       	ldi	r24, 0x81	; 129
     852:	90 e0       	ldi	r25, 0x00	; 0
     854:	22 e0       	ldi	r18, 0x02	; 2
     856:	fc 01       	movw	r30, r24
     858:	20 83       	st	Z, r18
     85a:	84 e8       	ldi	r24, 0x84	; 132
     85c:	90 e0       	ldi	r25, 0x00	; 0
     85e:	fc 01       	movw	r30, r24
     860:	11 82       	std	Z+1, r1	; 0x01
     862:	10 82       	st	Z, r1
     864:	86 e3       	ldi	r24, 0x36	; 54
     866:	90 e0       	ldi	r25, 0x00	; 0
     868:	26 e3       	ldi	r18, 0x36	; 54
     86a:	30 e0       	ldi	r19, 0x00	; 0
     86c:	f9 01       	movw	r30, r18
     86e:	20 81       	ld	r18, Z
     870:	22 60       	ori	r18, 0x02	; 2
     872:	fc 01       	movw	r30, r24
     874:	20 83       	st	Z, r18
     876:	8f e6       	ldi	r24, 0x6F	; 111
     878:	90 e0       	ldi	r25, 0x00	; 0
     87a:	2f e6       	ldi	r18, 0x6F	; 111
     87c:	30 e0       	ldi	r19, 0x00	; 0
     87e:	f9 01       	movw	r30, r18
     880:	20 81       	ld	r18, Z
     882:	22 60       	ori	r18, 0x02	; 2
     884:	fc 01       	movw	r30, r24
     886:	20 83       	st	Z, r18
     888:	89 81       	ldd	r24, Y+1	; 0x01
     88a:	82 30       	cpi	r24, 0x02	; 2
     88c:	c1 f4       	brne	.+48     	; 0x8be <_ZL7initISR18timer16_Sequence_t+0x88>
     88e:	80 e9       	ldi	r24, 0x90	; 144
     890:	90 e0       	ldi	r25, 0x00	; 0
     892:	fc 01       	movw	r30, r24
     894:	10 82       	st	Z, r1
     896:	81 e9       	ldi	r24, 0x91	; 145
     898:	90 e0       	ldi	r25, 0x00	; 0
     89a:	22 e0       	ldi	r18, 0x02	; 2
     89c:	fc 01       	movw	r30, r24
     89e:	20 83       	st	Z, r18
     8a0:	84 e9       	ldi	r24, 0x94	; 148
     8a2:	90 e0       	ldi	r25, 0x00	; 0
     8a4:	fc 01       	movw	r30, r24
     8a6:	11 82       	std	Z+1, r1	; 0x01
     8a8:	10 82       	st	Z, r1
     8aa:	88 e3       	ldi	r24, 0x38	; 56
     8ac:	90 e0       	ldi	r25, 0x00	; 0
     8ae:	22 e0       	ldi	r18, 0x02	; 2
     8b0:	fc 01       	movw	r30, r24
     8b2:	20 83       	st	Z, r18
     8b4:	81 e7       	ldi	r24, 0x71	; 113
     8b6:	90 e0       	ldi	r25, 0x00	; 0
     8b8:	22 e0       	ldi	r18, 0x02	; 2
     8ba:	fc 01       	movw	r30, r24
     8bc:	20 83       	st	Z, r18
     8be:	89 81       	ldd	r24, Y+1	; 0x01
     8c0:	83 30       	cpi	r24, 0x03	; 3
     8c2:	c1 f4       	brne	.+48     	; 0x8f4 <_ZL7initISR18timer16_Sequence_t+0xbe>
     8c4:	80 ea       	ldi	r24, 0xA0	; 160
     8c6:	90 e0       	ldi	r25, 0x00	; 0
     8c8:	fc 01       	movw	r30, r24
     8ca:	10 82       	st	Z, r1
     8cc:	81 ea       	ldi	r24, 0xA1	; 161
     8ce:	90 e0       	ldi	r25, 0x00	; 0
     8d0:	22 e0       	ldi	r18, 0x02	; 2
     8d2:	fc 01       	movw	r30, r24
     8d4:	20 83       	st	Z, r18
     8d6:	84 ea       	ldi	r24, 0xA4	; 164
     8d8:	90 e0       	ldi	r25, 0x00	; 0
     8da:	fc 01       	movw	r30, r24
     8dc:	11 82       	std	Z+1, r1	; 0x01
     8de:	10 82       	st	Z, r1
     8e0:	89 e3       	ldi	r24, 0x39	; 57
     8e2:	90 e0       	ldi	r25, 0x00	; 0
     8e4:	22 e0       	ldi	r18, 0x02	; 2
     8e6:	fc 01       	movw	r30, r24
     8e8:	20 83       	st	Z, r18
     8ea:	82 e7       	ldi	r24, 0x72	; 114
     8ec:	90 e0       	ldi	r25, 0x00	; 0
     8ee:	22 e0       	ldi	r18, 0x02	; 2
     8f0:	fc 01       	movw	r30, r24
     8f2:	20 83       	st	Z, r18
     8f4:	89 81       	ldd	r24, Y+1	; 0x01
     8f6:	88 23       	and	r24, r24
     8f8:	c1 f4       	brne	.+48     	; 0x92a <_ZL7initISR18timer16_Sequence_t+0xf4>
     8fa:	80 e2       	ldi	r24, 0x20	; 32
     8fc:	91 e0       	ldi	r25, 0x01	; 1
     8fe:	fc 01       	movw	r30, r24
     900:	10 82       	st	Z, r1
     902:	81 e2       	ldi	r24, 0x21	; 33
     904:	91 e0       	ldi	r25, 0x01	; 1
     906:	22 e0       	ldi	r18, 0x02	; 2
     908:	fc 01       	movw	r30, r24
     90a:	20 83       	st	Z, r18
     90c:	84 e2       	ldi	r24, 0x24	; 36
     90e:	91 e0       	ldi	r25, 0x01	; 1
     910:	fc 01       	movw	r30, r24
     912:	11 82       	std	Z+1, r1	; 0x01
     914:	10 82       	st	Z, r1
     916:	8a e3       	ldi	r24, 0x3A	; 58
     918:	90 e0       	ldi	r25, 0x00	; 0
     91a:	22 e0       	ldi	r18, 0x02	; 2
     91c:	fc 01       	movw	r30, r24
     91e:	20 83       	st	Z, r18
     920:	83 e7       	ldi	r24, 0x73	; 115
     922:	90 e0       	ldi	r25, 0x00	; 0
     924:	22 e0       	ldi	r18, 0x02	; 2
     926:	fc 01       	movw	r30, r24
     928:	20 83       	st	Z, r18
     92a:	00 00       	nop
     92c:	0f 90       	pop	r0
     92e:	df 91       	pop	r29
     930:	cf 91       	pop	r28
     932:	08 95       	ret

00000934 <_ZL13isTimerActive18timer16_Sequence_t>:
     934:	cf 93       	push	r28
     936:	df 93       	push	r29
     938:	1f 92       	push	r1
     93a:	1f 92       	push	r1
     93c:	cd b7       	in	r28, 0x3d	; 61
     93e:	de b7       	in	r29, 0x3e	; 62
     940:	8a 83       	std	Y+2, r24	; 0x02
     942:	19 82       	std	Y+1, r1	; 0x01
     944:	89 81       	ldd	r24, Y+1	; 0x01
     946:	8c 30       	cpi	r24, 0x0C	; 12
     948:	30 f5       	brcc	.+76     	; 0x996 <_ZL13isTimerActive18timer16_Sequence_t+0x62>
     94a:	8a 81       	ldd	r24, Y+2	; 0x02
     94c:	28 2f       	mov	r18, r24
     94e:	30 e0       	ldi	r19, 0x00	; 0
     950:	c9 01       	movw	r24, r18
     952:	88 0f       	add	r24, r24
     954:	99 1f       	adc	r25, r25
     956:	82 0f       	add	r24, r18
     958:	93 1f       	adc	r25, r19
     95a:	88 0f       	add	r24, r24
     95c:	99 1f       	adc	r25, r25
     95e:	88 0f       	add	r24, r24
     960:	99 1f       	adc	r25, r25
     962:	9c 01       	movw	r18, r24
     964:	89 81       	ldd	r24, Y+1	; 0x01
     966:	88 2f       	mov	r24, r24
     968:	90 e0       	ldi	r25, 0x00	; 0
     96a:	28 0f       	add	r18, r24
     96c:	39 1f       	adc	r19, r25
     96e:	c9 01       	movw	r24, r18
     970:	88 0f       	add	r24, r24
     972:	99 1f       	adc	r25, r25
     974:	82 0f       	add	r24, r18
     976:	93 1f       	adc	r25, r19
     978:	87 5f       	subi	r24, 0xF7	; 247
     97a:	9d 4f       	sbci	r25, 0xFD	; 253
     97c:	fc 01       	movw	r30, r24
     97e:	80 81       	ld	r24, Z
     980:	86 fb       	bst	r24, 6
     982:	88 27       	eor	r24, r24
     984:	80 f9       	bld	r24, 0
     986:	81 30       	cpi	r24, 0x01	; 1
     988:	11 f4       	brne	.+4      	; 0x98e <_ZL13isTimerActive18timer16_Sequence_t+0x5a>
     98a:	81 e0       	ldi	r24, 0x01	; 1
     98c:	05 c0       	rjmp	.+10     	; 0x998 <_ZL13isTimerActive18timer16_Sequence_t+0x64>
     98e:	89 81       	ldd	r24, Y+1	; 0x01
     990:	8f 5f       	subi	r24, 0xFF	; 255
     992:	89 83       	std	Y+1, r24	; 0x01
     994:	d7 cf       	rjmp	.-82     	; 0x944 <_ZL13isTimerActive18timer16_Sequence_t+0x10>
     996:	80 e0       	ldi	r24, 0x00	; 0
     998:	0f 90       	pop	r0
     99a:	0f 90       	pop	r0
     99c:	df 91       	pop	r29
     99e:	cf 91       	pop	r28
     9a0:	08 95       	ret

000009a2 <_ZN5ServoC1Ev>:
     9a2:	cf 93       	push	r28
     9a4:	df 93       	push	r29
     9a6:	1f 92       	push	r1
     9a8:	1f 92       	push	r1
     9aa:	cd b7       	in	r28, 0x3d	; 61
     9ac:	de b7       	in	r29, 0x3e	; 62
     9ae:	9a 83       	std	Y+2, r25	; 0x02
     9b0:	89 83       	std	Y+1, r24	; 0x01
     9b2:	80 91 9d 02 	lds	r24, 0x029D	; 0x80029d <ServoCount>
     9b6:	80 33       	cpi	r24, 0x30	; 48
     9b8:	e8 f4       	brcc	.+58     	; 0x9f4 <_ZN5ServoC1Ev+0x52>
     9ba:	20 91 9d 02 	lds	r18, 0x029D	; 0x80029d <ServoCount>
     9be:	81 e0       	ldi	r24, 0x01	; 1
     9c0:	82 0f       	add	r24, r18
     9c2:	80 93 9d 02 	sts	0x029D, r24	; 0x80029d <ServoCount>
     9c6:	89 81       	ldd	r24, Y+1	; 0x01
     9c8:	9a 81       	ldd	r25, Y+2	; 0x02
     9ca:	fc 01       	movw	r30, r24
     9cc:	20 83       	st	Z, r18
     9ce:	89 81       	ldd	r24, Y+1	; 0x01
     9d0:	9a 81       	ldd	r25, Y+2	; 0x02
     9d2:	fc 01       	movw	r30, r24
     9d4:	80 81       	ld	r24, Z
     9d6:	28 2f       	mov	r18, r24
     9d8:	30 e0       	ldi	r19, 0x00	; 0
     9da:	c9 01       	movw	r24, r18
     9dc:	88 0f       	add	r24, r24
     9de:	99 1f       	adc	r25, r25
     9e0:	82 0f       	add	r24, r18
     9e2:	93 1f       	adc	r25, r19
     9e4:	86 5f       	subi	r24, 0xF6	; 246
     9e6:	9d 4f       	sbci	r25, 0xFD	; 253
     9e8:	28 eb       	ldi	r18, 0xB8	; 184
     9ea:	3b e0       	ldi	r19, 0x0B	; 11
     9ec:	fc 01       	movw	r30, r24
     9ee:	31 83       	std	Z+1, r19	; 0x01
     9f0:	20 83       	st	Z, r18
     9f2:	05 c0       	rjmp	.+10     	; 0x9fe <_ZN5ServoC1Ev+0x5c>
     9f4:	89 81       	ldd	r24, Y+1	; 0x01
     9f6:	9a 81       	ldd	r25, Y+2	; 0x02
     9f8:	2f ef       	ldi	r18, 0xFF	; 255
     9fa:	fc 01       	movw	r30, r24
     9fc:	20 83       	st	Z, r18
     9fe:	00 00       	nop
     a00:	0f 90       	pop	r0
     a02:	0f 90       	pop	r0
     a04:	df 91       	pop	r29
     a06:	cf 91       	pop	r28
     a08:	08 95       	ret

00000a0a <_ZN5Servo6attachEi>:
     a0a:	cf 93       	push	r28
     a0c:	df 93       	push	r29
     a0e:	00 d0       	rcall	.+0      	; 0xa10 <_ZN5Servo6attachEi+0x6>
     a10:	1f 92       	push	r1
     a12:	cd b7       	in	r28, 0x3d	; 61
     a14:	de b7       	in	r29, 0x3e	; 62
     a16:	9a 83       	std	Y+2, r25	; 0x02
     a18:	89 83       	std	Y+1, r24	; 0x01
     a1a:	7c 83       	std	Y+4, r23	; 0x04
     a1c:	6b 83       	std	Y+3, r22	; 0x03
     a1e:	6b 81       	ldd	r22, Y+3	; 0x03
     a20:	7c 81       	ldd	r23, Y+4	; 0x04
     a22:	89 81       	ldd	r24, Y+1	; 0x01
     a24:	9a 81       	ldd	r25, Y+2	; 0x02
     a26:	20 e6       	ldi	r18, 0x60	; 96
     a28:	39 e0       	ldi	r19, 0x09	; 9
     a2a:	40 e2       	ldi	r20, 0x20	; 32
     a2c:	52 e0       	ldi	r21, 0x02	; 2
     a2e:	07 d0       	rcall	.+14     	; 0xa3e <_ZN5Servo6attachEiii>
     a30:	0f 90       	pop	r0
     a32:	0f 90       	pop	r0
     a34:	0f 90       	pop	r0
     a36:	0f 90       	pop	r0
     a38:	df 91       	pop	r29
     a3a:	cf 91       	pop	r28
     a3c:	08 95       	ret

00000a3e <_ZN5Servo6attachEiii>:
     a3e:	cf 93       	push	r28
     a40:	df 93       	push	r29
     a42:	cd b7       	in	r28, 0x3d	; 61
     a44:	de b7       	in	r29, 0x3e	; 62
     a46:	29 97       	sbiw	r28, 0x09	; 9
     a48:	0f b6       	in	r0, 0x3f	; 63
     a4a:	f8 94       	cli
     a4c:	de bf       	out	0x3e, r29	; 62
     a4e:	0f be       	out	0x3f, r0	; 63
     a50:	cd bf       	out	0x3d, r28	; 61
     a52:	9b 83       	std	Y+3, r25	; 0x03
     a54:	8a 83       	std	Y+2, r24	; 0x02
     a56:	7d 83       	std	Y+5, r23	; 0x05
     a58:	6c 83       	std	Y+4, r22	; 0x04
     a5a:	5f 83       	std	Y+7, r21	; 0x07
     a5c:	4e 83       	std	Y+6, r20	; 0x06
     a5e:	39 87       	std	Y+9, r19	; 0x09
     a60:	28 87       	std	Y+8, r18	; 0x08
     a62:	8a 81       	ldd	r24, Y+2	; 0x02
     a64:	9b 81       	ldd	r25, Y+3	; 0x03
     a66:	fc 01       	movw	r30, r24
     a68:	80 81       	ld	r24, Z
     a6a:	80 33       	cpi	r24, 0x30	; 48
     a6c:	08 f0       	brcs	.+2      	; 0xa70 <_ZN5Servo6attachEiii+0x32>
     a6e:	6a c0       	rjmp	.+212    	; 0xb44 <_ZN5Servo6attachEiii+0x106>
     a70:	8c 81       	ldd	r24, Y+4	; 0x04
     a72:	61 e0       	ldi	r22, 0x01	; 1
     a74:	4b d3       	rcall	.+1686   	; 0x110c <pinMode>
     a76:	8a 81       	ldd	r24, Y+2	; 0x02
     a78:	9b 81       	ldd	r25, Y+3	; 0x03
     a7a:	fc 01       	movw	r30, r24
     a7c:	80 81       	ld	r24, Z
     a7e:	28 2f       	mov	r18, r24
     a80:	30 e0       	ldi	r19, 0x00	; 0
     a82:	8c 81       	ldd	r24, Y+4	; 0x04
     a84:	48 2f       	mov	r20, r24
     a86:	4f 73       	andi	r20, 0x3F	; 63
     a88:	c9 01       	movw	r24, r18
     a8a:	88 0f       	add	r24, r24
     a8c:	99 1f       	adc	r25, r25
     a8e:	82 0f       	add	r24, r18
     a90:	93 1f       	adc	r25, r19
     a92:	87 5f       	subi	r24, 0xF7	; 247
     a94:	9d 4f       	sbci	r25, 0xFD	; 253
     a96:	24 2f       	mov	r18, r20
     a98:	2f 73       	andi	r18, 0x3F	; 63
     a9a:	fc 01       	movw	r30, r24
     a9c:	30 81       	ld	r19, Z
     a9e:	30 7c       	andi	r19, 0xC0	; 192
     aa0:	23 2b       	or	r18, r19
     aa2:	fc 01       	movw	r30, r24
     aa4:	20 83       	st	Z, r18
     aa6:	20 e2       	ldi	r18, 0x20	; 32
     aa8:	32 e0       	ldi	r19, 0x02	; 2
     aaa:	8e 81       	ldd	r24, Y+6	; 0x06
     aac:	9f 81       	ldd	r25, Y+7	; 0x07
     aae:	a9 01       	movw	r20, r18
     ab0:	48 1b       	sub	r20, r24
     ab2:	59 0b       	sbc	r21, r25
     ab4:	ca 01       	movw	r24, r20
     ab6:	99 23       	and	r25, r25
     ab8:	0c f4       	brge	.+2      	; 0xabc <_ZN5Servo6attachEiii+0x7e>
     aba:	03 96       	adiw	r24, 0x03	; 3
     abc:	95 95       	asr	r25
     abe:	87 95       	ror	r24
     ac0:	95 95       	asr	r25
     ac2:	87 95       	ror	r24
     ac4:	28 2f       	mov	r18, r24
     ac6:	8a 81       	ldd	r24, Y+2	; 0x02
     ac8:	9b 81       	ldd	r25, Y+3	; 0x03
     aca:	fc 01       	movw	r30, r24
     acc:	21 83       	std	Z+1, r18	; 0x01
     ace:	20 e6       	ldi	r18, 0x60	; 96
     ad0:	39 e0       	ldi	r19, 0x09	; 9
     ad2:	88 85       	ldd	r24, Y+8	; 0x08
     ad4:	99 85       	ldd	r25, Y+9	; 0x09
     ad6:	a9 01       	movw	r20, r18
     ad8:	48 1b       	sub	r20, r24
     ada:	59 0b       	sbc	r21, r25
     adc:	ca 01       	movw	r24, r20
     ade:	99 23       	and	r25, r25
     ae0:	0c f4       	brge	.+2      	; 0xae4 <_ZN5Servo6attachEiii+0xa6>
     ae2:	03 96       	adiw	r24, 0x03	; 3
     ae4:	95 95       	asr	r25
     ae6:	87 95       	ror	r24
     ae8:	95 95       	asr	r25
     aea:	87 95       	ror	r24
     aec:	28 2f       	mov	r18, r24
     aee:	8a 81       	ldd	r24, Y+2	; 0x02
     af0:	9b 81       	ldd	r25, Y+3	; 0x03
     af2:	fc 01       	movw	r30, r24
     af4:	22 83       	std	Z+2, r18	; 0x02
     af6:	8a 81       	ldd	r24, Y+2	; 0x02
     af8:	9b 81       	ldd	r25, Y+3	; 0x03
     afa:	fc 01       	movw	r30, r24
     afc:	90 81       	ld	r25, Z
     afe:	8b ea       	ldi	r24, 0xAB	; 171
     b00:	98 9f       	mul	r25, r24
     b02:	81 2d       	mov	r24, r1
     b04:	11 24       	eor	r1, r1
     b06:	86 95       	lsr	r24
     b08:	86 95       	lsr	r24
     b0a:	86 95       	lsr	r24
     b0c:	89 83       	std	Y+1, r24	; 0x01
     b0e:	89 81       	ldd	r24, Y+1	; 0x01
     b10:	11 df       	rcall	.-478    	; 0x934 <_ZL13isTimerActive18timer16_Sequence_t>
     b12:	98 2f       	mov	r25, r24
     b14:	81 e0       	ldi	r24, 0x01	; 1
     b16:	89 27       	eor	r24, r25
     b18:	88 23       	and	r24, r24
     b1a:	11 f0       	breq	.+4      	; 0xb20 <_ZN5Servo6attachEiii+0xe2>
     b1c:	89 81       	ldd	r24, Y+1	; 0x01
     b1e:	8b de       	rcall	.-746    	; 0x836 <_ZL7initISR18timer16_Sequence_t>
     b20:	8a 81       	ldd	r24, Y+2	; 0x02
     b22:	9b 81       	ldd	r25, Y+3	; 0x03
     b24:	fc 01       	movw	r30, r24
     b26:	80 81       	ld	r24, Z
     b28:	28 2f       	mov	r18, r24
     b2a:	30 e0       	ldi	r19, 0x00	; 0
     b2c:	c9 01       	movw	r24, r18
     b2e:	88 0f       	add	r24, r24
     b30:	99 1f       	adc	r25, r25
     b32:	82 0f       	add	r24, r18
     b34:	93 1f       	adc	r25, r19
     b36:	87 5f       	subi	r24, 0xF7	; 247
     b38:	9d 4f       	sbci	r25, 0xFD	; 253
     b3a:	fc 01       	movw	r30, r24
     b3c:	20 81       	ld	r18, Z
     b3e:	20 64       	ori	r18, 0x40	; 64
     b40:	fc 01       	movw	r30, r24
     b42:	20 83       	st	Z, r18
     b44:	8a 81       	ldd	r24, Y+2	; 0x02
     b46:	9b 81       	ldd	r25, Y+3	; 0x03
     b48:	fc 01       	movw	r30, r24
     b4a:	80 81       	ld	r24, Z
     b4c:	29 96       	adiw	r28, 0x09	; 9
     b4e:	0f b6       	in	r0, 0x3f	; 63
     b50:	f8 94       	cli
     b52:	de bf       	out	0x3e, r29	; 62
     b54:	0f be       	out	0x3f, r0	; 63
     b56:	cd bf       	out	0x3d, r28	; 61
     b58:	df 91       	pop	r29
     b5a:	cf 91       	pop	r28
     b5c:	08 95       	ret

00000b5e <_ZN5Servo5writeEi>:

void Servo::write(int value)
{
     b5e:	6f 92       	push	r6
     b60:	7f 92       	push	r7
     b62:	8f 92       	push	r8
     b64:	9f 92       	push	r9
     b66:	af 92       	push	r10
     b68:	bf 92       	push	r11
     b6a:	cf 92       	push	r12
     b6c:	df 92       	push	r13
     b6e:	ef 92       	push	r14
     b70:	ff 92       	push	r15
     b72:	0f 93       	push	r16
     b74:	1f 93       	push	r17
     b76:	cf 93       	push	r28
     b78:	df 93       	push	r29
     b7a:	00 d0       	rcall	.+0      	; 0xb7c <_ZN5Servo5writeEi+0x1e>
     b7c:	1f 92       	push	r1
     b7e:	cd b7       	in	r28, 0x3d	; 61
     b80:	de b7       	in	r29, 0x3e	; 62
     b82:	9a 83       	std	Y+2, r25	; 0x02
     b84:	89 83       	std	Y+1, r24	; 0x01
     b86:	7c 83       	std	Y+4, r23	; 0x04
     b88:	6b 83       	std	Y+3, r22	; 0x03
  if(value < MIN_PULSE_WIDTH)
     b8a:	8b 81       	ldd	r24, Y+3	; 0x03
     b8c:	9c 81       	ldd	r25, Y+4	; 0x04
     b8e:	80 32       	cpi	r24, 0x20	; 32
     b90:	92 40       	sbci	r25, 0x02	; 2
     b92:	0c f0       	brlt	.+2      	; 0xb96 <_ZN5Servo5writeEi+0x38>
     b94:	5b c0       	rjmp	.+182    	; 0xc4c <_ZN5Servo5writeEi+0xee>
  {  // treat values less than 544 as angles in degrees (valid values in microseconds are handled as microseconds)
    if(value < 0) value = 0;
     b96:	8b 81       	ldd	r24, Y+3	; 0x03
     b98:	9c 81       	ldd	r25, Y+4	; 0x04
     b9a:	99 23       	and	r25, r25
     b9c:	14 f4       	brge	.+4      	; 0xba2 <_ZN5Servo5writeEi+0x44>
     b9e:	1c 82       	std	Y+4, r1	; 0x04
     ba0:	1b 82       	std	Y+3, r1	; 0x03
    if(value > 180) value = 180;
     ba2:	8b 81       	ldd	r24, Y+3	; 0x03
     ba4:	9c 81       	ldd	r25, Y+4	; 0x04
     ba6:	85 3b       	cpi	r24, 0xB5	; 181
     ba8:	91 05       	cpc	r25, r1
     baa:	24 f0       	brlt	.+8      	; 0xbb4 <_ZN5Servo5writeEi+0x56>
     bac:	84 eb       	ldi	r24, 0xB4	; 180
     bae:	90 e0       	ldi	r25, 0x00	; 0
     bb0:	9c 83       	std	Y+4, r25	; 0x04
     bb2:	8b 83       	std	Y+3, r24	; 0x03
    value = map(value, 0, 180, SERVO_MIN(),  SERVO_MAX());
     bb4:	89 81       	ldd	r24, Y+1	; 0x01
     bb6:	9a 81       	ldd	r25, Y+2	; 0x02
     bb8:	fc 01       	movw	r30, r24
     bba:	82 81       	ldd	r24, Z+2	; 0x02
     bbc:	08 2e       	mov	r0, r24
     bbe:	00 0c       	add	r0, r0
     bc0:	99 0b       	sbc	r25, r25
     bc2:	28 e5       	ldi	r18, 0x58	; 88
     bc4:	32 e0       	ldi	r19, 0x02	; 2
     bc6:	a9 01       	movw	r20, r18
     bc8:	48 1b       	sub	r20, r24
     bca:	59 0b       	sbc	r21, r25
     bcc:	ca 01       	movw	r24, r20
     bce:	88 0f       	add	r24, r24
     bd0:	99 1f       	adc	r25, r25
     bd2:	88 0f       	add	r24, r24
     bd4:	99 1f       	adc	r25, r25
     bd6:	09 2e       	mov	r0, r25
     bd8:	00 0c       	add	r0, r0
     bda:	aa 0b       	sbc	r26, r26
     bdc:	bb 0b       	sbc	r27, r27
     bde:	29 81       	ldd	r18, Y+1	; 0x01
     be0:	3a 81       	ldd	r19, Y+2	; 0x02
     be2:	f9 01       	movw	r30, r18
     be4:	21 81       	ldd	r18, Z+1	; 0x01
     be6:	02 2e       	mov	r0, r18
     be8:	00 0c       	add	r0, r0
     bea:	33 0b       	sbc	r19, r19
     bec:	48 e8       	ldi	r20, 0x88	; 136
     bee:	50 e0       	ldi	r21, 0x00	; 0
     bf0:	ba 01       	movw	r22, r20
     bf2:	62 1b       	sub	r22, r18
     bf4:	73 0b       	sbc	r23, r19
     bf6:	9b 01       	movw	r18, r22
     bf8:	22 0f       	add	r18, r18
     bfa:	33 1f       	adc	r19, r19
     bfc:	22 0f       	add	r18, r18
     bfe:	33 1f       	adc	r19, r19
     c00:	03 2e       	mov	r0, r19
     c02:	00 0c       	add	r0, r0
     c04:	44 0b       	sbc	r20, r20
     c06:	55 0b       	sbc	r21, r21
     c08:	6b 81       	ldd	r22, Y+3	; 0x03
     c0a:	7c 81       	ldd	r23, Y+4	; 0x04
     c0c:	3b 01       	movw	r6, r22
     c0e:	77 0f       	add	r23, r23
     c10:	88 08       	sbc	r8, r8
     c12:	99 08       	sbc	r9, r9
     c14:	6b 2f       	mov	r22, r27
     c16:	6f 93       	push	r22
     c18:	6a 2f       	mov	r22, r26
     c1a:	6f 93       	push	r22
     c1c:	69 2f       	mov	r22, r25
     c1e:	6f 93       	push	r22
     c20:	8f 93       	push	r24
     c22:	59 01       	movw	r10, r18
     c24:	6a 01       	movw	r12, r20
     c26:	14 eb       	ldi	r17, 0xB4	; 180
     c28:	e1 2e       	mov	r14, r17
     c2a:	f1 2c       	mov	r15, r1
     c2c:	00 e0       	ldi	r16, 0x00	; 0
     c2e:	10 e0       	ldi	r17, 0x00	; 0
     c30:	20 e0       	ldi	r18, 0x00	; 0
     c32:	30 e0       	ldi	r19, 0x00	; 0
     c34:	a9 01       	movw	r20, r18
     c36:	c4 01       	movw	r24, r8
     c38:	b3 01       	movw	r22, r6
     c3a:	d2 d2       	rcall	.+1444   	; 0x11e0 <_Z3maplllll>
     c3c:	0f 90       	pop	r0
     c3e:	0f 90       	pop	r0
     c40:	0f 90       	pop	r0
     c42:	0f 90       	pop	r0
     c44:	dc 01       	movw	r26, r24
     c46:	cb 01       	movw	r24, r22
     c48:	9c 83       	std	Y+4, r25	; 0x04
     c4a:	8b 83       	std	Y+3, r24	; 0x03
  }
  this->writeMicroseconds(value);
     c4c:	2b 81       	ldd	r18, Y+3	; 0x03
     c4e:	3c 81       	ldd	r19, Y+4	; 0x04
     c50:	89 81       	ldd	r24, Y+1	; 0x01
     c52:	9a 81       	ldd	r25, Y+2	; 0x02
     c54:	b9 01       	movw	r22, r18
     c56:	14 d0       	rcall	.+40     	; 0xc80 <_ZN5Servo17writeMicrosecondsEi>
}
     c58:	00 00       	nop
     c5a:	0f 90       	pop	r0
     c5c:	0f 90       	pop	r0
     c5e:	0f 90       	pop	r0
     c60:	0f 90       	pop	r0
     c62:	df 91       	pop	r29
     c64:	cf 91       	pop	r28
     c66:	1f 91       	pop	r17
     c68:	0f 91       	pop	r16
     c6a:	ff 90       	pop	r15
     c6c:	ef 90       	pop	r14
     c6e:	df 90       	pop	r13
     c70:	cf 90       	pop	r12
     c72:	bf 90       	pop	r11
     c74:	af 90       	pop	r10
     c76:	9f 90       	pop	r9
     c78:	8f 90       	pop	r8
     c7a:	7f 90       	pop	r7
     c7c:	6f 90       	pop	r6
     c7e:	08 95       	ret

00000c80 <_ZN5Servo17writeMicrosecondsEi>:

void Servo::writeMicroseconds(int value)
{
     c80:	cf 93       	push	r28
     c82:	df 93       	push	r29
     c84:	00 d0       	rcall	.+0      	; 0xc86 <_ZN5Servo17writeMicrosecondsEi+0x6>
     c86:	00 d0       	rcall	.+0      	; 0xc88 <_ZN5Servo17writeMicrosecondsEi+0x8>
     c88:	cd b7       	in	r28, 0x3d	; 61
     c8a:	de b7       	in	r29, 0x3e	; 62
     c8c:	9c 83       	std	Y+4, r25	; 0x04
     c8e:	8b 83       	std	Y+3, r24	; 0x03
     c90:	7e 83       	std	Y+6, r23	; 0x06
     c92:	6d 83       	std	Y+5, r22	; 0x05
  // calculate and store the values for the given channel
  byte channel = this->servoIndex;
     c94:	8b 81       	ldd	r24, Y+3	; 0x03
     c96:	9c 81       	ldd	r25, Y+4	; 0x04
     c98:	fc 01       	movw	r30, r24
     c9a:	80 81       	ld	r24, Z
     c9c:	89 83       	std	Y+1, r24	; 0x01
  if( (channel < MAX_SERVOS) )   // ensure channel is valid
     c9e:	89 81       	ldd	r24, Y+1	; 0x01
     ca0:	80 33       	cpi	r24, 0x30	; 48
     ca2:	08 f0       	brcs	.+2      	; 0xca6 <_ZN5Servo17writeMicrosecondsEi+0x26>
     ca4:	99 c0       	rjmp	.+306    	; 0xdd8 <_ZN5Servo17writeMicrosecondsEi+0x158>
  {
    if( value < SERVO_MIN() )          // ensure pulse width is valid
     ca6:	8b 81       	ldd	r24, Y+3	; 0x03
     ca8:	9c 81       	ldd	r25, Y+4	; 0x04
     caa:	fc 01       	movw	r30, r24
     cac:	81 81       	ldd	r24, Z+1	; 0x01
     cae:	08 2e       	mov	r0, r24
     cb0:	00 0c       	add	r0, r0
     cb2:	99 0b       	sbc	r25, r25
     cb4:	28 e8       	ldi	r18, 0x88	; 136
     cb6:	30 e0       	ldi	r19, 0x00	; 0
     cb8:	a9 01       	movw	r20, r18
     cba:	48 1b       	sub	r20, r24
     cbc:	59 0b       	sbc	r21, r25
     cbe:	ca 01       	movw	r24, r20
     cc0:	9c 01       	movw	r18, r24
     cc2:	22 0f       	add	r18, r18
     cc4:	33 1f       	adc	r19, r19
     cc6:	22 0f       	add	r18, r18
     cc8:	33 1f       	adc	r19, r19
     cca:	8d 81       	ldd	r24, Y+5	; 0x05
     ccc:	9e 81       	ldd	r25, Y+6	; 0x06
     cce:	82 17       	cp	r24, r18
     cd0:	93 07       	cpc	r25, r19
     cd2:	a4 f4       	brge	.+40     	; 0xcfc <_ZN5Servo17writeMicrosecondsEi+0x7c>
      value = SERVO_MIN();
     cd4:	8b 81       	ldd	r24, Y+3	; 0x03
     cd6:	9c 81       	ldd	r25, Y+4	; 0x04
     cd8:	fc 01       	movw	r30, r24
     cda:	81 81       	ldd	r24, Z+1	; 0x01
     cdc:	08 2e       	mov	r0, r24
     cde:	00 0c       	add	r0, r0
     ce0:	99 0b       	sbc	r25, r25
     ce2:	28 e8       	ldi	r18, 0x88	; 136
     ce4:	30 e0       	ldi	r19, 0x00	; 0
     ce6:	a9 01       	movw	r20, r18
     ce8:	48 1b       	sub	r20, r24
     cea:	59 0b       	sbc	r21, r25
     cec:	ca 01       	movw	r24, r20
     cee:	88 0f       	add	r24, r24
     cf0:	99 1f       	adc	r25, r25
     cf2:	88 0f       	add	r24, r24
     cf4:	99 1f       	adc	r25, r25
     cf6:	9e 83       	std	Y+6, r25	; 0x06
     cf8:	8d 83       	std	Y+5, r24	; 0x05
     cfa:	2a c0       	rjmp	.+84     	; 0xd50 <_ZN5Servo17writeMicrosecondsEi+0xd0>
    else if( value > SERVO_MAX() )
     cfc:	8b 81       	ldd	r24, Y+3	; 0x03
     cfe:	9c 81       	ldd	r25, Y+4	; 0x04
     d00:	fc 01       	movw	r30, r24
     d02:	82 81       	ldd	r24, Z+2	; 0x02
     d04:	08 2e       	mov	r0, r24
     d06:	00 0c       	add	r0, r0
     d08:	99 0b       	sbc	r25, r25
     d0a:	28 e5       	ldi	r18, 0x58	; 88
     d0c:	32 e0       	ldi	r19, 0x02	; 2
     d0e:	a9 01       	movw	r20, r18
     d10:	48 1b       	sub	r20, r24
     d12:	59 0b       	sbc	r21, r25
     d14:	ca 01       	movw	r24, r20
     d16:	9c 01       	movw	r18, r24
     d18:	22 0f       	add	r18, r18
     d1a:	33 1f       	adc	r19, r19
     d1c:	22 0f       	add	r18, r18
     d1e:	33 1f       	adc	r19, r19
     d20:	8d 81       	ldd	r24, Y+5	; 0x05
     d22:	9e 81       	ldd	r25, Y+6	; 0x06
     d24:	28 17       	cp	r18, r24
     d26:	39 07       	cpc	r19, r25
     d28:	9c f4       	brge	.+38     	; 0xd50 <_ZN5Servo17writeMicrosecondsEi+0xd0>
      value = SERVO_MAX();
     d2a:	8b 81       	ldd	r24, Y+3	; 0x03
     d2c:	9c 81       	ldd	r25, Y+4	; 0x04
     d2e:	fc 01       	movw	r30, r24
     d30:	82 81       	ldd	r24, Z+2	; 0x02
     d32:	08 2e       	mov	r0, r24
     d34:	00 0c       	add	r0, r0
     d36:	99 0b       	sbc	r25, r25
     d38:	28 e5       	ldi	r18, 0x58	; 88
     d3a:	32 e0       	ldi	r19, 0x02	; 2
     d3c:	a9 01       	movw	r20, r18
     d3e:	48 1b       	sub	r20, r24
     d40:	59 0b       	sbc	r21, r25
     d42:	ca 01       	movw	r24, r20
     d44:	88 0f       	add	r24, r24
     d46:	99 1f       	adc	r25, r25
     d48:	88 0f       	add	r24, r24
     d4a:	99 1f       	adc	r25, r25
     d4c:	9e 83       	std	Y+6, r25	; 0x06
     d4e:	8d 83       	std	Y+5, r24	; 0x05

    value = value - TRIM_DURATION;
     d50:	8d 81       	ldd	r24, Y+5	; 0x05
     d52:	9e 81       	ldd	r25, Y+6	; 0x06
     d54:	02 97       	sbiw	r24, 0x02	; 2
     d56:	9e 83       	std	Y+6, r25	; 0x06
     d58:	8d 83       	std	Y+5, r24	; 0x05
    value = usToTicks(value);  // convert to ticks after compensating for interrupt overhead - 12 Aug 2009
     d5a:	8d 81       	ldd	r24, Y+5	; 0x05
     d5c:	9e 81       	ldd	r25, Y+6	; 0x06
     d5e:	09 2e       	mov	r0, r25
     d60:	00 0c       	add	r0, r0
     d62:	aa 0b       	sbc	r26, r26
     d64:	bb 0b       	sbc	r27, r27
     d66:	88 0f       	add	r24, r24
     d68:	99 1f       	adc	r25, r25
     d6a:	aa 1f       	adc	r26, r26
     d6c:	bb 1f       	adc	r27, r27
     d6e:	88 0f       	add	r24, r24
     d70:	99 1f       	adc	r25, r25
     d72:	aa 1f       	adc	r26, r26
     d74:	bb 1f       	adc	r27, r27
     d76:	88 0f       	add	r24, r24
     d78:	99 1f       	adc	r25, r25
     d7a:	aa 1f       	adc	r26, r26
     d7c:	bb 1f       	adc	r27, r27
     d7e:	88 0f       	add	r24, r24
     d80:	99 1f       	adc	r25, r25
     d82:	aa 1f       	adc	r26, r26
     d84:	bb 1f       	adc	r27, r27
     d86:	bb 23       	and	r27, r27
     d88:	1c f4       	brge	.+6      	; 0xd90 <_ZN5Servo17writeMicrosecondsEi+0x110>
     d8a:	07 96       	adiw	r24, 0x07	; 7
     d8c:	a1 1d       	adc	r26, r1
     d8e:	b1 1d       	adc	r27, r1
     d90:	68 94       	set
     d92:	12 f8       	bld	r1, 2
     d94:	b5 95       	asr	r27
     d96:	a7 95       	ror	r26
     d98:	97 95       	ror	r25
     d9a:	87 95       	ror	r24
     d9c:	16 94       	lsr	r1
     d9e:	d1 f7       	brne	.-12     	; 0xd94 <_ZN5Servo17writeMicrosecondsEi+0x114>
     da0:	9e 83       	std	Y+6, r25	; 0x06
     da2:	8d 83       	std	Y+5, r24	; 0x05

    uint8_t oldSREG = SREG;
     da4:	8f e5       	ldi	r24, 0x5F	; 95
     da6:	90 e0       	ldi	r25, 0x00	; 0
     da8:	fc 01       	movw	r30, r24
     daa:	80 81       	ld	r24, Z
     dac:	8a 83       	std	Y+2, r24	; 0x02
    cli();
     dae:	f8 94       	cli
    servos[channel].ticks = value;
     db0:	89 81       	ldd	r24, Y+1	; 0x01
     db2:	28 2f       	mov	r18, r24
     db4:	30 e0       	ldi	r19, 0x00	; 0
     db6:	4d 81       	ldd	r20, Y+5	; 0x05
     db8:	5e 81       	ldd	r21, Y+6	; 0x06
     dba:	c9 01       	movw	r24, r18
     dbc:	88 0f       	add	r24, r24
     dbe:	99 1f       	adc	r25, r25
     dc0:	82 0f       	add	r24, r18
     dc2:	93 1f       	adc	r25, r19
     dc4:	86 5f       	subi	r24, 0xF6	; 246
     dc6:	9d 4f       	sbci	r25, 0xFD	; 253
     dc8:	fc 01       	movw	r30, r24
     dca:	51 83       	std	Z+1, r21	; 0x01
     dcc:	40 83       	st	Z, r20
    SREG = oldSREG;
     dce:	8f e5       	ldi	r24, 0x5F	; 95
     dd0:	90 e0       	ldi	r25, 0x00	; 0
     dd2:	2a 81       	ldd	r18, Y+2	; 0x02
     dd4:	fc 01       	movw	r30, r24
     dd6:	20 83       	st	Z, r18
  }
}
     dd8:	00 00       	nop
     dda:	26 96       	adiw	r28, 0x06	; 6
     ddc:	0f b6       	in	r0, 0x3f	; 63
     dde:	f8 94       	cli
     de0:	de bf       	out	0x3e, r29	; 62
     de2:	0f be       	out	0x3f, r0	; 63
     de4:	cd bf       	out	0x3d, r28	; 61
     de6:	df 91       	pop	r29
     de8:	cf 91       	pop	r28
     dea:	08 95       	ret

00000dec <initVariant>:
     dec:	08 95       	ret

00000dee <main>:
void setupUSB() __attribute__((weak));
void setupUSB() { }

int main(void)
{
	init();
     dee:	b2 d0       	rcall	.+356    	; 0xf54 <init>

	initVariant();
     df0:	fd df       	rcall	.-6      	; 0xdec <initVariant>

#if defined(USBCON)
	USBDevice.attach();
#endif
	
	setup();
     df2:	3f da       	rcall	.-2946   	; 0x272 <setup>
    
	for (;;) {
		loop();
		if (serialEventRun) serialEventRun();
     df4:	c0 e0       	ldi	r28, 0x00	; 0
     df6:	d0 e0       	ldi	r29, 0x00	; 0
#endif
	
	setup();
    
	for (;;) {
		loop();
     df8:	49 da       	rcall	.-2926   	; 0x28c <loop>
     dfa:	20 97       	sbiw	r28, 0x00	; 0
		if (serialEventRun) serialEventRun();
     dfc:	e9 f3       	breq	.-6      	; 0xdf8 <main+0xa>
     dfe:	0e 94 00 00 	call	0	; 0x0 <__vectors>
     e02:	fa cf       	rjmp	.-12     	; 0xdf8 <main+0xa>

00000e04 <__vector_23>:
     e04:	1f 92       	push	r1
	

#endif

	// busy wait
	__asm__ __volatile__ (
     e06:	0f 92       	push	r0
     e08:	0f b6       	in	r0, 0x3f	; 63
     e0a:	0f 92       	push	r0
     e0c:	11 24       	eor	r1, r1
     e0e:	2f 93       	push	r18
     e10:	3f 93       	push	r19
     e12:	8f 93       	push	r24
     e14:	9f 93       	push	r25
     e16:	af 93       	push	r26
     e18:	bf 93       	push	r27
     e1a:	80 91 9f 02 	lds	r24, 0x029F	; 0x80029f <timer0_millis>
     e1e:	90 91 a0 02 	lds	r25, 0x02A0	; 0x8002a0 <timer0_millis+0x1>
     e22:	a0 91 a1 02 	lds	r26, 0x02A1	; 0x8002a1 <timer0_millis+0x2>
     e26:	b0 91 a2 02 	lds	r27, 0x02A2	; 0x8002a2 <timer0_millis+0x3>
     e2a:	30 91 9e 02 	lds	r19, 0x029E	; 0x80029e <timer0_fract>
     e2e:	23 e0       	ldi	r18, 0x03	; 3
     e30:	23 0f       	add	r18, r19
     e32:	2d 37       	cpi	r18, 0x7D	; 125
     e34:	20 f4       	brcc	.+8      	; 0xe3e <__vector_23+0x3a>
     e36:	01 96       	adiw	r24, 0x01	; 1
     e38:	a1 1d       	adc	r26, r1
     e3a:	b1 1d       	adc	r27, r1
     e3c:	05 c0       	rjmp	.+10     	; 0xe48 <__vector_23+0x44>
     e3e:	26 e8       	ldi	r18, 0x86	; 134
     e40:	23 0f       	add	r18, r19
     e42:	02 96       	adiw	r24, 0x02	; 2
     e44:	a1 1d       	adc	r26, r1
     e46:	b1 1d       	adc	r27, r1
     e48:	20 93 9e 02 	sts	0x029E, r18	; 0x80029e <timer0_fract>
     e4c:	80 93 9f 02 	sts	0x029F, r24	; 0x80029f <timer0_millis>
     e50:	90 93 a0 02 	sts	0x02A0, r25	; 0x8002a0 <timer0_millis+0x1>
     e54:	a0 93 a1 02 	sts	0x02A1, r26	; 0x8002a1 <timer0_millis+0x2>
     e58:	b0 93 a2 02 	sts	0x02A2, r27	; 0x8002a2 <timer0_millis+0x3>
     e5c:	80 91 a3 02 	lds	r24, 0x02A3	; 0x8002a3 <timer0_overflow_count>
     e60:	90 91 a4 02 	lds	r25, 0x02A4	; 0x8002a4 <timer0_overflow_count+0x1>
     e64:	a0 91 a5 02 	lds	r26, 0x02A5	; 0x8002a5 <timer0_overflow_count+0x2>
     e68:	b0 91 a6 02 	lds	r27, 0x02A6	; 0x8002a6 <timer0_overflow_count+0x3>
     e6c:	01 96       	adiw	r24, 0x01	; 1
     e6e:	a1 1d       	adc	r26, r1
     e70:	b1 1d       	adc	r27, r1
     e72:	80 93 a3 02 	sts	0x02A3, r24	; 0x8002a3 <timer0_overflow_count>
     e76:	90 93 a4 02 	sts	0x02A4, r25	; 0x8002a4 <timer0_overflow_count+0x1>
     e7a:	a0 93 a5 02 	sts	0x02A5, r26	; 0x8002a5 <timer0_overflow_count+0x2>
     e7e:	b0 93 a6 02 	sts	0x02A6, r27	; 0x8002a6 <timer0_overflow_count+0x3>
     e82:	bf 91       	pop	r27
     e84:	af 91       	pop	r26
     e86:	9f 91       	pop	r25
     e88:	8f 91       	pop	r24
     e8a:	3f 91       	pop	r19
     e8c:	2f 91       	pop	r18
     e8e:	0f 90       	pop	r0
     e90:	0f be       	out	0x3f, r0	; 63
     e92:	0f 90       	pop	r0
     e94:	1f 90       	pop	r1
     e96:	18 95       	reti

00000e98 <micros>:
     e98:	3f b7       	in	r19, 0x3f	; 63
     e9a:	f8 94       	cli
     e9c:	80 91 a3 02 	lds	r24, 0x02A3	; 0x8002a3 <timer0_overflow_count>
     ea0:	90 91 a4 02 	lds	r25, 0x02A4	; 0x8002a4 <timer0_overflow_count+0x1>
     ea4:	a0 91 a5 02 	lds	r26, 0x02A5	; 0x8002a5 <timer0_overflow_count+0x2>
     ea8:	b0 91 a6 02 	lds	r27, 0x02A6	; 0x8002a6 <timer0_overflow_count+0x3>
     eac:	26 b5       	in	r18, 0x26	; 38
     eae:	a8 9b       	sbis	0x15, 0	; 21
     eb0:	05 c0       	rjmp	.+10     	; 0xebc <micros+0x24>
     eb2:	2f 3f       	cpi	r18, 0xFF	; 255
     eb4:	19 f0       	breq	.+6      	; 0xebc <micros+0x24>
     eb6:	01 96       	adiw	r24, 0x01	; 1
     eb8:	a1 1d       	adc	r26, r1
     eba:	b1 1d       	adc	r27, r1
     ebc:	3f bf       	out	0x3f, r19	; 63
     ebe:	ba 2f       	mov	r27, r26
     ec0:	a9 2f       	mov	r26, r25
     ec2:	98 2f       	mov	r25, r24
     ec4:	88 27       	eor	r24, r24
     ec6:	82 0f       	add	r24, r18
     ec8:	91 1d       	adc	r25, r1
     eca:	a1 1d       	adc	r26, r1
     ecc:	b1 1d       	adc	r27, r1
     ece:	bc 01       	movw	r22, r24
     ed0:	cd 01       	movw	r24, r26
     ed2:	42 e0       	ldi	r20, 0x02	; 2
     ed4:	66 0f       	add	r22, r22
     ed6:	77 1f       	adc	r23, r23
     ed8:	88 1f       	adc	r24, r24
     eda:	99 1f       	adc	r25, r25
     edc:	4a 95       	dec	r20
     ede:	d1 f7       	brne	.-12     	; 0xed4 <micros+0x3c>
     ee0:	08 95       	ret

00000ee2 <delay>:
     ee2:	8f 92       	push	r8
     ee4:	9f 92       	push	r9
     ee6:	af 92       	push	r10
     ee8:	bf 92       	push	r11
     eea:	cf 92       	push	r12
     eec:	df 92       	push	r13
     eee:	ef 92       	push	r14
     ef0:	ff 92       	push	r15
     ef2:	6b 01       	movw	r12, r22
     ef4:	7c 01       	movw	r14, r24
     ef6:	d0 df       	rcall	.-96     	; 0xe98 <micros>
     ef8:	4b 01       	movw	r8, r22
     efa:	5c 01       	movw	r10, r24
     efc:	c1 14       	cp	r12, r1
     efe:	d1 04       	cpc	r13, r1
     f00:	e1 04       	cpc	r14, r1
     f02:	f1 04       	cpc	r15, r1
     f04:	f1 f0       	breq	.+60     	; 0xf42 <delay+0x60>
     f06:	ab d1       	rcall	.+854    	; 0x125e <yield>
     f08:	c7 df       	rcall	.-114    	; 0xe98 <micros>
     f0a:	dc 01       	movw	r26, r24
     f0c:	cb 01       	movw	r24, r22
     f0e:	88 19       	sub	r24, r8
     f10:	99 09       	sbc	r25, r9
     f12:	aa 09       	sbc	r26, r10
     f14:	bb 09       	sbc	r27, r11
     f16:	88 3e       	cpi	r24, 0xE8	; 232
     f18:	93 40       	sbci	r25, 0x03	; 3
     f1a:	a1 05       	cpc	r26, r1
     f1c:	b1 05       	cpc	r27, r1
     f1e:	70 f3       	brcs	.-36     	; 0xefc <delay+0x1a>
     f20:	21 e0       	ldi	r18, 0x01	; 1
     f22:	c2 1a       	sub	r12, r18
     f24:	d1 08       	sbc	r13, r1
     f26:	e1 08       	sbc	r14, r1
     f28:	f1 08       	sbc	r15, r1
     f2a:	88 ee       	ldi	r24, 0xE8	; 232
     f2c:	88 0e       	add	r8, r24
     f2e:	83 e0       	ldi	r24, 0x03	; 3
     f30:	98 1e       	adc	r9, r24
     f32:	a1 1c       	adc	r10, r1
     f34:	b1 1c       	adc	r11, r1
     f36:	c1 14       	cp	r12, r1
     f38:	d1 04       	cpc	r13, r1
     f3a:	e1 04       	cpc	r14, r1
     f3c:	f1 04       	cpc	r15, r1
     f3e:	21 f7       	brne	.-56     	; 0xf08 <delay+0x26>
     f40:	dd cf       	rjmp	.-70     	; 0xefc <delay+0x1a>
     f42:	ff 90       	pop	r15
     f44:	ef 90       	pop	r14
     f46:	df 90       	pop	r13
     f48:	cf 90       	pop	r12
     f4a:	bf 90       	pop	r11
     f4c:	af 90       	pop	r10
     f4e:	9f 90       	pop	r9
     f50:	8f 90       	pop	r8
     f52:	08 95       	ret

00000f54 <init>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
     f54:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
     f56:	84 b5       	in	r24, 0x24	; 36
     f58:	82 60       	ori	r24, 0x02	; 2
     f5a:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
     f5c:	84 b5       	in	r24, 0x24	; 36
     f5e:	81 60       	ori	r24, 0x01	; 1
     f60:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
     f62:	85 b5       	in	r24, 0x25	; 37
     f64:	82 60       	ori	r24, 0x02	; 2
     f66:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
     f68:	85 b5       	in	r24, 0x25	; 37
     f6a:	81 60       	ori	r24, 0x01	; 1
     f6c:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
     f6e:	ee e6       	ldi	r30, 0x6E	; 110
     f70:	f0 e0       	ldi	r31, 0x00	; 0
     f72:	80 81       	ld	r24, Z
     f74:	81 60       	ori	r24, 0x01	; 1
     f76:	80 83       	st	Z, r24
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
     f78:	e1 e8       	ldi	r30, 0x81	; 129
     f7a:	f0 e0       	ldi	r31, 0x00	; 0
     f7c:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
     f7e:	80 81       	ld	r24, Z
     f80:	82 60       	ori	r24, 0x02	; 2
     f82:	80 83       	st	Z, r24
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
     f84:	80 81       	ld	r24, Z
     f86:	81 60       	ori	r24, 0x01	; 1
     f88:	80 83       	st	Z, r24
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
     f8a:	e0 e8       	ldi	r30, 0x80	; 128
     f8c:	f0 e0       	ldi	r31, 0x00	; 0
     f8e:	80 81       	ld	r24, Z
     f90:	81 60       	ori	r24, 0x01	; 1
     f92:	80 83       	st	Z, r24

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
     f94:	e1 eb       	ldi	r30, 0xB1	; 177
     f96:	f0 e0       	ldi	r31, 0x00	; 0
     f98:	80 81       	ld	r24, Z
     f9a:	84 60       	ori	r24, 0x04	; 4
     f9c:	80 83       	st	Z, r24

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
     f9e:	e0 eb       	ldi	r30, 0xB0	; 176
     fa0:	f0 e0       	ldi	r31, 0x00	; 0
     fa2:	80 81       	ld	r24, Z
     fa4:	81 60       	ori	r24, 0x01	; 1
     fa6:	80 83       	st	Z, r24
//#else
	// Timer 2 not finished (may not be present on this CPU)
#endif

#if defined(TCCR3B) && defined(CS31) && defined(WGM30)
	sbi(TCCR3B, CS31);		// set timer 3 prescale factor to 64
     fa8:	e1 e9       	ldi	r30, 0x91	; 145
     faa:	f0 e0       	ldi	r31, 0x00	; 0
     fac:	80 81       	ld	r24, Z
     fae:	82 60       	ori	r24, 0x02	; 2
     fb0:	80 83       	st	Z, r24
	sbi(TCCR3B, CS30);
     fb2:	80 81       	ld	r24, Z
     fb4:	81 60       	ori	r24, 0x01	; 1
     fb6:	80 83       	st	Z, r24
	sbi(TCCR3A, WGM30);		// put timer 3 in 8-bit phase correct pwm mode
     fb8:	e0 e9       	ldi	r30, 0x90	; 144
     fba:	f0 e0       	ldi	r31, 0x00	; 0
     fbc:	80 81       	ld	r24, Z
     fbe:	81 60       	ori	r24, 0x01	; 1
     fc0:	80 83       	st	Z, r24
	sbi(TCCR4D, WGM40);		// put timer 4 in phase- and frequency-correct PWM mode	
	sbi(TCCR4A, PWM4A);		// enable PWM mode for comparator OCR4A
	sbi(TCCR4C, PWM4D);		// enable PWM mode for comparator OCR4D
#else /* beginning of timer4 block for ATMEGA1280 and ATMEGA2560 */
#if defined(TCCR4B) && defined(CS41) && defined(WGM40)
	sbi(TCCR4B, CS41);		// set timer 4 prescale factor to 64
     fc2:	e1 ea       	ldi	r30, 0xA1	; 161
     fc4:	f0 e0       	ldi	r31, 0x00	; 0
     fc6:	80 81       	ld	r24, Z
     fc8:	82 60       	ori	r24, 0x02	; 2
     fca:	80 83       	st	Z, r24
	sbi(TCCR4B, CS40);
     fcc:	80 81       	ld	r24, Z
     fce:	81 60       	ori	r24, 0x01	; 1
     fd0:	80 83       	st	Z, r24
	sbi(TCCR4A, WGM40);		// put timer 4 in 8-bit phase correct pwm mode
     fd2:	e0 ea       	ldi	r30, 0xA0	; 160
     fd4:	f0 e0       	ldi	r31, 0x00	; 0
     fd6:	80 81       	ld	r24, Z
     fd8:	81 60       	ori	r24, 0x01	; 1
     fda:	80 83       	st	Z, r24
#endif
#endif /* end timer4 block for ATMEGA1280/2560 and similar */	

#if defined(TCCR5B) && defined(CS51) && defined(WGM50)
	sbi(TCCR5B, CS51);		// set timer 5 prescale factor to 64
     fdc:	e1 e2       	ldi	r30, 0x21	; 33
     fde:	f1 e0       	ldi	r31, 0x01	; 1
     fe0:	80 81       	ld	r24, Z
     fe2:	82 60       	ori	r24, 0x02	; 2
     fe4:	80 83       	st	Z, r24
	sbi(TCCR5B, CS50);
     fe6:	80 81       	ld	r24, Z
     fe8:	81 60       	ori	r24, 0x01	; 1
     fea:	80 83       	st	Z, r24
	sbi(TCCR5A, WGM50);		// put timer 5 in 8-bit phase correct pwm mode
     fec:	e0 e2       	ldi	r30, 0x20	; 32
     fee:	f1 e0       	ldi	r31, 0x01	; 1
     ff0:	80 81       	ld	r24, Z
     ff2:	81 60       	ori	r24, 0x01	; 1
     ff4:	80 83       	st	Z, r24
#endif

#if defined(ADCSRA)
	// set a2d prescaler so we are inside the desired 50-200 KHz range.
	#if F_CPU >= 16000000 // 16 MHz / 128 = 125 KHz
		sbi(ADCSRA, ADPS2);
     ff6:	ea e7       	ldi	r30, 0x7A	; 122
     ff8:	f0 e0       	ldi	r31, 0x00	; 0
     ffa:	80 81       	ld	r24, Z
     ffc:	84 60       	ori	r24, 0x04	; 4
     ffe:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS1);
    1000:	80 81       	ld	r24, Z
    1002:	82 60       	ori	r24, 0x02	; 2
    1004:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS0);
    1006:	80 81       	ld	r24, Z
    1008:	81 60       	ori	r24, 0x01	; 1
    100a:	80 83       	st	Z, r24
		cbi(ADCSRA, ADPS2);
		cbi(ADCSRA, ADPS1);
		sbi(ADCSRA, ADPS0);
	#endif
	// enable a2d conversions
	sbi(ADCSRA, ADEN);
    100c:	80 81       	ld	r24, Z
    100e:	80 68       	ori	r24, 0x80	; 128
    1010:	80 83       	st	Z, r24
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
    1012:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7c00c1>
    1016:	08 95       	ret

00001018 <analogRead>:
#if defined(__AVR_ATmega32U4__)
	if (pin >= 18) pin -= 18; // allow for channel or pin numbers
#endif
	pin = analogPinToChannel(pin);
#elif defined(__AVR_ATmega1280__) || defined(__AVR_ATmega2560__)
	if (pin >= 54) pin -= 54; // allow for channel or pin numbers
    1018:	86 33       	cpi	r24, 0x36	; 54
    101a:	08 f0       	brcs	.+2      	; 0x101e <analogRead+0x6>
    101c:	86 53       	subi	r24, 0x36	; 54
#endif

#if defined(ADCSRB) && defined(MUX5)
	// the MUX5 bit of ADCSRB selects whether we're reading from channels
	// 0 to 7 (MUX5 low) or 8 to 15 (MUX5 high).
	ADCSRB = (ADCSRB & ~(1 << MUX5)) | (((pin >> 3) & 0x01) << MUX5);
    101e:	90 91 7b 00 	lds	r25, 0x007B	; 0x80007b <__TEXT_REGION_LENGTH__+0x7c007b>
    1022:	28 2f       	mov	r18, r24
    1024:	28 70       	andi	r18, 0x08	; 8
    1026:	97 7f       	andi	r25, 0xF7	; 247
    1028:	92 2b       	or	r25, r18
    102a:	90 93 7b 00 	sts	0x007B, r25	; 0x80007b <__TEXT_REGION_LENGTH__+0x7c007b>
	// to 0 (the default).
#if defined(ADMUX)
#if defined(__AVR_ATtiny25__) || defined(__AVR_ATtiny45__) || defined(__AVR_ATtiny85__)
	ADMUX = (analog_reference << 4) | (pin & 0x07);
#else
	ADMUX = (analog_reference << 6) | (pin & 0x07);
    102e:	20 91 02 02 	lds	r18, 0x0202	; 0x800202 <analog_reference>
    1032:	90 e4       	ldi	r25, 0x40	; 64
    1034:	29 9f       	mul	r18, r25
    1036:	90 01       	movw	r18, r0
    1038:	11 24       	eor	r1, r1
    103a:	87 70       	andi	r24, 0x07	; 7
    103c:	82 2b       	or	r24, r18
    103e:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7c007c>
	// without a delay, we seem to read from the wrong channel
	//delay(1);

#if defined(ADCSRA) && defined(ADCL)
	// start the conversion
	sbi(ADCSRA, ADSC);
    1042:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7c007a>
    1046:	80 64       	ori	r24, 0x40	; 64
    1048:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7c007a>

	// ADSC is cleared when the conversion finishes
	while (bit_is_set(ADCSRA, ADSC));
    104c:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7c007a>
    1050:	86 fd       	sbrc	r24, 6
    1052:	fc cf       	rjmp	.-8      	; 0x104c <analogRead+0x34>

	// we have to read ADCL first; doing so locks both ADCL
	// and ADCH until ADCH is read.  reading ADCL second would
	// cause the results of each conversion to be discarded,
	// as ADCL and ADCH would be locked when it completed.
	low  = ADCL;
    1054:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7c0078>
	high = ADCH;
    1058:	20 91 79 00 	lds	r18, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7c0079>
	low  = 0;
	high = 0;
#endif

	// combine the two bytes
	return (high << 8) | low;
    105c:	90 e0       	ldi	r25, 0x00	; 0
}
    105e:	92 2b       	or	r25, r18
    1060:	08 95       	ret

00001062 <turnOffPWM>:
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
    1062:	90 e0       	ldi	r25, 0x00	; 0
    1064:	fc 01       	movw	r30, r24
    1066:	31 97       	sbiw	r30, 0x01	; 1
    1068:	e2 31       	cpi	r30, 0x12	; 18
    106a:	f1 05       	cpc	r31, r1
    106c:	08 f0       	brcs	.+2      	; 0x1070 <turnOffPWM+0xe>
    106e:	4d c0       	rjmp	.+154    	; 0x110a <turnOffPWM+0xa8>
    1070:	88 27       	eor	r24, r24
    1072:	ee 58       	subi	r30, 0x8E	; 142
    1074:	ff 4f       	sbci	r31, 0xFF	; 255
    1076:	8f 4f       	sbci	r24, 0xFF	; 255
    1078:	40 c1       	rjmp	.+640    	; 0x12fa <__tablejump2__>
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
    107a:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7c0080>
    107e:	8f 77       	andi	r24, 0x7F	; 127
    1080:	03 c0       	rjmp	.+6      	; 0x1088 <turnOffPWM+0x26>
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
    1082:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7c0080>
    1086:	8f 7d       	andi	r24, 0xDF	; 223
    1088:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7c0080>
    108c:	08 95       	ret
		#endif
		#if defined(TCCR1A) && defined(COM1C1)
		case TIMER1C:   cbi(TCCR1A, COM1C1);    break;
    108e:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7c0080>
    1092:	87 7f       	andi	r24, 0xF7	; 247
    1094:	f9 cf       	rjmp	.-14     	; 0x1088 <turnOffPWM+0x26>
		#if defined(TCCR2) && defined(COM21)
		case  TIMER2:   cbi(TCCR2, COM21);      break;
		#endif
		
		#if defined(TCCR0A) && defined(COM0A1)
		case  TIMER0A:  cbi(TCCR0A, COM0A1);    break;
    1096:	84 b5       	in	r24, 0x24	; 36
    1098:	8f 77       	andi	r24, 0x7F	; 127
    109a:	02 c0       	rjmp	.+4      	; 0x10a0 <turnOffPWM+0x3e>
		#endif
		
		#if defined(TCCR0A) && defined(COM0B1)
		case  TIMER0B:  cbi(TCCR0A, COM0B1);    break;
    109c:	84 b5       	in	r24, 0x24	; 36
    109e:	8f 7d       	andi	r24, 0xDF	; 223
    10a0:	84 bd       	out	0x24, r24	; 36
    10a2:	08 95       	ret
		#endif
		#if defined(TCCR2A) && defined(COM2A1)
		case  TIMER2A:  cbi(TCCR2A, COM2A1);    break;
    10a4:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7c00b0>
    10a8:	8f 77       	andi	r24, 0x7F	; 127
    10aa:	03 c0       	rjmp	.+6      	; 0x10b2 <turnOffPWM+0x50>
		#endif
		#if defined(TCCR2A) && defined(COM2B1)
		case  TIMER2B:  cbi(TCCR2A, COM2B1);    break;
    10ac:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7c00b0>
    10b0:	8f 7d       	andi	r24, 0xDF	; 223
    10b2:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7c00b0>
    10b6:	08 95       	ret
		#endif
		
		#if defined(TCCR3A) && defined(COM3A1)
		case  TIMER3A:  cbi(TCCR3A, COM3A1);    break;
    10b8:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__TEXT_REGION_LENGTH__+0x7c0090>
    10bc:	8f 77       	andi	r24, 0x7F	; 127
    10be:	07 c0       	rjmp	.+14     	; 0x10ce <turnOffPWM+0x6c>
		#endif
		#if defined(TCCR3A) && defined(COM3B1)
		case  TIMER3B:  cbi(TCCR3A, COM3B1);    break;
    10c0:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__TEXT_REGION_LENGTH__+0x7c0090>
    10c4:	8f 7d       	andi	r24, 0xDF	; 223
    10c6:	03 c0       	rjmp	.+6      	; 0x10ce <turnOffPWM+0x6c>
		#endif
		#if defined(TCCR3A) && defined(COM3C1)
		case  TIMER3C:  cbi(TCCR3A, COM3C1);    break;
    10c8:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__TEXT_REGION_LENGTH__+0x7c0090>
    10cc:	87 7f       	andi	r24, 0xF7	; 247
    10ce:	80 93 90 00 	sts	0x0090, r24	; 0x800090 <__TEXT_REGION_LENGTH__+0x7c0090>
    10d2:	08 95       	ret
		#endif

		#if defined(TCCR4A) && defined(COM4A1)
		case  TIMER4A:  cbi(TCCR4A, COM4A1);    break;
    10d4:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7c00a0>
    10d8:	8f 77       	andi	r24, 0x7F	; 127
    10da:	07 c0       	rjmp	.+14     	; 0x10ea <turnOffPWM+0x88>
		#endif					
		#if defined(TCCR4A) && defined(COM4B1)
		case  TIMER4B:  cbi(TCCR4A, COM4B1);    break;
    10dc:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7c00a0>
    10e0:	8f 7d       	andi	r24, 0xDF	; 223
    10e2:	03 c0       	rjmp	.+6      	; 0x10ea <turnOffPWM+0x88>
		#endif
		#if defined(TCCR4A) && defined(COM4C1)
		case  TIMER4C:  cbi(TCCR4A, COM4C1);    break;
    10e4:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7c00a0>
    10e8:	87 7f       	andi	r24, 0xF7	; 247
    10ea:	80 93 a0 00 	sts	0x00A0, r24	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7c00a0>
    10ee:	08 95       	ret
		#if defined(TCCR4C) && defined(COM4D1)
		case TIMER4D:	cbi(TCCR4C, COM4D1);	break;
		#endif			
			
		#if defined(TCCR5A)
		case  TIMER5A:  cbi(TCCR5A, COM5A1);    break;
    10f0:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <__TEXT_REGION_LENGTH__+0x7c0120>
    10f4:	8f 77       	andi	r24, 0x7F	; 127
    10f6:	07 c0       	rjmp	.+14     	; 0x1106 <turnOffPWM+0xa4>
		case  TIMER5B:  cbi(TCCR5A, COM5B1);    break;
    10f8:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <__TEXT_REGION_LENGTH__+0x7c0120>
    10fc:	8f 7d       	andi	r24, 0xDF	; 223
    10fe:	03 c0       	rjmp	.+6      	; 0x1106 <turnOffPWM+0xa4>
		case  TIMER5C:  cbi(TCCR5A, COM5C1);    break;
    1100:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <__TEXT_REGION_LENGTH__+0x7c0120>
    1104:	87 7f       	andi	r24, 0xF7	; 247
    1106:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <__TEXT_REGION_LENGTH__+0x7c0120>
    110a:	08 95       	ret

0000110c <pinMode>:
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
    110c:	cf 93       	push	r28
    110e:	df 93       	push	r29
	uint8_t bit = digitalPinToBitMask(pin);
    1110:	90 e0       	ldi	r25, 0x00	; 0
    1112:	fc 01       	movw	r30, r24
    1114:	e2 5b       	subi	r30, 0xB2	; 178
    1116:	fe 4f       	sbci	r31, 0xFE	; 254
    1118:	24 91       	lpm	r18, Z
	uint8_t port = digitalPinToPort(pin);
    111a:	fc 01       	movw	r30, r24
    111c:	ec 56       	subi	r30, 0x6C	; 108
    111e:	fe 4f       	sbci	r31, 0xFE	; 254
    1120:	84 91       	lpm	r24, Z
	volatile uint8_t *reg, *out;

	if (port == NOT_A_PIN) return;
    1122:	88 23       	and	r24, r24
    1124:	61 f1       	breq	.+88     	; 0x117e <pinMode+0x72>

	// JWS: can I let the optimizer do this?
	reg = portModeRegister(port);
    1126:	90 e0       	ldi	r25, 0x00	; 0
    1128:	88 0f       	add	r24, r24
    112a:	99 1f       	adc	r25, r25
    112c:	fc 01       	movw	r30, r24
    112e:	ec 50       	subi	r30, 0x0C	; 12
    1130:	fe 4f       	sbci	r31, 0xFE	; 254
    1132:	c5 91       	lpm	r28, Z+
    1134:	d4 91       	lpm	r29, Z
	out = portOutputRegister(port);
    1136:	fc 01       	movw	r30, r24
    1138:	e6 52       	subi	r30, 0x26	; 38
    113a:	fe 4f       	sbci	r31, 0xFE	; 254
    113c:	a5 91       	lpm	r26, Z+
    113e:	b4 91       	lpm	r27, Z

	if (mode == INPUT) { 
    1140:	61 11       	cpse	r22, r1
    1142:	09 c0       	rjmp	.+18     	; 0x1156 <pinMode+0x4a>
		uint8_t oldSREG = SREG;
    1144:	9f b7       	in	r25, 0x3f	; 63
                cli();
    1146:	f8 94       	cli
		*reg &= ~bit;
    1148:	88 81       	ld	r24, Y
    114a:	20 95       	com	r18
    114c:	82 23       	and	r24, r18
    114e:	88 83       	st	Y, r24
		*out &= ~bit;
    1150:	ec 91       	ld	r30, X
    1152:	2e 23       	and	r18, r30
    1154:	0b c0       	rjmp	.+22     	; 0x116c <pinMode+0x60>
		SREG = oldSREG;
	} else if (mode == INPUT_PULLUP) {
    1156:	62 30       	cpi	r22, 0x02	; 2
    1158:	61 f4       	brne	.+24     	; 0x1172 <pinMode+0x66>
		uint8_t oldSREG = SREG;
    115a:	9f b7       	in	r25, 0x3f	; 63
                cli();
    115c:	f8 94       	cli
		*reg &= ~bit;
    115e:	88 81       	ld	r24, Y
    1160:	32 2f       	mov	r19, r18
    1162:	30 95       	com	r19
    1164:	83 23       	and	r24, r19
    1166:	88 83       	st	Y, r24
		*out |= bit;
    1168:	ec 91       	ld	r30, X
    116a:	2e 2b       	or	r18, r30
    116c:	2c 93       	st	X, r18
		SREG = oldSREG;
    116e:	9f bf       	out	0x3f, r25	; 63
    1170:	06 c0       	rjmp	.+12     	; 0x117e <pinMode+0x72>
	} else {
		uint8_t oldSREG = SREG;
    1172:	8f b7       	in	r24, 0x3f	; 63
                cli();
    1174:	f8 94       	cli
		*reg |= bit;
    1176:	e8 81       	ld	r30, Y
    1178:	2e 2b       	or	r18, r30
    117a:	28 83       	st	Y, r18
		SREG = oldSREG;
    117c:	8f bf       	out	0x3f, r24	; 63
	}
}
    117e:	df 91       	pop	r29
    1180:	cf 91       	pop	r28
    1182:	08 95       	ret

00001184 <digitalWrite>:
		#endif
	}
}

void digitalWrite(uint8_t pin, uint8_t val)
{
    1184:	1f 93       	push	r17
    1186:	cf 93       	push	r28
    1188:	df 93       	push	r29
	uint8_t timer = digitalPinToTimer(pin);
    118a:	28 2f       	mov	r18, r24
    118c:	30 e0       	ldi	r19, 0x00	; 0
    118e:	f9 01       	movw	r30, r18
    1190:	e8 5f       	subi	r30, 0xF8	; 248
    1192:	fe 4f       	sbci	r31, 0xFE	; 254
    1194:	84 91       	lpm	r24, Z
	uint8_t bit = digitalPinToBitMask(pin);
    1196:	f9 01       	movw	r30, r18
    1198:	e2 5b       	subi	r30, 0xB2	; 178
    119a:	fe 4f       	sbci	r31, 0xFE	; 254
    119c:	d4 91       	lpm	r29, Z
	uint8_t port = digitalPinToPort(pin);
    119e:	f9 01       	movw	r30, r18
    11a0:	ec 56       	subi	r30, 0x6C	; 108
    11a2:	fe 4f       	sbci	r31, 0xFE	; 254
    11a4:	c4 91       	lpm	r28, Z
	volatile uint8_t *out;

	if (port == NOT_A_PIN) return;
    11a6:	cc 23       	and	r28, r28
    11a8:	b9 f0       	breq	.+46     	; 0x11d8 <digitalWrite+0x54>
    11aa:	16 2f       	mov	r17, r22

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    11ac:	81 11       	cpse	r24, r1
    11ae:	59 df       	rcall	.-334    	; 0x1062 <turnOffPWM>

	out = portOutputRegister(port);
    11b0:	ec 2f       	mov	r30, r28
    11b2:	f0 e0       	ldi	r31, 0x00	; 0
    11b4:	ee 0f       	add	r30, r30
    11b6:	ff 1f       	adc	r31, r31
    11b8:	e6 52       	subi	r30, 0x26	; 38
    11ba:	fe 4f       	sbci	r31, 0xFE	; 254
    11bc:	a5 91       	lpm	r26, Z+
    11be:	b4 91       	lpm	r27, Z

	uint8_t oldSREG = SREG;
    11c0:	9f b7       	in	r25, 0x3f	; 63
	cli();
    11c2:	f8 94       	cli

	if (val == LOW) {
    11c4:	11 11       	cpse	r17, r1
    11c6:	04 c0       	rjmp	.+8      	; 0x11d0 <digitalWrite+0x4c>
		*out &= ~bit;
    11c8:	8c 91       	ld	r24, X
    11ca:	d0 95       	com	r29
    11cc:	d8 23       	and	r29, r24
    11ce:	02 c0       	rjmp	.+4      	; 0x11d4 <digitalWrite+0x50>
	} else {
		*out |= bit;
    11d0:	ec 91       	ld	r30, X
    11d2:	de 2b       	or	r29, r30
    11d4:	dc 93       	st	X, r29
	}

	SREG = oldSREG;
    11d6:	9f bf       	out	0x3f, r25	; 63
}
    11d8:	df 91       	pop	r29
    11da:	cf 91       	pop	r28
    11dc:	1f 91       	pop	r17
    11de:	08 95       	ret

000011e0 <_Z3maplllll>:
  long diff = howbig - howsmall;
  return random(diff) + howsmall;
}

long map(long x, long in_min, long in_max, long out_min, long out_max)
{
    11e0:	4f 92       	push	r4
    11e2:	5f 92       	push	r5
    11e4:	6f 92       	push	r6
    11e6:	7f 92       	push	r7
    11e8:	af 92       	push	r10
    11ea:	bf 92       	push	r11
    11ec:	cf 92       	push	r12
    11ee:	df 92       	push	r13
    11f0:	ef 92       	push	r14
    11f2:	ff 92       	push	r15
    11f4:	0f 93       	push	r16
    11f6:	1f 93       	push	r17
    11f8:	cf 93       	push	r28
    11fa:	df 93       	push	r29
    11fc:	cd b7       	in	r28, 0x3d	; 61
    11fe:	de b7       	in	r29, 0x3e	; 62
    1200:	29 01       	movw	r4, r18
    1202:	3a 01       	movw	r6, r20
  return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
    1204:	9b 01       	movw	r18, r22
    1206:	ac 01       	movw	r20, r24
    1208:	24 19       	sub	r18, r4
    120a:	35 09       	sbc	r19, r5
    120c:	46 09       	sbc	r20, r6
    120e:	57 09       	sbc	r21, r7
    1210:	8a 89       	ldd	r24, Y+18	; 0x12
    1212:	9b 89       	ldd	r25, Y+19	; 0x13
    1214:	ac 89       	ldd	r26, Y+20	; 0x14
    1216:	bd 89       	ldd	r27, Y+21	; 0x15
    1218:	bc 01       	movw	r22, r24
    121a:	cd 01       	movw	r24, r26
    121c:	6a 19       	sub	r22, r10
    121e:	7b 09       	sbc	r23, r11
    1220:	8c 09       	sbc	r24, r12
    1222:	9d 09       	sbc	r25, r13
    1224:	1d d0       	rcall	.+58     	; 0x1260 <__mulsi3>
    1226:	a8 01       	movw	r20, r16
    1228:	97 01       	movw	r18, r14
    122a:	24 19       	sub	r18, r4
    122c:	35 09       	sbc	r19, r5
    122e:	46 09       	sbc	r20, r6
    1230:	57 09       	sbc	r21, r7
    1232:	47 d0       	rcall	.+142    	; 0x12c2 <__divmodsi4>
    1234:	ca 01       	movw	r24, r20
    1236:	b9 01       	movw	r22, r18
    1238:	6a 0d       	add	r22, r10
    123a:	7b 1d       	adc	r23, r11
    123c:	8c 1d       	adc	r24, r12
    123e:	9d 1d       	adc	r25, r13
}
    1240:	df 91       	pop	r29
    1242:	cf 91       	pop	r28
    1244:	1f 91       	pop	r17
    1246:	0f 91       	pop	r16
    1248:	ff 90       	pop	r15
    124a:	ef 90       	pop	r14
    124c:	df 90       	pop	r13
    124e:	cf 90       	pop	r12
    1250:	bf 90       	pop	r11
    1252:	af 90       	pop	r10
    1254:	7f 90       	pop	r7
    1256:	6f 90       	pop	r6
    1258:	5f 90       	pop	r5
    125a:	4f 90       	pop	r4
    125c:	08 95       	ret

0000125e <yield>:
 * libraries or sketches that supports cooperative threads.
 *
 * Its defined as a weak symbol and it can be redefined to implement a
 * real cooperative scheduler.
 */
static void __empty() {
    125e:	08 95       	ret

00001260 <__mulsi3>:
    1260:	db 01       	movw	r26, r22
    1262:	8f 93       	push	r24
    1264:	9f 93       	push	r25
    1266:	51 d0       	rcall	.+162    	; 0x130a <__muluhisi3>
    1268:	bf 91       	pop	r27
    126a:	af 91       	pop	r26
    126c:	a2 9f       	mul	r26, r18
    126e:	80 0d       	add	r24, r0
    1270:	91 1d       	adc	r25, r1
    1272:	a3 9f       	mul	r26, r19
    1274:	90 0d       	add	r25, r0
    1276:	b2 9f       	mul	r27, r18
    1278:	90 0d       	add	r25, r0
    127a:	11 24       	eor	r1, r1
    127c:	08 95       	ret

0000127e <__udivmodsi4>:
    127e:	a1 e2       	ldi	r26, 0x21	; 33
    1280:	1a 2e       	mov	r1, r26
    1282:	aa 1b       	sub	r26, r26
    1284:	bb 1b       	sub	r27, r27
    1286:	fd 01       	movw	r30, r26
    1288:	0d c0       	rjmp	.+26     	; 0x12a4 <__udivmodsi4_ep>

0000128a <__udivmodsi4_loop>:
    128a:	aa 1f       	adc	r26, r26
    128c:	bb 1f       	adc	r27, r27
    128e:	ee 1f       	adc	r30, r30
    1290:	ff 1f       	adc	r31, r31
    1292:	a2 17       	cp	r26, r18
    1294:	b3 07       	cpc	r27, r19
    1296:	e4 07       	cpc	r30, r20
    1298:	f5 07       	cpc	r31, r21
    129a:	20 f0       	brcs	.+8      	; 0x12a4 <__udivmodsi4_ep>
    129c:	a2 1b       	sub	r26, r18
    129e:	b3 0b       	sbc	r27, r19
    12a0:	e4 0b       	sbc	r30, r20
    12a2:	f5 0b       	sbc	r31, r21

000012a4 <__udivmodsi4_ep>:
    12a4:	66 1f       	adc	r22, r22
    12a6:	77 1f       	adc	r23, r23
    12a8:	88 1f       	adc	r24, r24
    12aa:	99 1f       	adc	r25, r25
    12ac:	1a 94       	dec	r1
    12ae:	69 f7       	brne	.-38     	; 0x128a <__udivmodsi4_loop>
    12b0:	60 95       	com	r22
    12b2:	70 95       	com	r23
    12b4:	80 95       	com	r24
    12b6:	90 95       	com	r25
    12b8:	9b 01       	movw	r18, r22
    12ba:	ac 01       	movw	r20, r24
    12bc:	bd 01       	movw	r22, r26
    12be:	cf 01       	movw	r24, r30
    12c0:	08 95       	ret

000012c2 <__divmodsi4>:
    12c2:	05 2e       	mov	r0, r21
    12c4:	97 fb       	bst	r25, 7
    12c6:	16 f4       	brtc	.+4      	; 0x12cc <__divmodsi4+0xa>
    12c8:	00 94       	com	r0
    12ca:	0f d0       	rcall	.+30     	; 0x12ea <__negsi2>
    12cc:	57 fd       	sbrc	r21, 7
    12ce:	05 d0       	rcall	.+10     	; 0x12da <__divmodsi4_neg2>
    12d0:	d6 df       	rcall	.-84     	; 0x127e <__udivmodsi4>
    12d2:	07 fc       	sbrc	r0, 7
    12d4:	02 d0       	rcall	.+4      	; 0x12da <__divmodsi4_neg2>
    12d6:	46 f4       	brtc	.+16     	; 0x12e8 <__divmodsi4_exit>
    12d8:	08 c0       	rjmp	.+16     	; 0x12ea <__negsi2>

000012da <__divmodsi4_neg2>:
    12da:	50 95       	com	r21
    12dc:	40 95       	com	r20
    12de:	30 95       	com	r19
    12e0:	21 95       	neg	r18
    12e2:	3f 4f       	sbci	r19, 0xFF	; 255
    12e4:	4f 4f       	sbci	r20, 0xFF	; 255
    12e6:	5f 4f       	sbci	r21, 0xFF	; 255

000012e8 <__divmodsi4_exit>:
    12e8:	08 95       	ret

000012ea <__negsi2>:
    12ea:	90 95       	com	r25
    12ec:	80 95       	com	r24
    12ee:	70 95       	com	r23
    12f0:	61 95       	neg	r22
    12f2:	7f 4f       	sbci	r23, 0xFF	; 255
    12f4:	8f 4f       	sbci	r24, 0xFF	; 255
    12f6:	9f 4f       	sbci	r25, 0xFF	; 255
    12f8:	08 95       	ret

000012fa <__tablejump2__>:
    12fa:	ee 0f       	add	r30, r30
    12fc:	ff 1f       	adc	r31, r31
    12fe:	88 1f       	adc	r24, r24
    1300:	8b bf       	out	0x3b, r24	; 59
    1302:	07 90       	elpm	r0, Z+
    1304:	f6 91       	elpm	r31, Z
    1306:	e0 2d       	mov	r30, r0
    1308:	19 94       	eijmp

0000130a <__muluhisi3>:
    130a:	09 d0       	rcall	.+18     	; 0x131e <__umulhisi3>
    130c:	a5 9f       	mul	r26, r21
    130e:	90 0d       	add	r25, r0
    1310:	b4 9f       	mul	r27, r20
    1312:	90 0d       	add	r25, r0
    1314:	a4 9f       	mul	r26, r20
    1316:	80 0d       	add	r24, r0
    1318:	91 1d       	adc	r25, r1
    131a:	11 24       	eor	r1, r1
    131c:	08 95       	ret

0000131e <__umulhisi3>:
    131e:	a2 9f       	mul	r26, r18
    1320:	b0 01       	movw	r22, r0
    1322:	b3 9f       	mul	r27, r19
    1324:	c0 01       	movw	r24, r0
    1326:	a3 9f       	mul	r26, r19
    1328:	70 0d       	add	r23, r0
    132a:	81 1d       	adc	r24, r1
    132c:	11 24       	eor	r1, r1
    132e:	91 1d       	adc	r25, r1
    1330:	b2 9f       	mul	r27, r18
    1332:	70 0d       	add	r23, r0
    1334:	81 1d       	adc	r24, r1
    1336:	11 24       	eor	r1, r1
    1338:	91 1d       	adc	r25, r1
    133a:	08 95       	ret

0000133c <_exit>:
    133c:	f8 94       	cli

0000133e <__stop_program>:
    133e:	ff cf       	rjmp	.-2      	; 0x133e <__stop_program>
