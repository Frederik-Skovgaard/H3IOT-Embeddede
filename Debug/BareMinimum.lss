
BareMinimum.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000012  00800200  000016c6  0000175a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000016c6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000a2  00800212  00800212  0000176c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000176c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000179c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000268  00000000  00000000  000017dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002a47  00000000  00000000  00001a44  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000015af  00000000  00000000  0000448b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000014d5  00000000  00000000  00005a3a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000a34  00000000  00000000  00006f10  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000eea  00000000  00000000  00007944  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001ddb  00000000  00000000  0000882e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001e8  00000000  00000000  0000a609  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0e c1       	rjmp	.+540    	; 0x21e <__ctors_end>
       2:	00 00       	nop
       4:	8f c7       	rjmp	.+3870   	; 0xf24 <__vector_1>
       6:	00 00       	nop
       8:	b8 c7       	rjmp	.+3952   	; 0xf7a <__vector_2>
       a:	00 00       	nop
       c:	e1 c7       	rjmp	.+4034   	; 0xfd0 <__vector_3>
       e:	00 00       	nop
      10:	0c 94 13 08 	jmp	0x1026	; 0x1026 <__vector_4>
      14:	0c 94 3e 08 	jmp	0x107c	; 0x107c <__vector_5>
      18:	0c 94 69 08 	jmp	0x10d2	; 0x10d2 <__vector_6>
      1c:	0c 94 94 08 	jmp	0x1128	; 0x1128 <__vector_7>
      20:	0c 94 bf 08 	jmp	0x117e	; 0x117e <__vector_8>
      24:	2c c1       	rjmp	.+600    	; 0x27e <__bad_interrupt>
      26:	00 00       	nop
      28:	2a c1       	rjmp	.+596    	; 0x27e <__bad_interrupt>
      2a:	00 00       	nop
      2c:	28 c1       	rjmp	.+592    	; 0x27e <__bad_interrupt>
      2e:	00 00       	nop
      30:	26 c1       	rjmp	.+588    	; 0x27e <__bad_interrupt>
      32:	00 00       	nop
      34:	24 c1       	rjmp	.+584    	; 0x27e <__bad_interrupt>
      36:	00 00       	nop
      38:	22 c1       	rjmp	.+580    	; 0x27e <__bad_interrupt>
      3a:	00 00       	nop
      3c:	20 c1       	rjmp	.+576    	; 0x27e <__bad_interrupt>
      3e:	00 00       	nop
      40:	1e c1       	rjmp	.+572    	; 0x27e <__bad_interrupt>
      42:	00 00       	nop
      44:	38 c3       	rjmp	.+1648   	; 0x6b6 <__vector_17>
      46:	00 00       	nop
      48:	1a c1       	rjmp	.+564    	; 0x27e <__bad_interrupt>
      4a:	00 00       	nop
      4c:	18 c1       	rjmp	.+560    	; 0x27e <__bad_interrupt>
      4e:	00 00       	nop
      50:	16 c1       	rjmp	.+556    	; 0x27e <__bad_interrupt>
      52:	00 00       	nop
      54:	14 c1       	rjmp	.+552    	; 0x27e <__bad_interrupt>
      56:	00 00       	nop
      58:	12 c1       	rjmp	.+548    	; 0x27e <__bad_interrupt>
      5a:	00 00       	nop
      5c:	0c 94 ea 08 	jmp	0x11d4	; 0x11d4 <__vector_23>
      60:	0e c1       	rjmp	.+540    	; 0x27e <__bad_interrupt>
      62:	00 00       	nop
      64:	0c c1       	rjmp	.+536    	; 0x27e <__bad_interrupt>
      66:	00 00       	nop
      68:	0a c1       	rjmp	.+532    	; 0x27e <__bad_interrupt>
      6a:	00 00       	nop
      6c:	08 c1       	rjmp	.+528    	; 0x27e <__bad_interrupt>
      6e:	00 00       	nop
      70:	06 c1       	rjmp	.+524    	; 0x27e <__bad_interrupt>
      72:	00 00       	nop
      74:	04 c1       	rjmp	.+520    	; 0x27e <__bad_interrupt>
      76:	00 00       	nop
      78:	02 c1       	rjmp	.+516    	; 0x27e <__bad_interrupt>
      7a:	00 00       	nop
      7c:	00 c1       	rjmp	.+512    	; 0x27e <__bad_interrupt>
      7e:	00 00       	nop
      80:	51 c3       	rjmp	.+1698   	; 0x724 <__vector_32>
      82:	00 00       	nop
      84:	fc c0       	rjmp	.+504    	; 0x27e <__bad_interrupt>
      86:	00 00       	nop
      88:	fa c0       	rjmp	.+500    	; 0x27e <__bad_interrupt>
      8a:	00 00       	nop
      8c:	f8 c0       	rjmp	.+496    	; 0x27e <__bad_interrupt>
      8e:	00 00       	nop
      90:	f6 c0       	rjmp	.+492    	; 0x27e <__bad_interrupt>
      92:	00 00       	nop
      94:	f4 c0       	rjmp	.+488    	; 0x27e <__bad_interrupt>
      96:	00 00       	nop
      98:	f2 c0       	rjmp	.+484    	; 0x27e <__bad_interrupt>
      9a:	00 00       	nop
      9c:	f0 c0       	rjmp	.+480    	; 0x27e <__bad_interrupt>
      9e:	00 00       	nop
      a0:	ee c0       	rjmp	.+476    	; 0x27e <__bad_interrupt>
      a2:	00 00       	nop
      a4:	ec c0       	rjmp	.+472    	; 0x27e <__bad_interrupt>
      a6:	00 00       	nop
      a8:	74 c3       	rjmp	.+1768   	; 0x792 <__vector_42>
      aa:	00 00       	nop
      ac:	e8 c0       	rjmp	.+464    	; 0x27e <__bad_interrupt>
      ae:	00 00       	nop
      b0:	e6 c0       	rjmp	.+460    	; 0x27e <__bad_interrupt>
      b2:	00 00       	nop
      b4:	e4 c0       	rjmp	.+456    	; 0x27e <__bad_interrupt>
      b6:	00 00       	nop
      b8:	e2 c0       	rjmp	.+452    	; 0x27e <__bad_interrupt>
      ba:	00 00       	nop
      bc:	a1 c3       	rjmp	.+1858   	; 0x800 <__vector_47>
      be:	00 00       	nop
      c0:	de c0       	rjmp	.+444    	; 0x27e <__bad_interrupt>
      c2:	00 00       	nop
      c4:	dc c0       	rjmp	.+440    	; 0x27e <__bad_interrupt>
      c6:	00 00       	nop
      c8:	da c0       	rjmp	.+436    	; 0x27e <__bad_interrupt>
      ca:	00 00       	nop
      cc:	d8 c0       	rjmp	.+432    	; 0x27e <__bad_interrupt>
      ce:	00 00       	nop
      d0:	d6 c0       	rjmp	.+428    	; 0x27e <__bad_interrupt>
      d2:	00 00       	nop
      d4:	d4 c0       	rjmp	.+424    	; 0x27e <__bad_interrupt>
      d6:	00 00       	nop
      d8:	d2 c0       	rjmp	.+420    	; 0x27e <__bad_interrupt>
      da:	00 00       	nop
      dc:	d0 c0       	rjmp	.+416    	; 0x27e <__bad_interrupt>
      de:	00 00       	nop
      e0:	ce c0       	rjmp	.+412    	; 0x27e <__bad_interrupt>
      e2:	00 00       	nop
      e4:	6c 07       	cpc	r22, r28
      e6:	36 07       	cpc	r19, r22
      e8:	3e 07       	cpc	r19, r30
      ea:	4a 07       	cpc	r20, r26
      ec:	57 07       	cpc	r21, r23
      ee:	78 07       	cpc	r23, r24
      f0:	85 07       	cpc	r24, r21
      f2:	0e 0a       	sbc	r0, r30
      f4:	11 0a       	sbc	r1, r17
      f6:	00 0a       	sbc	r0, r16
      f8:	04 0a       	sbc	r0, r20
      fa:	0a 0a       	sbc	r0, r26
      fc:	48 0a       	sbc	r4, r24
      fe:	15 0a       	sbc	r1, r21
     100:	19 0a       	sbc	r1, r25
     102:	1f 0a       	sbc	r1, r31
     104:	23 0a       	sbc	r2, r19
     106:	27 0a       	sbc	r2, r23
     108:	2d 0a       	sbc	r2, r29
     10a:	31 0a       	sbc	r3, r17
     10c:	35 0a       	sbc	r3, r21
     10e:	48 0a       	sbc	r4, r24
     110:	3b 0a       	sbc	r3, r27
     112:	3f 0a       	sbc	r3, r31
     114:	43 0a       	sbc	r4, r19

00000116 <__trampolines_end>:
     116:	00 00       	nop
     118:	0a 0b       	sbc	r16, r26
     11a:	02 09       	sbc	r16, r2
     11c:	0c 0d       	add	r16, r12
     11e:	0e 08       	sbc	r0, r14
     120:	07 03       	mulsu	r16, r23
     122:	04 01       	movw	r0, r8
	...
     140:	00 00       	nop
     142:	12 11       	cpse	r17, r2
     144:	10 00       	.word	0x0010	; ????
	...

0000015c <digital_pin_to_bit_mask_PGM>:
     15c:	01 02 10 20 20 08 08 10 20 40 10 20 40 80 02 01     ...  ... @. @...
     16c:	02 01 08 04 02 01 01 02 04 08 10 20 40 80 80 40     ........... @..@
     17c:	20 10 08 04 02 01 80 04 02 01 80 40 20 10 08 04      ..........@ ...
     18c:	02 01 08 04 02 01 01 02 04 08 10 20 40 80 01 02     ........... @...
     19c:	04 08 10 20 40 80                                   ... @.

000001a2 <digital_pin_to_port_PGM>:
     1a2:	05 05 05 05 07 05 08 08 08 08 02 02 02 02 0a 0a     ................
     1b2:	08 08 04 04 04 04 01 01 01 01 01 01 01 01 03 03     ................
     1c2:	03 03 03 03 03 03 04 07 07 07 0c 0c 0c 0c 0c 0c     ................
     1d2:	0c 0c 02 02 02 02 06 06 06 06 06 06 06 06 0b 0b     ................
     1e2:	0b 0b 0b 0b 0b 0b                                   ......

000001e8 <port_to_output_PGM>:
     1e8:	00 00 22 00 25 00 28 00 2b 00 2e 00 31 00 34 00     ..".%.(.+...1.4.
     1f8:	02 01 00 00 05 01 08 01 0b 01                       ..........

00000202 <port_to_mode_PGM>:
     202:	00 00 21 00 24 00 27 00 2a 00 2d 00 30 00 33 00     ..!.$.'.*.-.0.3.
     212:	01 01 00 00 04 01 07 01 0a 01                       ..........

0000021c <__ctors_start>:
     21c:	d2 01       	movw	r26, r4

0000021e <__ctors_end>:
     21e:	11 24       	eor	r1, r1
     220:	1f be       	out	0x3f, r1	; 63
     222:	cf ef       	ldi	r28, 0xFF	; 255
     224:	d1 e2       	ldi	r29, 0x21	; 33
     226:	de bf       	out	0x3e, r29	; 62
     228:	cd bf       	out	0x3d, r28	; 61
     22a:	00 e0       	ldi	r16, 0x00	; 0
     22c:	0c bf       	out	0x3c, r16	; 60

0000022e <__do_copy_data>:
     22e:	12 e0       	ldi	r17, 0x02	; 2
     230:	a0 e0       	ldi	r26, 0x00	; 0
     232:	b2 e0       	ldi	r27, 0x02	; 2
     234:	e6 ec       	ldi	r30, 0xC6	; 198
     236:	f6 e1       	ldi	r31, 0x16	; 22
     238:	00 e0       	ldi	r16, 0x00	; 0
     23a:	0b bf       	out	0x3b, r16	; 59
     23c:	02 c0       	rjmp	.+4      	; 0x242 <__do_copy_data+0x14>
     23e:	07 90       	elpm	r0, Z+
     240:	0d 92       	st	X+, r0
     242:	a2 31       	cpi	r26, 0x12	; 18
     244:	b1 07       	cpc	r27, r17
     246:	d9 f7       	brne	.-10     	; 0x23e <__do_copy_data+0x10>

00000248 <__do_clear_bss>:
     248:	22 e0       	ldi	r18, 0x02	; 2
     24a:	a2 e1       	ldi	r26, 0x12	; 18
     24c:	b2 e0       	ldi	r27, 0x02	; 2
     24e:	01 c0       	rjmp	.+2      	; 0x252 <.do_clear_bss_start>

00000250 <.do_clear_bss_loop>:
     250:	1d 92       	st	X+, r1

00000252 <.do_clear_bss_start>:
     252:	a4 3b       	cpi	r26, 0xB4	; 180
     254:	b2 07       	cpc	r27, r18
     256:	e1 f7       	brne	.-8      	; 0x250 <.do_clear_bss_loop>

00000258 <__do_global_ctors>:
     258:	11 e0       	ldi	r17, 0x01	; 1
     25a:	cf e0       	ldi	r28, 0x0F	; 15
     25c:	d1 e0       	ldi	r29, 0x01	; 1
     25e:	00 e0       	ldi	r16, 0x00	; 0
     260:	06 c0       	rjmp	.+12     	; 0x26e <__do_global_ctors+0x16>
     262:	21 97       	sbiw	r28, 0x01	; 1
     264:	01 09       	sbc	r16, r1
     266:	80 2f       	mov	r24, r16
     268:	fe 01       	movw	r30, r28
     26a:	0e 94 40 0b 	call	0x1680	; 0x1680 <__tablejump2__>
     26e:	ce 30       	cpi	r28, 0x0E	; 14
     270:	d1 07       	cpc	r29, r17
     272:	80 e0       	ldi	r24, 0x00	; 0
     274:	08 07       	cpc	r16, r24
     276:	a9 f7       	brne	.-22     	; 0x262 <__do_global_ctors+0xa>
     278:	d6 d5       	rcall	.+2988   	; 0xe26 <main>
     27a:	0c 94 61 0b 	jmp	0x16c2	; 0x16c2 <_exit>

0000027e <__bad_interrupt>:
     27e:	c0 ce       	rjmp	.-640    	; 0x0 <__vectors>

00000280 <_Z13switchPressedv>:
int ledPin = 6;
const byte switchPin = 19;
volatile boolean state = LOW;


void switchPressed() {
     280:	cf 93       	push	r28
     282:	df 93       	push	r29
     284:	cd b7       	in	r28, 0x3d	; 61
     286:	de b7       	in	r29, 0x3e	; 62
	state = !state;
     288:	90 91 15 02 	lds	r25, 0x0215	; 0x800215 <state>
     28c:	81 e0       	ldi	r24, 0x01	; 1
     28e:	89 27       	eor	r24, r25
     290:	80 93 15 02 	sts	0x0215, r24	; 0x800215 <state>
	
	digitalWrite(ledPin, state);
     294:	80 91 15 02 	lds	r24, 0x0215	; 0x800215 <state>
     298:	28 2f       	mov	r18, r24
     29a:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <__DATA_REGION_ORIGIN__>
     29e:	90 91 01 02 	lds	r25, 0x0201	; 0x800201 <__DATA_REGION_ORIGIN__+0x1>
     2a2:	62 2f       	mov	r22, r18
     2a4:	0e 94 85 0a 	call	0x150a	; 0x150a <digitalWrite>
}
     2a8:	00 00       	nop
     2aa:	df 91       	pop	r29
     2ac:	cf 91       	pop	r28
     2ae:	08 95       	ret

000002b0 <setup>:

void setup(){
     2b0:	cf 93       	push	r28
     2b2:	df 93       	push	r29
     2b4:	cd b7       	in	r28, 0x3d	; 61
     2b6:	de b7       	in	r29, 0x3e	; 62
	pinMode(ledPin, OUTPUT);
     2b8:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <__DATA_REGION_ORIGIN__>
     2bc:	90 91 01 02 	lds	r25, 0x0201	; 0x800201 <__DATA_REGION_ORIGIN__+0x1>
     2c0:	61 e0       	ldi	r22, 0x01	; 1
     2c2:	0e 94 49 0a 	call	0x1492	; 0x1492 <pinMode>
	pinMode(switchPin, INPUT_PULLUP);
     2c6:	62 e0       	ldi	r22, 0x02	; 2
     2c8:	83 e1       	ldi	r24, 0x13	; 19
     2ca:	0e 94 49 0a 	call	0x1492	; 0x1492 <pinMode>
	attachInterrupt(digitalPinToInterrupt(switchPin), switchPressed, FALLING);
     2ce:	42 e0       	ldi	r20, 0x02	; 2
     2d0:	50 e0       	ldi	r21, 0x00	; 0
     2d2:	60 e4       	ldi	r22, 0x40	; 64
     2d4:	71 e0       	ldi	r23, 0x01	; 1
     2d6:	84 e0       	ldi	r24, 0x04	; 4
     2d8:	b2 d5       	rcall	.+2916   	; 0xe3e <attachInterrupt>
	
	myservo.attach(9);
     2da:	69 e0       	ldi	r22, 0x09	; 9
     2dc:	70 e0       	ldi	r23, 0x00	; 0
     2de:	82 e1       	ldi	r24, 0x12	; 18
     2e0:	92 e0       	ldi	r25, 0x02	; 2
     2e2:	af d3       	rcall	.+1886   	; 0xa42 <_ZN5Servo6attachEi>
}
     2e4:	00 00       	nop
     2e6:	df 91       	pop	r29
     2e8:	cf 91       	pop	r28
     2ea:	08 95       	ret

000002ec <loop>:

void loop(){	 
     2ec:	cf 93       	push	r28
     2ee:	df 93       	push	r29
     2f0:	00 d0       	rcall	.+0      	; 0x2f2 <loop+0x6>
     2f2:	1f 92       	push	r1
     2f4:	cd b7       	in	r28, 0x3d	; 61
     2f6:	de b7       	in	r29, 0x3e	; 62
	for (int i = 0; i < 180; i++)
     2f8:	1a 82       	std	Y+2, r1	; 0x02
     2fa:	19 82       	std	Y+1, r1	; 0x01
     2fc:	89 81       	ldd	r24, Y+1	; 0x01
     2fe:	9a 81       	ldd	r25, Y+2	; 0x02
     300:	84 3b       	cpi	r24, 0xB4	; 180
     302:	91 05       	cpc	r25, r1
     304:	8c f4       	brge	.+34     	; 0x328 <loop+0x3c>
	{
		myservo.write(i);
     306:	89 81       	ldd	r24, Y+1	; 0x01
     308:	9a 81       	ldd	r25, Y+2	; 0x02
     30a:	bc 01       	movw	r22, r24
     30c:	82 e1       	ldi	r24, 0x12	; 18
     30e:	92 e0       	ldi	r25, 0x02	; 2
     310:	42 d4       	rcall	.+2180   	; 0xb96 <_ZN5Servo5writeEi>
		delay(20);
     312:	64 e1       	ldi	r22, 0x14	; 20
     314:	70 e0       	ldi	r23, 0x00	; 0
     316:	80 e0       	ldi	r24, 0x00	; 0
     318:	90 e0       	ldi	r25, 0x00	; 0
     31a:	cb d7       	rcall	.+3990   	; 0x12b2 <delay>
	
	myservo.attach(9);
}

void loop(){	 
	for (int i = 0; i < 180; i++)
     31c:	89 81       	ldd	r24, Y+1	; 0x01
     31e:	9a 81       	ldd	r25, Y+2	; 0x02
     320:	01 96       	adiw	r24, 0x01	; 1
     322:	9a 83       	std	Y+2, r25	; 0x02
     324:	89 83       	std	Y+1, r24	; 0x01
     326:	ea cf       	rjmp	.-44     	; 0x2fc <loop+0x10>
	{
		myservo.write(i);
		delay(20);
	}
	
	for (int i = 179; i >= 0; i--)
     328:	83 eb       	ldi	r24, 0xB3	; 179
     32a:	90 e0       	ldi	r25, 0x00	; 0
     32c:	9c 83       	std	Y+4, r25	; 0x04
     32e:	8b 83       	std	Y+3, r24	; 0x03
     330:	8b 81       	ldd	r24, Y+3	; 0x03
     332:	9c 81       	ldd	r25, Y+4	; 0x04
     334:	99 23       	and	r25, r25
     336:	8c f0       	brlt	.+34     	; 0x35a <loop+0x6e>
	{
		myservo.write(i);
     338:	8b 81       	ldd	r24, Y+3	; 0x03
     33a:	9c 81       	ldd	r25, Y+4	; 0x04
     33c:	bc 01       	movw	r22, r24
     33e:	82 e1       	ldi	r24, 0x12	; 18
     340:	92 e0       	ldi	r25, 0x02	; 2
     342:	29 d4       	rcall	.+2130   	; 0xb96 <_ZN5Servo5writeEi>
		delay(20);
     344:	64 e1       	ldi	r22, 0x14	; 20
     346:	70 e0       	ldi	r23, 0x00	; 0
     348:	80 e0       	ldi	r24, 0x00	; 0
     34a:	90 e0       	ldi	r25, 0x00	; 0
     34c:	b2 d7       	rcall	.+3940   	; 0x12b2 <delay>
	{
		myservo.write(i);
		delay(20);
	}
	
	for (int i = 179; i >= 0; i--)
     34e:	8b 81       	ldd	r24, Y+3	; 0x03
     350:	9c 81       	ldd	r25, Y+4	; 0x04
     352:	01 97       	sbiw	r24, 0x01	; 1
     354:	9c 83       	std	Y+4, r25	; 0x04
     356:	8b 83       	std	Y+3, r24	; 0x03
     358:	eb cf       	rjmp	.-42     	; 0x330 <loop+0x44>
	
	//digitalWrite(LED_BUILTIN, HIGH);
	//delay(500);
	//digitalWrite(LED_BUILTIN, LOW);
	//delay(500);
     35a:	00 00       	nop
     35c:	0f 90       	pop	r0
     35e:	0f 90       	pop	r0
     360:	0f 90       	pop	r0
     362:	0f 90       	pop	r0
     364:	df 91       	pop	r29
     366:	cf 91       	pop	r28
     368:	08 95       	ret

0000036a <_Z41__static_initialization_and_destruction_0ii>:
     36a:	cf 93       	push	r28
     36c:	df 93       	push	r29
     36e:	00 d0       	rcall	.+0      	; 0x370 <_Z41__static_initialization_and_destruction_0ii+0x6>
     370:	1f 92       	push	r1
     372:	cd b7       	in	r28, 0x3d	; 61
     374:	de b7       	in	r29, 0x3e	; 62
     376:	9a 83       	std	Y+2, r25	; 0x02
     378:	89 83       	std	Y+1, r24	; 0x01
     37a:	7c 83       	std	Y+4, r23	; 0x04
     37c:	6b 83       	std	Y+3, r22	; 0x03
     37e:	89 81       	ldd	r24, Y+1	; 0x01
     380:	9a 81       	ldd	r25, Y+2	; 0x02
     382:	01 97       	sbiw	r24, 0x01	; 1
     384:	39 f4       	brne	.+14     	; 0x394 <_Z41__static_initialization_and_destruction_0ii+0x2a>
     386:	8b 81       	ldd	r24, Y+3	; 0x03
     388:	9c 81       	ldd	r25, Y+4	; 0x04
     38a:	01 96       	adiw	r24, 0x01	; 1
     38c:	19 f4       	brne	.+6      	; 0x394 <_Z41__static_initialization_and_destruction_0ii+0x2a>
#include <Arduino.h>
#include <Servo.h>

Servo myservo;
     38e:	82 e1       	ldi	r24, 0x12	; 18
     390:	92 e0       	ldi	r25, 0x02	; 2
     392:	23 d3       	rcall	.+1606   	; 0x9da <_ZN5ServoC1Ev>
	
	//digitalWrite(LED_BUILTIN, HIGH);
	//delay(500);
	//digitalWrite(LED_BUILTIN, LOW);
	//delay(500);
     394:	00 00       	nop
     396:	0f 90       	pop	r0
     398:	0f 90       	pop	r0
     39a:	0f 90       	pop	r0
     39c:	0f 90       	pop	r0
     39e:	df 91       	pop	r29
     3a0:	cf 91       	pop	r28
     3a2:	08 95       	ret

000003a4 <_GLOBAL__sub_I_myservo>:
     3a4:	cf 93       	push	r28
     3a6:	df 93       	push	r29
     3a8:	cd b7       	in	r28, 0x3d	; 61
     3aa:	de b7       	in	r29, 0x3e	; 62
     3ac:	6f ef       	ldi	r22, 0xFF	; 255
     3ae:	7f ef       	ldi	r23, 0xFF	; 255
     3b0:	81 e0       	ldi	r24, 0x01	; 1
     3b2:	90 e0       	ldi	r25, 0x00	; 0
     3b4:	da df       	rcall	.-76     	; 0x36a <_Z41__static_initialization_and_destruction_0ii>
     3b6:	df 91       	pop	r29
     3b8:	cf 91       	pop	r28
     3ba:	08 95       	ret

000003bc <_ZL17handle_interrupts18timer16_Sequence_tPVjS1_>:
  servos[this->servoIndex].Pin.isActive = false;
  timer16_Sequence_t timer = SERVO_INDEX_TO_TIMER(servoIndex);
  if(isTimerActive(timer) == false) {
    finISR(timer);
  }
}
     3bc:	cf 93       	push	r28
     3be:	df 93       	push	r29
     3c0:	00 d0       	rcall	.+0      	; 0x3c2 <_ZL17handle_interrupts18timer16_Sequence_tPVjS1_+0x6>
     3c2:	1f 92       	push	r1
     3c4:	1f 92       	push	r1
     3c6:	cd b7       	in	r28, 0x3d	; 61
     3c8:	de b7       	in	r29, 0x3e	; 62
     3ca:	89 83       	std	Y+1, r24	; 0x01
     3cc:	7b 83       	std	Y+3, r23	; 0x03
     3ce:	6a 83       	std	Y+2, r22	; 0x02
     3d0:	5d 83       	std	Y+5, r21	; 0x05
     3d2:	4c 83       	std	Y+4, r20	; 0x04
     3d4:	89 81       	ldd	r24, Y+1	; 0x01
     3d6:	88 2f       	mov	r24, r24
     3d8:	90 e0       	ldi	r25, 0x00	; 0
     3da:	8a 55       	subi	r24, 0x5A	; 90
     3dc:	9d 4f       	sbci	r25, 0xFD	; 253
     3de:	fc 01       	movw	r30, r24
     3e0:	80 81       	ld	r24, Z
     3e2:	88 1f       	adc	r24, r24
     3e4:	88 27       	eor	r24, r24
     3e6:	88 1f       	adc	r24, r24
     3e8:	88 23       	and	r24, r24
     3ea:	31 f0       	breq	.+12     	; 0x3f8 <_ZL17handle_interrupts18timer16_Sequence_tPVjS1_+0x3c>
     3ec:	8a 81       	ldd	r24, Y+2	; 0x02
     3ee:	9b 81       	ldd	r25, Y+3	; 0x03
     3f0:	fc 01       	movw	r30, r24
     3f2:	11 82       	std	Z+1, r1	; 0x01
     3f4:	10 82       	st	Z, r1
     3f6:	72 c0       	rjmp	.+228    	; 0x4dc <__LOCK_REGION_LENGTH__+0xdc>
     3f8:	89 81       	ldd	r24, Y+1	; 0x01
     3fa:	28 2f       	mov	r18, r24
     3fc:	30 e0       	ldi	r19, 0x00	; 0
     3fe:	c9 01       	movw	r24, r18
     400:	88 0f       	add	r24, r24
     402:	99 1f       	adc	r25, r25
     404:	82 0f       	add	r24, r18
     406:	93 1f       	adc	r25, r19
     408:	88 0f       	add	r24, r24
     40a:	99 1f       	adc	r25, r25
     40c:	88 0f       	add	r24, r24
     40e:	99 1f       	adc	r25, r25
     410:	9c 01       	movw	r18, r24
     412:	89 81       	ldd	r24, Y+1	; 0x01
     414:	88 2f       	mov	r24, r24
     416:	90 e0       	ldi	r25, 0x00	; 0
     418:	8a 55       	subi	r24, 0x5A	; 90
     41a:	9d 4f       	sbci	r25, 0xFD	; 253
     41c:	fc 01       	movw	r30, r24
     41e:	80 81       	ld	r24, Z
     420:	08 2e       	mov	r0, r24
     422:	00 0c       	add	r0, r0
     424:	99 0b       	sbc	r25, r25
     426:	28 0f       	add	r18, r24
     428:	39 1f       	adc	r19, r25
     42a:	80 91 aa 02 	lds	r24, 0x02AA	; 0x8002aa <ServoCount>
     42e:	88 2f       	mov	r24, r24
     430:	90 e0       	ldi	r25, 0x00	; 0
     432:	28 17       	cp	r18, r24
     434:	39 07       	cpc	r19, r25
     436:	4c f5       	brge	.+82     	; 0x48a <__LOCK_REGION_LENGTH__+0x8a>
     438:	89 81       	ldd	r24, Y+1	; 0x01
     43a:	28 2f       	mov	r18, r24
     43c:	30 e0       	ldi	r19, 0x00	; 0
     43e:	c9 01       	movw	r24, r18
     440:	88 0f       	add	r24, r24
     442:	99 1f       	adc	r25, r25
     444:	82 0f       	add	r24, r18
     446:	93 1f       	adc	r25, r19
     448:	88 0f       	add	r24, r24
     44a:	99 1f       	adc	r25, r25
     44c:	88 0f       	add	r24, r24
     44e:	99 1f       	adc	r25, r25
     450:	9c 01       	movw	r18, r24
     452:	89 81       	ldd	r24, Y+1	; 0x01
     454:	88 2f       	mov	r24, r24
     456:	90 e0       	ldi	r25, 0x00	; 0
     458:	8a 55       	subi	r24, 0x5A	; 90
     45a:	9d 4f       	sbci	r25, 0xFD	; 253
     45c:	fc 01       	movw	r30, r24
     45e:	80 81       	ld	r24, Z
     460:	08 2e       	mov	r0, r24
     462:	00 0c       	add	r0, r0
     464:	99 0b       	sbc	r25, r25
     466:	28 0f       	add	r18, r24
     468:	39 1f       	adc	r19, r25
     46a:	c9 01       	movw	r24, r18
     46c:	88 0f       	add	r24, r24
     46e:	99 1f       	adc	r25, r25
     470:	82 0f       	add	r24, r18
     472:	93 1f       	adc	r25, r19
     474:	8a 5e       	subi	r24, 0xEA	; 234
     476:	9d 4f       	sbci	r25, 0xFD	; 253
     478:	fc 01       	movw	r30, r24
     47a:	80 81       	ld	r24, Z
     47c:	86 fb       	bst	r24, 6
     47e:	88 27       	eor	r24, r24
     480:	80 f9       	bld	r24, 0
     482:	81 30       	cpi	r24, 0x01	; 1
     484:	11 f4       	brne	.+4      	; 0x48a <__LOCK_REGION_LENGTH__+0x8a>
     486:	81 e0       	ldi	r24, 0x01	; 1
     488:	01 c0       	rjmp	.+2      	; 0x48c <__LOCK_REGION_LENGTH__+0x8c>
     48a:	80 e0       	ldi	r24, 0x00	; 0
     48c:	88 23       	and	r24, r24
     48e:	31 f1       	breq	.+76     	; 0x4dc <__LOCK_REGION_LENGTH__+0xdc>
     490:	89 81       	ldd	r24, Y+1	; 0x01
     492:	28 2f       	mov	r18, r24
     494:	30 e0       	ldi	r19, 0x00	; 0
     496:	c9 01       	movw	r24, r18
     498:	88 0f       	add	r24, r24
     49a:	99 1f       	adc	r25, r25
     49c:	82 0f       	add	r24, r18
     49e:	93 1f       	adc	r25, r19
     4a0:	88 0f       	add	r24, r24
     4a2:	99 1f       	adc	r25, r25
     4a4:	88 0f       	add	r24, r24
     4a6:	99 1f       	adc	r25, r25
     4a8:	9c 01       	movw	r18, r24
     4aa:	89 81       	ldd	r24, Y+1	; 0x01
     4ac:	88 2f       	mov	r24, r24
     4ae:	90 e0       	ldi	r25, 0x00	; 0
     4b0:	8a 55       	subi	r24, 0x5A	; 90
     4b2:	9d 4f       	sbci	r25, 0xFD	; 253
     4b4:	fc 01       	movw	r30, r24
     4b6:	80 81       	ld	r24, Z
     4b8:	08 2e       	mov	r0, r24
     4ba:	00 0c       	add	r0, r0
     4bc:	99 0b       	sbc	r25, r25
     4be:	28 0f       	add	r18, r24
     4c0:	39 1f       	adc	r19, r25
     4c2:	c9 01       	movw	r24, r18
     4c4:	88 0f       	add	r24, r24
     4c6:	99 1f       	adc	r25, r25
     4c8:	82 0f       	add	r24, r18
     4ca:	93 1f       	adc	r25, r19
     4cc:	8a 5e       	subi	r24, 0xEA	; 234
     4ce:	9d 4f       	sbci	r25, 0xFD	; 253
     4d0:	fc 01       	movw	r30, r24
     4d2:	80 81       	ld	r24, Z
     4d4:	8f 73       	andi	r24, 0x3F	; 63
     4d6:	60 e0       	ldi	r22, 0x00	; 0
     4d8:	0e 94 85 0a 	call	0x150a	; 0x150a <digitalWrite>
     4dc:	89 81       	ldd	r24, Y+1	; 0x01
     4de:	88 2f       	mov	r24, r24
     4e0:	90 e0       	ldi	r25, 0x00	; 0
     4e2:	9c 01       	movw	r18, r24
     4e4:	2a 55       	subi	r18, 0x5A	; 90
     4e6:	3d 4f       	sbci	r19, 0xFD	; 253
     4e8:	f9 01       	movw	r30, r18
     4ea:	20 81       	ld	r18, Z
     4ec:	2f 5f       	subi	r18, 0xFF	; 255
     4ee:	8a 55       	subi	r24, 0x5A	; 90
     4f0:	9d 4f       	sbci	r25, 0xFD	; 253
     4f2:	fc 01       	movw	r30, r24
     4f4:	20 83       	st	Z, r18
     4f6:	89 81       	ldd	r24, Y+1	; 0x01
     4f8:	28 2f       	mov	r18, r24
     4fa:	30 e0       	ldi	r19, 0x00	; 0
     4fc:	c9 01       	movw	r24, r18
     4fe:	88 0f       	add	r24, r24
     500:	99 1f       	adc	r25, r25
     502:	82 0f       	add	r24, r18
     504:	93 1f       	adc	r25, r19
     506:	88 0f       	add	r24, r24
     508:	99 1f       	adc	r25, r25
     50a:	88 0f       	add	r24, r24
     50c:	99 1f       	adc	r25, r25
     50e:	9c 01       	movw	r18, r24
     510:	89 81       	ldd	r24, Y+1	; 0x01
     512:	88 2f       	mov	r24, r24
     514:	90 e0       	ldi	r25, 0x00	; 0
     516:	8a 55       	subi	r24, 0x5A	; 90
     518:	9d 4f       	sbci	r25, 0xFD	; 253
     51a:	fc 01       	movw	r30, r24
     51c:	80 81       	ld	r24, Z
     51e:	08 2e       	mov	r0, r24
     520:	00 0c       	add	r0, r0
     522:	99 0b       	sbc	r25, r25
     524:	28 0f       	add	r18, r24
     526:	39 1f       	adc	r19, r25
     528:	80 91 aa 02 	lds	r24, 0x02AA	; 0x8002aa <ServoCount>
     52c:	88 2f       	mov	r24, r24
     52e:	90 e0       	ldi	r25, 0x00	; 0
     530:	28 17       	cp	r18, r24
     532:	39 07       	cpc	r19, r25
     534:	5c f4       	brge	.+22     	; 0x54c <__LOCK_REGION_LENGTH__+0x14c>
     536:	89 81       	ldd	r24, Y+1	; 0x01
     538:	88 2f       	mov	r24, r24
     53a:	90 e0       	ldi	r25, 0x00	; 0
     53c:	8a 55       	subi	r24, 0x5A	; 90
     53e:	9d 4f       	sbci	r25, 0xFD	; 253
     540:	fc 01       	movw	r30, r24
     542:	80 81       	ld	r24, Z
     544:	8c 30       	cpi	r24, 0x0C	; 12
     546:	14 f4       	brge	.+4      	; 0x54c <__LOCK_REGION_LENGTH__+0x14c>
     548:	81 e0       	ldi	r24, 0x01	; 1
     54a:	01 c0       	rjmp	.+2      	; 0x54e <__LOCK_REGION_LENGTH__+0x14e>
     54c:	80 e0       	ldi	r24, 0x00	; 0
     54e:	88 23       	and	r24, r24
     550:	09 f4       	brne	.+2      	; 0x554 <__LOCK_REGION_LENGTH__+0x154>
     552:	7e c0       	rjmp	.+252    	; 0x650 <__LOCK_REGION_LENGTH__+0x250>
     554:	8a 81       	ldd	r24, Y+2	; 0x02
     556:	9b 81       	ldd	r25, Y+3	; 0x03
     558:	fc 01       	movw	r30, r24
     55a:	40 81       	ld	r20, Z
     55c:	51 81       	ldd	r21, Z+1	; 0x01
     55e:	89 81       	ldd	r24, Y+1	; 0x01
     560:	28 2f       	mov	r18, r24
     562:	30 e0       	ldi	r19, 0x00	; 0
     564:	c9 01       	movw	r24, r18
     566:	88 0f       	add	r24, r24
     568:	99 1f       	adc	r25, r25
     56a:	82 0f       	add	r24, r18
     56c:	93 1f       	adc	r25, r19
     56e:	88 0f       	add	r24, r24
     570:	99 1f       	adc	r25, r25
     572:	88 0f       	add	r24, r24
     574:	99 1f       	adc	r25, r25
     576:	9c 01       	movw	r18, r24
     578:	89 81       	ldd	r24, Y+1	; 0x01
     57a:	88 2f       	mov	r24, r24
     57c:	90 e0       	ldi	r25, 0x00	; 0
     57e:	8a 55       	subi	r24, 0x5A	; 90
     580:	9d 4f       	sbci	r25, 0xFD	; 253
     582:	fc 01       	movw	r30, r24
     584:	80 81       	ld	r24, Z
     586:	08 2e       	mov	r0, r24
     588:	00 0c       	add	r0, r0
     58a:	99 0b       	sbc	r25, r25
     58c:	28 0f       	add	r18, r24
     58e:	39 1f       	adc	r19, r25
     590:	c9 01       	movw	r24, r18
     592:	88 0f       	add	r24, r24
     594:	99 1f       	adc	r25, r25
     596:	82 0f       	add	r24, r18
     598:	93 1f       	adc	r25, r19
     59a:	89 5e       	subi	r24, 0xE9	; 233
     59c:	9d 4f       	sbci	r25, 0xFD	; 253
     59e:	fc 01       	movw	r30, r24
     5a0:	80 81       	ld	r24, Z
     5a2:	91 81       	ldd	r25, Z+1	; 0x01
     5a4:	9a 01       	movw	r18, r20
     5a6:	28 0f       	add	r18, r24
     5a8:	39 1f       	adc	r19, r25
     5aa:	8c 81       	ldd	r24, Y+4	; 0x04
     5ac:	9d 81       	ldd	r25, Y+5	; 0x05
     5ae:	fc 01       	movw	r30, r24
     5b0:	31 83       	std	Z+1, r19	; 0x01
     5b2:	20 83       	st	Z, r18
     5b4:	89 81       	ldd	r24, Y+1	; 0x01
     5b6:	28 2f       	mov	r18, r24
     5b8:	30 e0       	ldi	r19, 0x00	; 0
     5ba:	c9 01       	movw	r24, r18
     5bc:	88 0f       	add	r24, r24
     5be:	99 1f       	adc	r25, r25
     5c0:	82 0f       	add	r24, r18
     5c2:	93 1f       	adc	r25, r19
     5c4:	88 0f       	add	r24, r24
     5c6:	99 1f       	adc	r25, r25
     5c8:	88 0f       	add	r24, r24
     5ca:	99 1f       	adc	r25, r25
     5cc:	9c 01       	movw	r18, r24
     5ce:	89 81       	ldd	r24, Y+1	; 0x01
     5d0:	88 2f       	mov	r24, r24
     5d2:	90 e0       	ldi	r25, 0x00	; 0
     5d4:	8a 55       	subi	r24, 0x5A	; 90
     5d6:	9d 4f       	sbci	r25, 0xFD	; 253
     5d8:	fc 01       	movw	r30, r24
     5da:	80 81       	ld	r24, Z
     5dc:	08 2e       	mov	r0, r24
     5de:	00 0c       	add	r0, r0
     5e0:	99 0b       	sbc	r25, r25
     5e2:	28 0f       	add	r18, r24
     5e4:	39 1f       	adc	r19, r25
     5e6:	c9 01       	movw	r24, r18
     5e8:	88 0f       	add	r24, r24
     5ea:	99 1f       	adc	r25, r25
     5ec:	82 0f       	add	r24, r18
     5ee:	93 1f       	adc	r25, r19
     5f0:	8a 5e       	subi	r24, 0xEA	; 234
     5f2:	9d 4f       	sbci	r25, 0xFD	; 253
     5f4:	fc 01       	movw	r30, r24
     5f6:	80 81       	ld	r24, Z
     5f8:	86 fb       	bst	r24, 6
     5fa:	88 27       	eor	r24, r24
     5fc:	80 f9       	bld	r24, 0
     5fe:	88 23       	and	r24, r24
     600:	09 f4       	brne	.+2      	; 0x604 <__LOCK_REGION_LENGTH__+0x204>
     602:	50 c0       	rjmp	.+160    	; 0x6a4 <__LOCK_REGION_LENGTH__+0x2a4>
     604:	89 81       	ldd	r24, Y+1	; 0x01
     606:	28 2f       	mov	r18, r24
     608:	30 e0       	ldi	r19, 0x00	; 0
     60a:	c9 01       	movw	r24, r18
     60c:	88 0f       	add	r24, r24
     60e:	99 1f       	adc	r25, r25
     610:	82 0f       	add	r24, r18
     612:	93 1f       	adc	r25, r19
     614:	88 0f       	add	r24, r24
     616:	99 1f       	adc	r25, r25
     618:	88 0f       	add	r24, r24
     61a:	99 1f       	adc	r25, r25
     61c:	9c 01       	movw	r18, r24
     61e:	89 81       	ldd	r24, Y+1	; 0x01
     620:	88 2f       	mov	r24, r24
     622:	90 e0       	ldi	r25, 0x00	; 0
     624:	8a 55       	subi	r24, 0x5A	; 90
     626:	9d 4f       	sbci	r25, 0xFD	; 253
     628:	fc 01       	movw	r30, r24
     62a:	80 81       	ld	r24, Z
     62c:	08 2e       	mov	r0, r24
     62e:	00 0c       	add	r0, r0
     630:	99 0b       	sbc	r25, r25
     632:	28 0f       	add	r18, r24
     634:	39 1f       	adc	r19, r25
     636:	c9 01       	movw	r24, r18
     638:	88 0f       	add	r24, r24
     63a:	99 1f       	adc	r25, r25
     63c:	82 0f       	add	r24, r18
     63e:	93 1f       	adc	r25, r19
     640:	8a 5e       	subi	r24, 0xEA	; 234
     642:	9d 4f       	sbci	r25, 0xFD	; 253
     644:	fc 01       	movw	r30, r24
     646:	80 81       	ld	r24, Z
     648:	8f 73       	andi	r24, 0x3F	; 63
     64a:	61 e0       	ldi	r22, 0x01	; 1
     64c:	5e d7       	rcall	.+3772   	; 0x150a <digitalWrite>
     64e:	2a c0       	rjmp	.+84     	; 0x6a4 <__LOCK_REGION_LENGTH__+0x2a4>
     650:	8a 81       	ldd	r24, Y+2	; 0x02
     652:	9b 81       	ldd	r25, Y+3	; 0x03
     654:	fc 01       	movw	r30, r24
     656:	80 81       	ld	r24, Z
     658:	91 81       	ldd	r25, Z+1	; 0x01
     65a:	04 96       	adiw	r24, 0x04	; 4
     65c:	21 e0       	ldi	r18, 0x01	; 1
     65e:	80 34       	cpi	r24, 0x40	; 64
     660:	9c 49       	sbci	r25, 0x9C	; 156
     662:	08 f0       	brcs	.+2      	; 0x666 <__LOCK_REGION_LENGTH__+0x266>
     664:	20 e0       	ldi	r18, 0x00	; 0
     666:	22 23       	and	r18, r18
     668:	41 f0       	breq	.+16     	; 0x67a <__LOCK_REGION_LENGTH__+0x27a>
     66a:	8c 81       	ldd	r24, Y+4	; 0x04
     66c:	9d 81       	ldd	r25, Y+5	; 0x05
     66e:	20 e4       	ldi	r18, 0x40	; 64
     670:	3c e9       	ldi	r19, 0x9C	; 156
     672:	fc 01       	movw	r30, r24
     674:	31 83       	std	Z+1, r19	; 0x01
     676:	20 83       	st	Z, r18
     678:	0d c0       	rjmp	.+26     	; 0x694 <__LOCK_REGION_LENGTH__+0x294>
     67a:	8a 81       	ldd	r24, Y+2	; 0x02
     67c:	9b 81       	ldd	r25, Y+3	; 0x03
     67e:	fc 01       	movw	r30, r24
     680:	80 81       	ld	r24, Z
     682:	91 81       	ldd	r25, Z+1	; 0x01
     684:	9c 01       	movw	r18, r24
     686:	2c 5f       	subi	r18, 0xFC	; 252
     688:	3f 4f       	sbci	r19, 0xFF	; 255
     68a:	8c 81       	ldd	r24, Y+4	; 0x04
     68c:	9d 81       	ldd	r25, Y+5	; 0x05
     68e:	fc 01       	movw	r30, r24
     690:	31 83       	std	Z+1, r19	; 0x01
     692:	20 83       	st	Z, r18
     694:	89 81       	ldd	r24, Y+1	; 0x01
     696:	88 2f       	mov	r24, r24
     698:	90 e0       	ldi	r25, 0x00	; 0
     69a:	8a 55       	subi	r24, 0x5A	; 90
     69c:	9d 4f       	sbci	r25, 0xFD	; 253
     69e:	2f ef       	ldi	r18, 0xFF	; 255
     6a0:	fc 01       	movw	r30, r24
     6a2:	20 83       	st	Z, r18
     6a4:	00 00       	nop
     6a6:	0f 90       	pop	r0
     6a8:	0f 90       	pop	r0
     6aa:	0f 90       	pop	r0
     6ac:	0f 90       	pop	r0
     6ae:	0f 90       	pop	r0
     6b0:	df 91       	pop	r29
     6b2:	cf 91       	pop	r28
     6b4:	08 95       	ret

000006b6 <__vector_17>:
     6b6:	1f 92       	push	r1
     6b8:	0f 92       	push	r0
     6ba:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7c005f>
     6be:	0f 92       	push	r0
     6c0:	11 24       	eor	r1, r1
     6c2:	00 90 5b 00 	lds	r0, 0x005B	; 0x80005b <__TEXT_REGION_LENGTH__+0x7c005b>
     6c6:	0f 92       	push	r0
     6c8:	2f 93       	push	r18
     6ca:	3f 93       	push	r19
     6cc:	4f 93       	push	r20
     6ce:	5f 93       	push	r21
     6d0:	6f 93       	push	r22
     6d2:	7f 93       	push	r23
     6d4:	8f 93       	push	r24
     6d6:	9f 93       	push	r25
     6d8:	af 93       	push	r26
     6da:	bf 93       	push	r27
     6dc:	ef 93       	push	r30
     6de:	ff 93       	push	r31
     6e0:	cf 93       	push	r28
     6e2:	df 93       	push	r29
     6e4:	cd b7       	in	r28, 0x3d	; 61
     6e6:	de b7       	in	r29, 0x3e	; 62
     6e8:	48 e8       	ldi	r20, 0x88	; 136
     6ea:	50 e0       	ldi	r21, 0x00	; 0
     6ec:	64 e8       	ldi	r22, 0x84	; 132
     6ee:	70 e0       	ldi	r23, 0x00	; 0
     6f0:	81 e0       	ldi	r24, 0x01	; 1
     6f2:	64 de       	rcall	.-824    	; 0x3bc <_ZL17handle_interrupts18timer16_Sequence_tPVjS1_>
     6f4:	00 00       	nop
     6f6:	df 91       	pop	r29
     6f8:	cf 91       	pop	r28
     6fa:	ff 91       	pop	r31
     6fc:	ef 91       	pop	r30
     6fe:	bf 91       	pop	r27
     700:	af 91       	pop	r26
     702:	9f 91       	pop	r25
     704:	8f 91       	pop	r24
     706:	7f 91       	pop	r23
     708:	6f 91       	pop	r22
     70a:	5f 91       	pop	r21
     70c:	4f 91       	pop	r20
     70e:	3f 91       	pop	r19
     710:	2f 91       	pop	r18
     712:	0f 90       	pop	r0
     714:	00 92 5b 00 	sts	0x005B, r0	; 0x80005b <__TEXT_REGION_LENGTH__+0x7c005b>
     718:	0f 90       	pop	r0
     71a:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7c005f>
     71e:	0f 90       	pop	r0
     720:	1f 90       	pop	r1
     722:	18 95       	reti

00000724 <__vector_32>:
     724:	1f 92       	push	r1
     726:	0f 92       	push	r0
     728:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7c005f>
     72c:	0f 92       	push	r0
     72e:	11 24       	eor	r1, r1
     730:	00 90 5b 00 	lds	r0, 0x005B	; 0x80005b <__TEXT_REGION_LENGTH__+0x7c005b>
     734:	0f 92       	push	r0
     736:	2f 93       	push	r18
     738:	3f 93       	push	r19
     73a:	4f 93       	push	r20
     73c:	5f 93       	push	r21
     73e:	6f 93       	push	r22
     740:	7f 93       	push	r23
     742:	8f 93       	push	r24
     744:	9f 93       	push	r25
     746:	af 93       	push	r26
     748:	bf 93       	push	r27
     74a:	ef 93       	push	r30
     74c:	ff 93       	push	r31
     74e:	cf 93       	push	r28
     750:	df 93       	push	r29
     752:	cd b7       	in	r28, 0x3d	; 61
     754:	de b7       	in	r29, 0x3e	; 62
     756:	48 e9       	ldi	r20, 0x98	; 152
     758:	50 e0       	ldi	r21, 0x00	; 0
     75a:	64 e9       	ldi	r22, 0x94	; 148
     75c:	70 e0       	ldi	r23, 0x00	; 0
     75e:	82 e0       	ldi	r24, 0x02	; 2
     760:	2d de       	rcall	.-934    	; 0x3bc <_ZL17handle_interrupts18timer16_Sequence_tPVjS1_>
     762:	00 00       	nop
     764:	df 91       	pop	r29
     766:	cf 91       	pop	r28
     768:	ff 91       	pop	r31
     76a:	ef 91       	pop	r30
     76c:	bf 91       	pop	r27
     76e:	af 91       	pop	r26
     770:	9f 91       	pop	r25
     772:	8f 91       	pop	r24
     774:	7f 91       	pop	r23
     776:	6f 91       	pop	r22
     778:	5f 91       	pop	r21
     77a:	4f 91       	pop	r20
     77c:	3f 91       	pop	r19
     77e:	2f 91       	pop	r18
     780:	0f 90       	pop	r0
     782:	00 92 5b 00 	sts	0x005B, r0	; 0x80005b <__TEXT_REGION_LENGTH__+0x7c005b>
     786:	0f 90       	pop	r0
     788:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7c005f>
     78c:	0f 90       	pop	r0
     78e:	1f 90       	pop	r1
     790:	18 95       	reti

00000792 <__vector_42>:
     792:	1f 92       	push	r1
     794:	0f 92       	push	r0
     796:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7c005f>
     79a:	0f 92       	push	r0
     79c:	11 24       	eor	r1, r1
     79e:	00 90 5b 00 	lds	r0, 0x005B	; 0x80005b <__TEXT_REGION_LENGTH__+0x7c005b>
     7a2:	0f 92       	push	r0
     7a4:	2f 93       	push	r18
     7a6:	3f 93       	push	r19
     7a8:	4f 93       	push	r20
     7aa:	5f 93       	push	r21
     7ac:	6f 93       	push	r22
     7ae:	7f 93       	push	r23
     7b0:	8f 93       	push	r24
     7b2:	9f 93       	push	r25
     7b4:	af 93       	push	r26
     7b6:	bf 93       	push	r27
     7b8:	ef 93       	push	r30
     7ba:	ff 93       	push	r31
     7bc:	cf 93       	push	r28
     7be:	df 93       	push	r29
     7c0:	cd b7       	in	r28, 0x3d	; 61
     7c2:	de b7       	in	r29, 0x3e	; 62
     7c4:	48 ea       	ldi	r20, 0xA8	; 168
     7c6:	50 e0       	ldi	r21, 0x00	; 0
     7c8:	64 ea       	ldi	r22, 0xA4	; 164
     7ca:	70 e0       	ldi	r23, 0x00	; 0
     7cc:	83 e0       	ldi	r24, 0x03	; 3
     7ce:	f6 dd       	rcall	.-1044   	; 0x3bc <_ZL17handle_interrupts18timer16_Sequence_tPVjS1_>
     7d0:	00 00       	nop
     7d2:	df 91       	pop	r29
     7d4:	cf 91       	pop	r28
     7d6:	ff 91       	pop	r31
     7d8:	ef 91       	pop	r30
     7da:	bf 91       	pop	r27
     7dc:	af 91       	pop	r26
     7de:	9f 91       	pop	r25
     7e0:	8f 91       	pop	r24
     7e2:	7f 91       	pop	r23
     7e4:	6f 91       	pop	r22
     7e6:	5f 91       	pop	r21
     7e8:	4f 91       	pop	r20
     7ea:	3f 91       	pop	r19
     7ec:	2f 91       	pop	r18
     7ee:	0f 90       	pop	r0
     7f0:	00 92 5b 00 	sts	0x005B, r0	; 0x80005b <__TEXT_REGION_LENGTH__+0x7c005b>
     7f4:	0f 90       	pop	r0
     7f6:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7c005f>
     7fa:	0f 90       	pop	r0
     7fc:	1f 90       	pop	r1
     7fe:	18 95       	reti

00000800 <__vector_47>:
     800:	1f 92       	push	r1
     802:	0f 92       	push	r0
     804:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7c005f>
     808:	0f 92       	push	r0
     80a:	11 24       	eor	r1, r1
     80c:	00 90 5b 00 	lds	r0, 0x005B	; 0x80005b <__TEXT_REGION_LENGTH__+0x7c005b>
     810:	0f 92       	push	r0
     812:	2f 93       	push	r18
     814:	3f 93       	push	r19
     816:	4f 93       	push	r20
     818:	5f 93       	push	r21
     81a:	6f 93       	push	r22
     81c:	7f 93       	push	r23
     81e:	8f 93       	push	r24
     820:	9f 93       	push	r25
     822:	af 93       	push	r26
     824:	bf 93       	push	r27
     826:	ef 93       	push	r30
     828:	ff 93       	push	r31
     82a:	cf 93       	push	r28
     82c:	df 93       	push	r29
     82e:	cd b7       	in	r28, 0x3d	; 61
     830:	de b7       	in	r29, 0x3e	; 62
     832:	48 e2       	ldi	r20, 0x28	; 40
     834:	51 e0       	ldi	r21, 0x01	; 1
     836:	64 e2       	ldi	r22, 0x24	; 36
     838:	71 e0       	ldi	r23, 0x01	; 1
     83a:	80 e0       	ldi	r24, 0x00	; 0
     83c:	bf dd       	rcall	.-1154   	; 0x3bc <_ZL17handle_interrupts18timer16_Sequence_tPVjS1_>
     83e:	00 00       	nop
     840:	df 91       	pop	r29
     842:	cf 91       	pop	r28
     844:	ff 91       	pop	r31
     846:	ef 91       	pop	r30
     848:	bf 91       	pop	r27
     84a:	af 91       	pop	r26
     84c:	9f 91       	pop	r25
     84e:	8f 91       	pop	r24
     850:	7f 91       	pop	r23
     852:	6f 91       	pop	r22
     854:	5f 91       	pop	r21
     856:	4f 91       	pop	r20
     858:	3f 91       	pop	r19
     85a:	2f 91       	pop	r18
     85c:	0f 90       	pop	r0
     85e:	00 92 5b 00 	sts	0x005B, r0	; 0x80005b <__TEXT_REGION_LENGTH__+0x7c005b>
     862:	0f 90       	pop	r0
     864:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7c005f>
     868:	0f 90       	pop	r0
     86a:	1f 90       	pop	r1
     86c:	18 95       	reti

0000086e <_ZL7initISR18timer16_Sequence_t>:
     86e:	cf 93       	push	r28
     870:	df 93       	push	r29
     872:	1f 92       	push	r1
     874:	cd b7       	in	r28, 0x3d	; 61
     876:	de b7       	in	r29, 0x3e	; 62
     878:	89 83       	std	Y+1, r24	; 0x01
     87a:	89 81       	ldd	r24, Y+1	; 0x01
     87c:	81 30       	cpi	r24, 0x01	; 1
     87e:	01 f5       	brne	.+64     	; 0x8c0 <_ZL7initISR18timer16_Sequence_t+0x52>
     880:	80 e8       	ldi	r24, 0x80	; 128
     882:	90 e0       	ldi	r25, 0x00	; 0
     884:	fc 01       	movw	r30, r24
     886:	10 82       	st	Z, r1
     888:	81 e8       	ldi	r24, 0x81	; 129
     88a:	90 e0       	ldi	r25, 0x00	; 0
     88c:	22 e0       	ldi	r18, 0x02	; 2
     88e:	fc 01       	movw	r30, r24
     890:	20 83       	st	Z, r18
     892:	84 e8       	ldi	r24, 0x84	; 132
     894:	90 e0       	ldi	r25, 0x00	; 0
     896:	fc 01       	movw	r30, r24
     898:	11 82       	std	Z+1, r1	; 0x01
     89a:	10 82       	st	Z, r1
     89c:	86 e3       	ldi	r24, 0x36	; 54
     89e:	90 e0       	ldi	r25, 0x00	; 0
     8a0:	26 e3       	ldi	r18, 0x36	; 54
     8a2:	30 e0       	ldi	r19, 0x00	; 0
     8a4:	f9 01       	movw	r30, r18
     8a6:	20 81       	ld	r18, Z
     8a8:	22 60       	ori	r18, 0x02	; 2
     8aa:	fc 01       	movw	r30, r24
     8ac:	20 83       	st	Z, r18
     8ae:	8f e6       	ldi	r24, 0x6F	; 111
     8b0:	90 e0       	ldi	r25, 0x00	; 0
     8b2:	2f e6       	ldi	r18, 0x6F	; 111
     8b4:	30 e0       	ldi	r19, 0x00	; 0
     8b6:	f9 01       	movw	r30, r18
     8b8:	20 81       	ld	r18, Z
     8ba:	22 60       	ori	r18, 0x02	; 2
     8bc:	fc 01       	movw	r30, r24
     8be:	20 83       	st	Z, r18
     8c0:	89 81       	ldd	r24, Y+1	; 0x01
     8c2:	82 30       	cpi	r24, 0x02	; 2
     8c4:	c1 f4       	brne	.+48     	; 0x8f6 <_ZL7initISR18timer16_Sequence_t+0x88>
     8c6:	80 e9       	ldi	r24, 0x90	; 144
     8c8:	90 e0       	ldi	r25, 0x00	; 0
     8ca:	fc 01       	movw	r30, r24
     8cc:	10 82       	st	Z, r1
     8ce:	81 e9       	ldi	r24, 0x91	; 145
     8d0:	90 e0       	ldi	r25, 0x00	; 0
     8d2:	22 e0       	ldi	r18, 0x02	; 2
     8d4:	fc 01       	movw	r30, r24
     8d6:	20 83       	st	Z, r18
     8d8:	84 e9       	ldi	r24, 0x94	; 148
     8da:	90 e0       	ldi	r25, 0x00	; 0
     8dc:	fc 01       	movw	r30, r24
     8de:	11 82       	std	Z+1, r1	; 0x01
     8e0:	10 82       	st	Z, r1
     8e2:	88 e3       	ldi	r24, 0x38	; 56
     8e4:	90 e0       	ldi	r25, 0x00	; 0
     8e6:	22 e0       	ldi	r18, 0x02	; 2
     8e8:	fc 01       	movw	r30, r24
     8ea:	20 83       	st	Z, r18
     8ec:	81 e7       	ldi	r24, 0x71	; 113
     8ee:	90 e0       	ldi	r25, 0x00	; 0
     8f0:	22 e0       	ldi	r18, 0x02	; 2
     8f2:	fc 01       	movw	r30, r24
     8f4:	20 83       	st	Z, r18
     8f6:	89 81       	ldd	r24, Y+1	; 0x01
     8f8:	83 30       	cpi	r24, 0x03	; 3
     8fa:	c1 f4       	brne	.+48     	; 0x92c <_ZL7initISR18timer16_Sequence_t+0xbe>
     8fc:	80 ea       	ldi	r24, 0xA0	; 160
     8fe:	90 e0       	ldi	r25, 0x00	; 0
     900:	fc 01       	movw	r30, r24
     902:	10 82       	st	Z, r1
     904:	81 ea       	ldi	r24, 0xA1	; 161
     906:	90 e0       	ldi	r25, 0x00	; 0
     908:	22 e0       	ldi	r18, 0x02	; 2
     90a:	fc 01       	movw	r30, r24
     90c:	20 83       	st	Z, r18
     90e:	84 ea       	ldi	r24, 0xA4	; 164
     910:	90 e0       	ldi	r25, 0x00	; 0
     912:	fc 01       	movw	r30, r24
     914:	11 82       	std	Z+1, r1	; 0x01
     916:	10 82       	st	Z, r1
     918:	89 e3       	ldi	r24, 0x39	; 57
     91a:	90 e0       	ldi	r25, 0x00	; 0
     91c:	22 e0       	ldi	r18, 0x02	; 2
     91e:	fc 01       	movw	r30, r24
     920:	20 83       	st	Z, r18
     922:	82 e7       	ldi	r24, 0x72	; 114
     924:	90 e0       	ldi	r25, 0x00	; 0
     926:	22 e0       	ldi	r18, 0x02	; 2
     928:	fc 01       	movw	r30, r24
     92a:	20 83       	st	Z, r18
     92c:	89 81       	ldd	r24, Y+1	; 0x01
     92e:	88 23       	and	r24, r24
     930:	c1 f4       	brne	.+48     	; 0x962 <_ZL7initISR18timer16_Sequence_t+0xf4>
     932:	80 e2       	ldi	r24, 0x20	; 32
     934:	91 e0       	ldi	r25, 0x01	; 1
     936:	fc 01       	movw	r30, r24
     938:	10 82       	st	Z, r1
     93a:	81 e2       	ldi	r24, 0x21	; 33
     93c:	91 e0       	ldi	r25, 0x01	; 1
     93e:	22 e0       	ldi	r18, 0x02	; 2
     940:	fc 01       	movw	r30, r24
     942:	20 83       	st	Z, r18
     944:	84 e2       	ldi	r24, 0x24	; 36
     946:	91 e0       	ldi	r25, 0x01	; 1
     948:	fc 01       	movw	r30, r24
     94a:	11 82       	std	Z+1, r1	; 0x01
     94c:	10 82       	st	Z, r1
     94e:	8a e3       	ldi	r24, 0x3A	; 58
     950:	90 e0       	ldi	r25, 0x00	; 0
     952:	22 e0       	ldi	r18, 0x02	; 2
     954:	fc 01       	movw	r30, r24
     956:	20 83       	st	Z, r18
     958:	83 e7       	ldi	r24, 0x73	; 115
     95a:	90 e0       	ldi	r25, 0x00	; 0
     95c:	22 e0       	ldi	r18, 0x02	; 2
     95e:	fc 01       	movw	r30, r24
     960:	20 83       	st	Z, r18
     962:	00 00       	nop
     964:	0f 90       	pop	r0
     966:	df 91       	pop	r29
     968:	cf 91       	pop	r28
     96a:	08 95       	ret

0000096c <_ZL13isTimerActive18timer16_Sequence_t>:
     96c:	cf 93       	push	r28
     96e:	df 93       	push	r29
     970:	1f 92       	push	r1
     972:	1f 92       	push	r1
     974:	cd b7       	in	r28, 0x3d	; 61
     976:	de b7       	in	r29, 0x3e	; 62
     978:	8a 83       	std	Y+2, r24	; 0x02
     97a:	19 82       	std	Y+1, r1	; 0x01
     97c:	89 81       	ldd	r24, Y+1	; 0x01
     97e:	8c 30       	cpi	r24, 0x0C	; 12
     980:	30 f5       	brcc	.+76     	; 0x9ce <_ZL13isTimerActive18timer16_Sequence_t+0x62>
     982:	8a 81       	ldd	r24, Y+2	; 0x02
     984:	28 2f       	mov	r18, r24
     986:	30 e0       	ldi	r19, 0x00	; 0
     988:	c9 01       	movw	r24, r18
     98a:	88 0f       	add	r24, r24
     98c:	99 1f       	adc	r25, r25
     98e:	82 0f       	add	r24, r18
     990:	93 1f       	adc	r25, r19
     992:	88 0f       	add	r24, r24
     994:	99 1f       	adc	r25, r25
     996:	88 0f       	add	r24, r24
     998:	99 1f       	adc	r25, r25
     99a:	9c 01       	movw	r18, r24
     99c:	89 81       	ldd	r24, Y+1	; 0x01
     99e:	88 2f       	mov	r24, r24
     9a0:	90 e0       	ldi	r25, 0x00	; 0
     9a2:	28 0f       	add	r18, r24
     9a4:	39 1f       	adc	r19, r25
     9a6:	c9 01       	movw	r24, r18
     9a8:	88 0f       	add	r24, r24
     9aa:	99 1f       	adc	r25, r25
     9ac:	82 0f       	add	r24, r18
     9ae:	93 1f       	adc	r25, r19
     9b0:	8a 5e       	subi	r24, 0xEA	; 234
     9b2:	9d 4f       	sbci	r25, 0xFD	; 253
     9b4:	fc 01       	movw	r30, r24
     9b6:	80 81       	ld	r24, Z
     9b8:	86 fb       	bst	r24, 6
     9ba:	88 27       	eor	r24, r24
     9bc:	80 f9       	bld	r24, 0
     9be:	81 30       	cpi	r24, 0x01	; 1
     9c0:	11 f4       	brne	.+4      	; 0x9c6 <_ZL13isTimerActive18timer16_Sequence_t+0x5a>
     9c2:	81 e0       	ldi	r24, 0x01	; 1
     9c4:	05 c0       	rjmp	.+10     	; 0x9d0 <_ZL13isTimerActive18timer16_Sequence_t+0x64>
     9c6:	89 81       	ldd	r24, Y+1	; 0x01
     9c8:	8f 5f       	subi	r24, 0xFF	; 255
     9ca:	89 83       	std	Y+1, r24	; 0x01
     9cc:	d7 cf       	rjmp	.-82     	; 0x97c <_ZL13isTimerActive18timer16_Sequence_t+0x10>
     9ce:	80 e0       	ldi	r24, 0x00	; 0
     9d0:	0f 90       	pop	r0
     9d2:	0f 90       	pop	r0
     9d4:	df 91       	pop	r29
     9d6:	cf 91       	pop	r28
     9d8:	08 95       	ret

000009da <_ZN5ServoC1Ev>:
     9da:	cf 93       	push	r28
     9dc:	df 93       	push	r29
     9de:	1f 92       	push	r1
     9e0:	1f 92       	push	r1
     9e2:	cd b7       	in	r28, 0x3d	; 61
     9e4:	de b7       	in	r29, 0x3e	; 62
     9e6:	9a 83       	std	Y+2, r25	; 0x02
     9e8:	89 83       	std	Y+1, r24	; 0x01
     9ea:	80 91 aa 02 	lds	r24, 0x02AA	; 0x8002aa <ServoCount>
     9ee:	80 33       	cpi	r24, 0x30	; 48
     9f0:	e8 f4       	brcc	.+58     	; 0xa2c <_ZN5ServoC1Ev+0x52>
     9f2:	20 91 aa 02 	lds	r18, 0x02AA	; 0x8002aa <ServoCount>
     9f6:	81 e0       	ldi	r24, 0x01	; 1
     9f8:	82 0f       	add	r24, r18
     9fa:	80 93 aa 02 	sts	0x02AA, r24	; 0x8002aa <ServoCount>
     9fe:	89 81       	ldd	r24, Y+1	; 0x01
     a00:	9a 81       	ldd	r25, Y+2	; 0x02
     a02:	fc 01       	movw	r30, r24
     a04:	20 83       	st	Z, r18
     a06:	89 81       	ldd	r24, Y+1	; 0x01
     a08:	9a 81       	ldd	r25, Y+2	; 0x02
     a0a:	fc 01       	movw	r30, r24
     a0c:	80 81       	ld	r24, Z
     a0e:	28 2f       	mov	r18, r24
     a10:	30 e0       	ldi	r19, 0x00	; 0
     a12:	c9 01       	movw	r24, r18
     a14:	88 0f       	add	r24, r24
     a16:	99 1f       	adc	r25, r25
     a18:	82 0f       	add	r24, r18
     a1a:	93 1f       	adc	r25, r19
     a1c:	89 5e       	subi	r24, 0xE9	; 233
     a1e:	9d 4f       	sbci	r25, 0xFD	; 253
     a20:	28 eb       	ldi	r18, 0xB8	; 184
     a22:	3b e0       	ldi	r19, 0x0B	; 11
     a24:	fc 01       	movw	r30, r24
     a26:	31 83       	std	Z+1, r19	; 0x01
     a28:	20 83       	st	Z, r18
     a2a:	05 c0       	rjmp	.+10     	; 0xa36 <_ZN5ServoC1Ev+0x5c>
     a2c:	89 81       	ldd	r24, Y+1	; 0x01
     a2e:	9a 81       	ldd	r25, Y+2	; 0x02
     a30:	2f ef       	ldi	r18, 0xFF	; 255
     a32:	fc 01       	movw	r30, r24
     a34:	20 83       	st	Z, r18
     a36:	00 00       	nop
     a38:	0f 90       	pop	r0
     a3a:	0f 90       	pop	r0
     a3c:	df 91       	pop	r29
     a3e:	cf 91       	pop	r28
     a40:	08 95       	ret

00000a42 <_ZN5Servo6attachEi>:
     a42:	cf 93       	push	r28
     a44:	df 93       	push	r29
     a46:	00 d0       	rcall	.+0      	; 0xa48 <_ZN5Servo6attachEi+0x6>
     a48:	1f 92       	push	r1
     a4a:	cd b7       	in	r28, 0x3d	; 61
     a4c:	de b7       	in	r29, 0x3e	; 62
     a4e:	9a 83       	std	Y+2, r25	; 0x02
     a50:	89 83       	std	Y+1, r24	; 0x01
     a52:	7c 83       	std	Y+4, r23	; 0x04
     a54:	6b 83       	std	Y+3, r22	; 0x03
     a56:	6b 81       	ldd	r22, Y+3	; 0x03
     a58:	7c 81       	ldd	r23, Y+4	; 0x04
     a5a:	89 81       	ldd	r24, Y+1	; 0x01
     a5c:	9a 81       	ldd	r25, Y+2	; 0x02
     a5e:	20 e6       	ldi	r18, 0x60	; 96
     a60:	39 e0       	ldi	r19, 0x09	; 9
     a62:	40 e2       	ldi	r20, 0x20	; 32
     a64:	52 e0       	ldi	r21, 0x02	; 2
     a66:	07 d0       	rcall	.+14     	; 0xa76 <_ZN5Servo6attachEiii>
     a68:	0f 90       	pop	r0
     a6a:	0f 90       	pop	r0
     a6c:	0f 90       	pop	r0
     a6e:	0f 90       	pop	r0
     a70:	df 91       	pop	r29
     a72:	cf 91       	pop	r28
     a74:	08 95       	ret

00000a76 <_ZN5Servo6attachEiii>:
     a76:	cf 93       	push	r28
     a78:	df 93       	push	r29
     a7a:	cd b7       	in	r28, 0x3d	; 61
     a7c:	de b7       	in	r29, 0x3e	; 62
     a7e:	29 97       	sbiw	r28, 0x09	; 9
     a80:	0f b6       	in	r0, 0x3f	; 63
     a82:	f8 94       	cli
     a84:	de bf       	out	0x3e, r29	; 62
     a86:	0f be       	out	0x3f, r0	; 63
     a88:	cd bf       	out	0x3d, r28	; 61
     a8a:	9b 83       	std	Y+3, r25	; 0x03
     a8c:	8a 83       	std	Y+2, r24	; 0x02
     a8e:	7d 83       	std	Y+5, r23	; 0x05
     a90:	6c 83       	std	Y+4, r22	; 0x04
     a92:	5f 83       	std	Y+7, r21	; 0x07
     a94:	4e 83       	std	Y+6, r20	; 0x06
     a96:	39 87       	std	Y+9, r19	; 0x09
     a98:	28 87       	std	Y+8, r18	; 0x08
     a9a:	8a 81       	ldd	r24, Y+2	; 0x02
     a9c:	9b 81       	ldd	r25, Y+3	; 0x03
     a9e:	fc 01       	movw	r30, r24
     aa0:	80 81       	ld	r24, Z
     aa2:	80 33       	cpi	r24, 0x30	; 48
     aa4:	08 f0       	brcs	.+2      	; 0xaa8 <_ZN5Servo6attachEiii+0x32>
     aa6:	6a c0       	rjmp	.+212    	; 0xb7c <_ZN5Servo6attachEiii+0x106>
     aa8:	8c 81       	ldd	r24, Y+4	; 0x04
     aaa:	61 e0       	ldi	r22, 0x01	; 1
     aac:	f2 d4       	rcall	.+2532   	; 0x1492 <pinMode>
     aae:	8a 81       	ldd	r24, Y+2	; 0x02
     ab0:	9b 81       	ldd	r25, Y+3	; 0x03
     ab2:	fc 01       	movw	r30, r24
     ab4:	80 81       	ld	r24, Z
     ab6:	28 2f       	mov	r18, r24
     ab8:	30 e0       	ldi	r19, 0x00	; 0
     aba:	8c 81       	ldd	r24, Y+4	; 0x04
     abc:	48 2f       	mov	r20, r24
     abe:	4f 73       	andi	r20, 0x3F	; 63
     ac0:	c9 01       	movw	r24, r18
     ac2:	88 0f       	add	r24, r24
     ac4:	99 1f       	adc	r25, r25
     ac6:	82 0f       	add	r24, r18
     ac8:	93 1f       	adc	r25, r19
     aca:	8a 5e       	subi	r24, 0xEA	; 234
     acc:	9d 4f       	sbci	r25, 0xFD	; 253
     ace:	24 2f       	mov	r18, r20
     ad0:	2f 73       	andi	r18, 0x3F	; 63
     ad2:	fc 01       	movw	r30, r24
     ad4:	30 81       	ld	r19, Z
     ad6:	30 7c       	andi	r19, 0xC0	; 192
     ad8:	23 2b       	or	r18, r19
     ada:	fc 01       	movw	r30, r24
     adc:	20 83       	st	Z, r18
     ade:	20 e2       	ldi	r18, 0x20	; 32
     ae0:	32 e0       	ldi	r19, 0x02	; 2
     ae2:	8e 81       	ldd	r24, Y+6	; 0x06
     ae4:	9f 81       	ldd	r25, Y+7	; 0x07
     ae6:	a9 01       	movw	r20, r18
     ae8:	48 1b       	sub	r20, r24
     aea:	59 0b       	sbc	r21, r25
     aec:	ca 01       	movw	r24, r20
     aee:	99 23       	and	r25, r25
     af0:	0c f4       	brge	.+2      	; 0xaf4 <_ZN5Servo6attachEiii+0x7e>
     af2:	03 96       	adiw	r24, 0x03	; 3
     af4:	95 95       	asr	r25
     af6:	87 95       	ror	r24
     af8:	95 95       	asr	r25
     afa:	87 95       	ror	r24
     afc:	28 2f       	mov	r18, r24
     afe:	8a 81       	ldd	r24, Y+2	; 0x02
     b00:	9b 81       	ldd	r25, Y+3	; 0x03
     b02:	fc 01       	movw	r30, r24
     b04:	21 83       	std	Z+1, r18	; 0x01
     b06:	20 e6       	ldi	r18, 0x60	; 96
     b08:	39 e0       	ldi	r19, 0x09	; 9
     b0a:	88 85       	ldd	r24, Y+8	; 0x08
     b0c:	99 85       	ldd	r25, Y+9	; 0x09
     b0e:	a9 01       	movw	r20, r18
     b10:	48 1b       	sub	r20, r24
     b12:	59 0b       	sbc	r21, r25
     b14:	ca 01       	movw	r24, r20
     b16:	99 23       	and	r25, r25
     b18:	0c f4       	brge	.+2      	; 0xb1c <_ZN5Servo6attachEiii+0xa6>
     b1a:	03 96       	adiw	r24, 0x03	; 3
     b1c:	95 95       	asr	r25
     b1e:	87 95       	ror	r24
     b20:	95 95       	asr	r25
     b22:	87 95       	ror	r24
     b24:	28 2f       	mov	r18, r24
     b26:	8a 81       	ldd	r24, Y+2	; 0x02
     b28:	9b 81       	ldd	r25, Y+3	; 0x03
     b2a:	fc 01       	movw	r30, r24
     b2c:	22 83       	std	Z+2, r18	; 0x02
     b2e:	8a 81       	ldd	r24, Y+2	; 0x02
     b30:	9b 81       	ldd	r25, Y+3	; 0x03
     b32:	fc 01       	movw	r30, r24
     b34:	90 81       	ld	r25, Z
     b36:	8b ea       	ldi	r24, 0xAB	; 171
     b38:	98 9f       	mul	r25, r24
     b3a:	81 2d       	mov	r24, r1
     b3c:	11 24       	eor	r1, r1
     b3e:	86 95       	lsr	r24
     b40:	86 95       	lsr	r24
     b42:	86 95       	lsr	r24
     b44:	89 83       	std	Y+1, r24	; 0x01
     b46:	89 81       	ldd	r24, Y+1	; 0x01
     b48:	11 df       	rcall	.-478    	; 0x96c <_ZL13isTimerActive18timer16_Sequence_t>
     b4a:	98 2f       	mov	r25, r24
     b4c:	81 e0       	ldi	r24, 0x01	; 1
     b4e:	89 27       	eor	r24, r25
     b50:	88 23       	and	r24, r24
     b52:	11 f0       	breq	.+4      	; 0xb58 <_ZN5Servo6attachEiii+0xe2>
     b54:	89 81       	ldd	r24, Y+1	; 0x01
     b56:	8b de       	rcall	.-746    	; 0x86e <_ZL7initISR18timer16_Sequence_t>
     b58:	8a 81       	ldd	r24, Y+2	; 0x02
     b5a:	9b 81       	ldd	r25, Y+3	; 0x03
     b5c:	fc 01       	movw	r30, r24
     b5e:	80 81       	ld	r24, Z
     b60:	28 2f       	mov	r18, r24
     b62:	30 e0       	ldi	r19, 0x00	; 0
     b64:	c9 01       	movw	r24, r18
     b66:	88 0f       	add	r24, r24
     b68:	99 1f       	adc	r25, r25
     b6a:	82 0f       	add	r24, r18
     b6c:	93 1f       	adc	r25, r19
     b6e:	8a 5e       	subi	r24, 0xEA	; 234
     b70:	9d 4f       	sbci	r25, 0xFD	; 253
     b72:	fc 01       	movw	r30, r24
     b74:	20 81       	ld	r18, Z
     b76:	20 64       	ori	r18, 0x40	; 64
     b78:	fc 01       	movw	r30, r24
     b7a:	20 83       	st	Z, r18
     b7c:	8a 81       	ldd	r24, Y+2	; 0x02
     b7e:	9b 81       	ldd	r25, Y+3	; 0x03
     b80:	fc 01       	movw	r30, r24
     b82:	80 81       	ld	r24, Z
     b84:	29 96       	adiw	r28, 0x09	; 9
     b86:	0f b6       	in	r0, 0x3f	; 63
     b88:	f8 94       	cli
     b8a:	de bf       	out	0x3e, r29	; 62
     b8c:	0f be       	out	0x3f, r0	; 63
     b8e:	cd bf       	out	0x3d, r28	; 61
     b90:	df 91       	pop	r29
     b92:	cf 91       	pop	r28
     b94:	08 95       	ret

00000b96 <_ZN5Servo5writeEi>:

void Servo::write(int value)
{
     b96:	6f 92       	push	r6
     b98:	7f 92       	push	r7
     b9a:	8f 92       	push	r8
     b9c:	9f 92       	push	r9
     b9e:	af 92       	push	r10
     ba0:	bf 92       	push	r11
     ba2:	cf 92       	push	r12
     ba4:	df 92       	push	r13
     ba6:	ef 92       	push	r14
     ba8:	ff 92       	push	r15
     baa:	0f 93       	push	r16
     bac:	1f 93       	push	r17
     bae:	cf 93       	push	r28
     bb0:	df 93       	push	r29
     bb2:	00 d0       	rcall	.+0      	; 0xbb4 <_ZN5Servo5writeEi+0x1e>
     bb4:	1f 92       	push	r1
     bb6:	cd b7       	in	r28, 0x3d	; 61
     bb8:	de b7       	in	r29, 0x3e	; 62
     bba:	9a 83       	std	Y+2, r25	; 0x02
     bbc:	89 83       	std	Y+1, r24	; 0x01
     bbe:	7c 83       	std	Y+4, r23	; 0x04
     bc0:	6b 83       	std	Y+3, r22	; 0x03
  if(value < MIN_PULSE_WIDTH)
     bc2:	8b 81       	ldd	r24, Y+3	; 0x03
     bc4:	9c 81       	ldd	r25, Y+4	; 0x04
     bc6:	80 32       	cpi	r24, 0x20	; 32
     bc8:	92 40       	sbci	r25, 0x02	; 2
     bca:	0c f0       	brlt	.+2      	; 0xbce <_ZN5Servo5writeEi+0x38>
     bcc:	5b c0       	rjmp	.+182    	; 0xc84 <_ZN5Servo5writeEi+0xee>
  {  // treat values less than 544 as angles in degrees (valid values in microseconds are handled as microseconds)
    if(value < 0) value = 0;
     bce:	8b 81       	ldd	r24, Y+3	; 0x03
     bd0:	9c 81       	ldd	r25, Y+4	; 0x04
     bd2:	99 23       	and	r25, r25
     bd4:	14 f4       	brge	.+4      	; 0xbda <_ZN5Servo5writeEi+0x44>
     bd6:	1c 82       	std	Y+4, r1	; 0x04
     bd8:	1b 82       	std	Y+3, r1	; 0x03
    if(value > 180) value = 180;
     bda:	8b 81       	ldd	r24, Y+3	; 0x03
     bdc:	9c 81       	ldd	r25, Y+4	; 0x04
     bde:	85 3b       	cpi	r24, 0xB5	; 181
     be0:	91 05       	cpc	r25, r1
     be2:	24 f0       	brlt	.+8      	; 0xbec <_ZN5Servo5writeEi+0x56>
     be4:	84 eb       	ldi	r24, 0xB4	; 180
     be6:	90 e0       	ldi	r25, 0x00	; 0
     be8:	9c 83       	std	Y+4, r25	; 0x04
     bea:	8b 83       	std	Y+3, r24	; 0x03
    value = map(value, 0, 180, SERVO_MIN(),  SERVO_MAX());
     bec:	89 81       	ldd	r24, Y+1	; 0x01
     bee:	9a 81       	ldd	r25, Y+2	; 0x02
     bf0:	fc 01       	movw	r30, r24
     bf2:	82 81       	ldd	r24, Z+2	; 0x02
     bf4:	08 2e       	mov	r0, r24
     bf6:	00 0c       	add	r0, r0
     bf8:	99 0b       	sbc	r25, r25
     bfa:	28 e5       	ldi	r18, 0x58	; 88
     bfc:	32 e0       	ldi	r19, 0x02	; 2
     bfe:	a9 01       	movw	r20, r18
     c00:	48 1b       	sub	r20, r24
     c02:	59 0b       	sbc	r21, r25
     c04:	ca 01       	movw	r24, r20
     c06:	88 0f       	add	r24, r24
     c08:	99 1f       	adc	r25, r25
     c0a:	88 0f       	add	r24, r24
     c0c:	99 1f       	adc	r25, r25
     c0e:	09 2e       	mov	r0, r25
     c10:	00 0c       	add	r0, r0
     c12:	aa 0b       	sbc	r26, r26
     c14:	bb 0b       	sbc	r27, r27
     c16:	29 81       	ldd	r18, Y+1	; 0x01
     c18:	3a 81       	ldd	r19, Y+2	; 0x02
     c1a:	f9 01       	movw	r30, r18
     c1c:	21 81       	ldd	r18, Z+1	; 0x01
     c1e:	02 2e       	mov	r0, r18
     c20:	00 0c       	add	r0, r0
     c22:	33 0b       	sbc	r19, r19
     c24:	48 e8       	ldi	r20, 0x88	; 136
     c26:	50 e0       	ldi	r21, 0x00	; 0
     c28:	ba 01       	movw	r22, r20
     c2a:	62 1b       	sub	r22, r18
     c2c:	73 0b       	sbc	r23, r19
     c2e:	9b 01       	movw	r18, r22
     c30:	22 0f       	add	r18, r18
     c32:	33 1f       	adc	r19, r19
     c34:	22 0f       	add	r18, r18
     c36:	33 1f       	adc	r19, r19
     c38:	03 2e       	mov	r0, r19
     c3a:	00 0c       	add	r0, r0
     c3c:	44 0b       	sbc	r20, r20
     c3e:	55 0b       	sbc	r21, r21
     c40:	6b 81       	ldd	r22, Y+3	; 0x03
     c42:	7c 81       	ldd	r23, Y+4	; 0x04
     c44:	3b 01       	movw	r6, r22
     c46:	77 0f       	add	r23, r23
     c48:	88 08       	sbc	r8, r8
     c4a:	99 08       	sbc	r9, r9
     c4c:	6b 2f       	mov	r22, r27
     c4e:	6f 93       	push	r22
     c50:	6a 2f       	mov	r22, r26
     c52:	6f 93       	push	r22
     c54:	69 2f       	mov	r22, r25
     c56:	6f 93       	push	r22
     c58:	8f 93       	push	r24
     c5a:	59 01       	movw	r10, r18
     c5c:	6a 01       	movw	r12, r20
     c5e:	14 eb       	ldi	r17, 0xB4	; 180
     c60:	e1 2e       	mov	r14, r17
     c62:	f1 2c       	mov	r15, r1
     c64:	00 e0       	ldi	r16, 0x00	; 0
     c66:	10 e0       	ldi	r17, 0x00	; 0
     c68:	20 e0       	ldi	r18, 0x00	; 0
     c6a:	30 e0       	ldi	r19, 0x00	; 0
     c6c:	a9 01       	movw	r20, r18
     c6e:	c4 01       	movw	r24, r8
     c70:	b3 01       	movw	r22, r6
     c72:	79 d4       	rcall	.+2290   	; 0x1566 <_Z3maplllll>
     c74:	0f 90       	pop	r0
     c76:	0f 90       	pop	r0
     c78:	0f 90       	pop	r0
     c7a:	0f 90       	pop	r0
     c7c:	dc 01       	movw	r26, r24
     c7e:	cb 01       	movw	r24, r22
     c80:	9c 83       	std	Y+4, r25	; 0x04
     c82:	8b 83       	std	Y+3, r24	; 0x03
  }
  this->writeMicroseconds(value);
     c84:	2b 81       	ldd	r18, Y+3	; 0x03
     c86:	3c 81       	ldd	r19, Y+4	; 0x04
     c88:	89 81       	ldd	r24, Y+1	; 0x01
     c8a:	9a 81       	ldd	r25, Y+2	; 0x02
     c8c:	b9 01       	movw	r22, r18
     c8e:	14 d0       	rcall	.+40     	; 0xcb8 <_ZN5Servo17writeMicrosecondsEi>
}
     c90:	00 00       	nop
     c92:	0f 90       	pop	r0
     c94:	0f 90       	pop	r0
     c96:	0f 90       	pop	r0
     c98:	0f 90       	pop	r0
     c9a:	df 91       	pop	r29
     c9c:	cf 91       	pop	r28
     c9e:	1f 91       	pop	r17
     ca0:	0f 91       	pop	r16
     ca2:	ff 90       	pop	r15
     ca4:	ef 90       	pop	r14
     ca6:	df 90       	pop	r13
     ca8:	cf 90       	pop	r12
     caa:	bf 90       	pop	r11
     cac:	af 90       	pop	r10
     cae:	9f 90       	pop	r9
     cb0:	8f 90       	pop	r8
     cb2:	7f 90       	pop	r7
     cb4:	6f 90       	pop	r6
     cb6:	08 95       	ret

00000cb8 <_ZN5Servo17writeMicrosecondsEi>:

void Servo::writeMicroseconds(int value)
{
     cb8:	cf 93       	push	r28
     cba:	df 93       	push	r29
     cbc:	00 d0       	rcall	.+0      	; 0xcbe <_ZN5Servo17writeMicrosecondsEi+0x6>
     cbe:	00 d0       	rcall	.+0      	; 0xcc0 <_ZN5Servo17writeMicrosecondsEi+0x8>
     cc0:	cd b7       	in	r28, 0x3d	; 61
     cc2:	de b7       	in	r29, 0x3e	; 62
     cc4:	9c 83       	std	Y+4, r25	; 0x04
     cc6:	8b 83       	std	Y+3, r24	; 0x03
     cc8:	7e 83       	std	Y+6, r23	; 0x06
     cca:	6d 83       	std	Y+5, r22	; 0x05
  // calculate and store the values for the given channel
  byte channel = this->servoIndex;
     ccc:	8b 81       	ldd	r24, Y+3	; 0x03
     cce:	9c 81       	ldd	r25, Y+4	; 0x04
     cd0:	fc 01       	movw	r30, r24
     cd2:	80 81       	ld	r24, Z
     cd4:	89 83       	std	Y+1, r24	; 0x01
  if( (channel < MAX_SERVOS) )   // ensure channel is valid
     cd6:	89 81       	ldd	r24, Y+1	; 0x01
     cd8:	80 33       	cpi	r24, 0x30	; 48
     cda:	08 f0       	brcs	.+2      	; 0xcde <_ZN5Servo17writeMicrosecondsEi+0x26>
     cdc:	99 c0       	rjmp	.+306    	; 0xe10 <_ZN5Servo17writeMicrosecondsEi+0x158>
  {
    if( value < SERVO_MIN() )          // ensure pulse width is valid
     cde:	8b 81       	ldd	r24, Y+3	; 0x03
     ce0:	9c 81       	ldd	r25, Y+4	; 0x04
     ce2:	fc 01       	movw	r30, r24
     ce4:	81 81       	ldd	r24, Z+1	; 0x01
     ce6:	08 2e       	mov	r0, r24
     ce8:	00 0c       	add	r0, r0
     cea:	99 0b       	sbc	r25, r25
     cec:	28 e8       	ldi	r18, 0x88	; 136
     cee:	30 e0       	ldi	r19, 0x00	; 0
     cf0:	a9 01       	movw	r20, r18
     cf2:	48 1b       	sub	r20, r24
     cf4:	59 0b       	sbc	r21, r25
     cf6:	ca 01       	movw	r24, r20
     cf8:	9c 01       	movw	r18, r24
     cfa:	22 0f       	add	r18, r18
     cfc:	33 1f       	adc	r19, r19
     cfe:	22 0f       	add	r18, r18
     d00:	33 1f       	adc	r19, r19
     d02:	8d 81       	ldd	r24, Y+5	; 0x05
     d04:	9e 81       	ldd	r25, Y+6	; 0x06
     d06:	82 17       	cp	r24, r18
     d08:	93 07       	cpc	r25, r19
     d0a:	a4 f4       	brge	.+40     	; 0xd34 <_ZN5Servo17writeMicrosecondsEi+0x7c>
      value = SERVO_MIN();
     d0c:	8b 81       	ldd	r24, Y+3	; 0x03
     d0e:	9c 81       	ldd	r25, Y+4	; 0x04
     d10:	fc 01       	movw	r30, r24
     d12:	81 81       	ldd	r24, Z+1	; 0x01
     d14:	08 2e       	mov	r0, r24
     d16:	00 0c       	add	r0, r0
     d18:	99 0b       	sbc	r25, r25
     d1a:	28 e8       	ldi	r18, 0x88	; 136
     d1c:	30 e0       	ldi	r19, 0x00	; 0
     d1e:	a9 01       	movw	r20, r18
     d20:	48 1b       	sub	r20, r24
     d22:	59 0b       	sbc	r21, r25
     d24:	ca 01       	movw	r24, r20
     d26:	88 0f       	add	r24, r24
     d28:	99 1f       	adc	r25, r25
     d2a:	88 0f       	add	r24, r24
     d2c:	99 1f       	adc	r25, r25
     d2e:	9e 83       	std	Y+6, r25	; 0x06
     d30:	8d 83       	std	Y+5, r24	; 0x05
     d32:	2a c0       	rjmp	.+84     	; 0xd88 <_ZN5Servo17writeMicrosecondsEi+0xd0>
    else if( value > SERVO_MAX() )
     d34:	8b 81       	ldd	r24, Y+3	; 0x03
     d36:	9c 81       	ldd	r25, Y+4	; 0x04
     d38:	fc 01       	movw	r30, r24
     d3a:	82 81       	ldd	r24, Z+2	; 0x02
     d3c:	08 2e       	mov	r0, r24
     d3e:	00 0c       	add	r0, r0
     d40:	99 0b       	sbc	r25, r25
     d42:	28 e5       	ldi	r18, 0x58	; 88
     d44:	32 e0       	ldi	r19, 0x02	; 2
     d46:	a9 01       	movw	r20, r18
     d48:	48 1b       	sub	r20, r24
     d4a:	59 0b       	sbc	r21, r25
     d4c:	ca 01       	movw	r24, r20
     d4e:	9c 01       	movw	r18, r24
     d50:	22 0f       	add	r18, r18
     d52:	33 1f       	adc	r19, r19
     d54:	22 0f       	add	r18, r18
     d56:	33 1f       	adc	r19, r19
     d58:	8d 81       	ldd	r24, Y+5	; 0x05
     d5a:	9e 81       	ldd	r25, Y+6	; 0x06
     d5c:	28 17       	cp	r18, r24
     d5e:	39 07       	cpc	r19, r25
     d60:	9c f4       	brge	.+38     	; 0xd88 <_ZN5Servo17writeMicrosecondsEi+0xd0>
      value = SERVO_MAX();
     d62:	8b 81       	ldd	r24, Y+3	; 0x03
     d64:	9c 81       	ldd	r25, Y+4	; 0x04
     d66:	fc 01       	movw	r30, r24
     d68:	82 81       	ldd	r24, Z+2	; 0x02
     d6a:	08 2e       	mov	r0, r24
     d6c:	00 0c       	add	r0, r0
     d6e:	99 0b       	sbc	r25, r25
     d70:	28 e5       	ldi	r18, 0x58	; 88
     d72:	32 e0       	ldi	r19, 0x02	; 2
     d74:	a9 01       	movw	r20, r18
     d76:	48 1b       	sub	r20, r24
     d78:	59 0b       	sbc	r21, r25
     d7a:	ca 01       	movw	r24, r20
     d7c:	88 0f       	add	r24, r24
     d7e:	99 1f       	adc	r25, r25
     d80:	88 0f       	add	r24, r24
     d82:	99 1f       	adc	r25, r25
     d84:	9e 83       	std	Y+6, r25	; 0x06
     d86:	8d 83       	std	Y+5, r24	; 0x05

    value = value - TRIM_DURATION;
     d88:	8d 81       	ldd	r24, Y+5	; 0x05
     d8a:	9e 81       	ldd	r25, Y+6	; 0x06
     d8c:	02 97       	sbiw	r24, 0x02	; 2
     d8e:	9e 83       	std	Y+6, r25	; 0x06
     d90:	8d 83       	std	Y+5, r24	; 0x05
    value = usToTicks(value);  // convert to ticks after compensating for interrupt overhead - 12 Aug 2009
     d92:	8d 81       	ldd	r24, Y+5	; 0x05
     d94:	9e 81       	ldd	r25, Y+6	; 0x06
     d96:	09 2e       	mov	r0, r25
     d98:	00 0c       	add	r0, r0
     d9a:	aa 0b       	sbc	r26, r26
     d9c:	bb 0b       	sbc	r27, r27
     d9e:	88 0f       	add	r24, r24
     da0:	99 1f       	adc	r25, r25
     da2:	aa 1f       	adc	r26, r26
     da4:	bb 1f       	adc	r27, r27
     da6:	88 0f       	add	r24, r24
     da8:	99 1f       	adc	r25, r25
     daa:	aa 1f       	adc	r26, r26
     dac:	bb 1f       	adc	r27, r27
     dae:	88 0f       	add	r24, r24
     db0:	99 1f       	adc	r25, r25
     db2:	aa 1f       	adc	r26, r26
     db4:	bb 1f       	adc	r27, r27
     db6:	88 0f       	add	r24, r24
     db8:	99 1f       	adc	r25, r25
     dba:	aa 1f       	adc	r26, r26
     dbc:	bb 1f       	adc	r27, r27
     dbe:	bb 23       	and	r27, r27
     dc0:	1c f4       	brge	.+6      	; 0xdc8 <_ZN5Servo17writeMicrosecondsEi+0x110>
     dc2:	07 96       	adiw	r24, 0x07	; 7
     dc4:	a1 1d       	adc	r26, r1
     dc6:	b1 1d       	adc	r27, r1
     dc8:	68 94       	set
     dca:	12 f8       	bld	r1, 2
     dcc:	b5 95       	asr	r27
     dce:	a7 95       	ror	r26
     dd0:	97 95       	ror	r25
     dd2:	87 95       	ror	r24
     dd4:	16 94       	lsr	r1
     dd6:	d1 f7       	brne	.-12     	; 0xdcc <_ZN5Servo17writeMicrosecondsEi+0x114>
     dd8:	9e 83       	std	Y+6, r25	; 0x06
     dda:	8d 83       	std	Y+5, r24	; 0x05

    uint8_t oldSREG = SREG;
     ddc:	8f e5       	ldi	r24, 0x5F	; 95
     dde:	90 e0       	ldi	r25, 0x00	; 0
     de0:	fc 01       	movw	r30, r24
     de2:	80 81       	ld	r24, Z
     de4:	8a 83       	std	Y+2, r24	; 0x02
    cli();
     de6:	f8 94       	cli
    servos[channel].ticks = value;
     de8:	89 81       	ldd	r24, Y+1	; 0x01
     dea:	28 2f       	mov	r18, r24
     dec:	30 e0       	ldi	r19, 0x00	; 0
     dee:	4d 81       	ldd	r20, Y+5	; 0x05
     df0:	5e 81       	ldd	r21, Y+6	; 0x06
     df2:	c9 01       	movw	r24, r18
     df4:	88 0f       	add	r24, r24
     df6:	99 1f       	adc	r25, r25
     df8:	82 0f       	add	r24, r18
     dfa:	93 1f       	adc	r25, r19
     dfc:	89 5e       	subi	r24, 0xE9	; 233
     dfe:	9d 4f       	sbci	r25, 0xFD	; 253
     e00:	fc 01       	movw	r30, r24
     e02:	51 83       	std	Z+1, r21	; 0x01
     e04:	40 83       	st	Z, r20
    SREG = oldSREG;
     e06:	8f e5       	ldi	r24, 0x5F	; 95
     e08:	90 e0       	ldi	r25, 0x00	; 0
     e0a:	2a 81       	ldd	r18, Y+2	; 0x02
     e0c:	fc 01       	movw	r30, r24
     e0e:	20 83       	st	Z, r18
  }
}
     e10:	00 00       	nop
     e12:	26 96       	adiw	r28, 0x06	; 6
     e14:	0f b6       	in	r0, 0x3f	; 63
     e16:	f8 94       	cli
     e18:	de bf       	out	0x3e, r29	; 62
     e1a:	0f be       	out	0x3f, r0	; 63
     e1c:	cd bf       	out	0x3d, r28	; 61
     e1e:	df 91       	pop	r29
     e20:	cf 91       	pop	r28
     e22:	08 95       	ret

00000e24 <initVariant>:
     e24:	08 95       	ret

00000e26 <main>:
void setupUSB() __attribute__((weak));
void setupUSB() { }

int main(void)
{
	init();
     e26:	7e d2       	rcall	.+1276   	; 0x1324 <init>

	initVariant();
     e28:	fd df       	rcall	.-6      	; 0xe24 <initVariant>

#if defined(USBCON)
	USBDevice.attach();
#endif
	
	setup();
     e2a:	42 da       	rcall	.-2940   	; 0x2b0 <setup>
    
	for (;;) {
		loop();
		if (serialEventRun) serialEventRun();
     e2c:	c0 e0       	ldi	r28, 0x00	; 0
     e2e:	d0 e0       	ldi	r29, 0x00	; 0
#endif
	
	setup();
    
	for (;;) {
		loop();
     e30:	5d da       	rcall	.-2886   	; 0x2ec <loop>
     e32:	20 97       	sbiw	r28, 0x00	; 0
		if (serialEventRun) serialEventRun();
     e34:	e9 f3       	breq	.-6      	; 0xe30 <main+0xa>
     e36:	0e 94 00 00 	call	0	; 0x0 <__vectors>
     e3a:	fa cf       	rjmp	.-12     	; 0xe30 <main+0xa>

00000e3c <nothing>:
     e3c:	08 95       	ret

00000e3e <attachInterrupt>:
    #endif
      break;       
#endif
    }
      
    intFunc[interruptNum] = nothing;
     e3e:	88 30       	cpi	r24, 0x08	; 8
     e40:	08 f0       	brcs	.+2      	; 0xe44 <attachInterrupt+0x6>
     e42:	6f c0       	rjmp	.+222    	; 0xf22 <attachInterrupt+0xe4>
     e44:	a8 2f       	mov	r26, r24
     e46:	b0 e0       	ldi	r27, 0x00	; 0
     e48:	aa 0f       	add	r26, r26
     e4a:	bb 1f       	adc	r27, r27
     e4c:	ae 5f       	subi	r26, 0xFE	; 254
     e4e:	bd 4f       	sbci	r27, 0xFD	; 253
     e50:	11 96       	adiw	r26, 0x01	; 1
     e52:	7c 93       	st	X, r23
     e54:	6e 93       	st	-X, r22
     e56:	90 e0       	ldi	r25, 0x00	; 0
     e58:	fc 01       	movw	r30, r24
     e5a:	31 97       	sbiw	r30, 0x01	; 1
     e5c:	e7 30       	cpi	r30, 0x07	; 7
     e5e:	f1 05       	cpc	r31, r1
     e60:	98 f5       	brcc	.+102    	; 0xec8 <attachInterrupt+0x8a>
     e62:	88 27       	eor	r24, r24
     e64:	ee 58       	subi	r30, 0x8E	; 142
     e66:	ff 4f       	sbci	r31, 0xFF	; 255
     e68:	8f 4f       	sbci	r24, 0xFF	; 255
     e6a:	0a c4       	rjmp	.+2068   	; 0x1680 <__tablejump2__>
     e6c:	80 91 69 00 	lds	r24, 0x0069	; 0x800069 <__TEXT_REGION_LENGTH__+0x7c0069>
     e70:	8c 7f       	andi	r24, 0xFC	; 252
     e72:	48 2b       	or	r20, r24
     e74:	40 93 69 00 	sts	0x0069, r20	; 0x800069 <__TEXT_REGION_LENGTH__+0x7c0069>
     e78:	e8 9a       	sbi	0x1d, 0	; 29
     e7a:	08 95       	ret
     e7c:	80 91 69 00 	lds	r24, 0x0069	; 0x800069 <__TEXT_REGION_LENGTH__+0x7c0069>
     e80:	83 7f       	andi	r24, 0xF3	; 243
     e82:	44 0f       	add	r20, r20
     e84:	55 1f       	adc	r21, r21
     e86:	44 0f       	add	r20, r20
     e88:	55 1f       	adc	r21, r21
     e8a:	48 2b       	or	r20, r24
     e8c:	40 93 69 00 	sts	0x0069, r20	; 0x800069 <__TEXT_REGION_LENGTH__+0x7c0069>
     e90:	e9 9a       	sbi	0x1d, 1	; 29
     e92:	08 95       	ret
     e94:	80 91 69 00 	lds	r24, 0x0069	; 0x800069 <__TEXT_REGION_LENGTH__+0x7c0069>
     e98:	8f 7c       	andi	r24, 0xCF	; 207
     e9a:	74 e0       	ldi	r23, 0x04	; 4
     e9c:	44 0f       	add	r20, r20
     e9e:	55 1f       	adc	r21, r21
     ea0:	7a 95       	dec	r23
     ea2:	e1 f7       	brne	.-8      	; 0xe9c <attachInterrupt+0x5e>
     ea4:	48 2b       	or	r20, r24
     ea6:	40 93 69 00 	sts	0x0069, r20	; 0x800069 <__TEXT_REGION_LENGTH__+0x7c0069>
     eaa:	ea 9a       	sbi	0x1d, 2	; 29
     eac:	08 95       	ret
     eae:	80 91 69 00 	lds	r24, 0x0069	; 0x800069 <__TEXT_REGION_LENGTH__+0x7c0069>
     eb2:	8f 73       	andi	r24, 0x3F	; 63
     eb4:	66 e0       	ldi	r22, 0x06	; 6
     eb6:	44 0f       	add	r20, r20
     eb8:	55 1f       	adc	r21, r21
     eba:	6a 95       	dec	r22
     ebc:	e1 f7       	brne	.-8      	; 0xeb6 <attachInterrupt+0x78>
     ebe:	48 2b       	or	r20, r24
     ec0:	40 93 69 00 	sts	0x0069, r20	; 0x800069 <__TEXT_REGION_LENGTH__+0x7c0069>
     ec4:	eb 9a       	sbi	0x1d, 3	; 29
     ec6:	08 95       	ret
     ec8:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <__TEXT_REGION_LENGTH__+0x7c006a>
     ecc:	8c 7f       	andi	r24, 0xFC	; 252
     ece:	48 2b       	or	r20, r24
     ed0:	40 93 6a 00 	sts	0x006A, r20	; 0x80006a <__TEXT_REGION_LENGTH__+0x7c006a>
     ed4:	ec 9a       	sbi	0x1d, 4	; 29
     ed6:	08 95       	ret
     ed8:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <__TEXT_REGION_LENGTH__+0x7c006a>
     edc:	83 7f       	andi	r24, 0xF3	; 243
     ede:	44 0f       	add	r20, r20
     ee0:	55 1f       	adc	r21, r21
     ee2:	44 0f       	add	r20, r20
     ee4:	55 1f       	adc	r21, r21
     ee6:	48 2b       	or	r20, r24
     ee8:	40 93 6a 00 	sts	0x006A, r20	; 0x80006a <__TEXT_REGION_LENGTH__+0x7c006a>
     eec:	ed 9a       	sbi	0x1d, 5	; 29
     eee:	08 95       	ret
     ef0:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <__TEXT_REGION_LENGTH__+0x7c006a>
     ef4:	8f 7c       	andi	r24, 0xCF	; 207
     ef6:	24 e0       	ldi	r18, 0x04	; 4
     ef8:	44 0f       	add	r20, r20
     efa:	55 1f       	adc	r21, r21
     efc:	2a 95       	dec	r18
     efe:	e1 f7       	brne	.-8      	; 0xef8 <attachInterrupt+0xba>
     f00:	48 2b       	or	r20, r24
     f02:	40 93 6a 00 	sts	0x006A, r20	; 0x80006a <__TEXT_REGION_LENGTH__+0x7c006a>
     f06:	ee 9a       	sbi	0x1d, 6	; 29
     f08:	08 95       	ret
     f0a:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <__TEXT_REGION_LENGTH__+0x7c006a>
     f0e:	8f 73       	andi	r24, 0x3F	; 63
     f10:	96 e0       	ldi	r25, 0x06	; 6
     f12:	44 0f       	add	r20, r20
     f14:	55 1f       	adc	r21, r21
     f16:	9a 95       	dec	r25
     f18:	e1 f7       	brne	.-8      	; 0xf12 <attachInterrupt+0xd4>
     f1a:	48 2b       	or	r20, r24
     f1c:	40 93 6a 00 	sts	0x006A, r20	; 0x80006a <__TEXT_REGION_LENGTH__+0x7c006a>
     f20:	ef 9a       	sbi	0x1d, 7	; 29
     f22:	08 95       	ret

00000f24 <__vector_1>:
IMPLEMENT_ISR(INT6_vect, EXTERNAL_INT_6)
IMPLEMENT_ISR(INT7_vect, EXTERNAL_INT_7)

#elif defined(EICRA) && defined(EICRB)

IMPLEMENT_ISR(INT0_vect, EXTERNAL_INT_2)
     f24:	1f 92       	push	r1
     f26:	0f 92       	push	r0
     f28:	0f b6       	in	r0, 0x3f	; 63
     f2a:	0f 92       	push	r0
     f2c:	11 24       	eor	r1, r1
     f2e:	0b b6       	in	r0, 0x3b	; 59
     f30:	0f 92       	push	r0
     f32:	2f 93       	push	r18
     f34:	3f 93       	push	r19
     f36:	4f 93       	push	r20
     f38:	5f 93       	push	r21
     f3a:	6f 93       	push	r22
     f3c:	7f 93       	push	r23
     f3e:	8f 93       	push	r24
     f40:	9f 93       	push	r25
     f42:	af 93       	push	r26
     f44:	bf 93       	push	r27
     f46:	ef 93       	push	r30
     f48:	ff 93       	push	r31
     f4a:	e0 91 06 02 	lds	r30, 0x0206	; 0x800206 <intFunc+0x4>
     f4e:	f0 91 07 02 	lds	r31, 0x0207	; 0x800207 <intFunc+0x5>
     f52:	19 95       	eicall
     f54:	ff 91       	pop	r31
     f56:	ef 91       	pop	r30
     f58:	bf 91       	pop	r27
     f5a:	af 91       	pop	r26
     f5c:	9f 91       	pop	r25
     f5e:	8f 91       	pop	r24
     f60:	7f 91       	pop	r23
     f62:	6f 91       	pop	r22
     f64:	5f 91       	pop	r21
     f66:	4f 91       	pop	r20
     f68:	3f 91       	pop	r19
     f6a:	2f 91       	pop	r18
     f6c:	0f 90       	pop	r0
     f6e:	0b be       	out	0x3b, r0	; 59
     f70:	0f 90       	pop	r0
     f72:	0f be       	out	0x3f, r0	; 63
     f74:	0f 90       	pop	r0
     f76:	1f 90       	pop	r1
     f78:	18 95       	reti

00000f7a <__vector_2>:
IMPLEMENT_ISR(INT1_vect, EXTERNAL_INT_3)
     f7a:	1f 92       	push	r1
     f7c:	0f 92       	push	r0
     f7e:	0f b6       	in	r0, 0x3f	; 63
     f80:	0f 92       	push	r0
     f82:	11 24       	eor	r1, r1
     f84:	0b b6       	in	r0, 0x3b	; 59
     f86:	0f 92       	push	r0
     f88:	2f 93       	push	r18
     f8a:	3f 93       	push	r19
     f8c:	4f 93       	push	r20
     f8e:	5f 93       	push	r21
     f90:	6f 93       	push	r22
     f92:	7f 93       	push	r23
     f94:	8f 93       	push	r24
     f96:	9f 93       	push	r25
     f98:	af 93       	push	r26
     f9a:	bf 93       	push	r27
     f9c:	ef 93       	push	r30
     f9e:	ff 93       	push	r31
     fa0:	e0 91 08 02 	lds	r30, 0x0208	; 0x800208 <intFunc+0x6>
     fa4:	f0 91 09 02 	lds	r31, 0x0209	; 0x800209 <intFunc+0x7>
     fa8:	19 95       	eicall
     faa:	ff 91       	pop	r31
     fac:	ef 91       	pop	r30
     fae:	bf 91       	pop	r27
     fb0:	af 91       	pop	r26
     fb2:	9f 91       	pop	r25
     fb4:	8f 91       	pop	r24
     fb6:	7f 91       	pop	r23
     fb8:	6f 91       	pop	r22
     fba:	5f 91       	pop	r21
     fbc:	4f 91       	pop	r20
     fbe:	3f 91       	pop	r19
     fc0:	2f 91       	pop	r18
     fc2:	0f 90       	pop	r0
     fc4:	0b be       	out	0x3b, r0	; 59
     fc6:	0f 90       	pop	r0
     fc8:	0f be       	out	0x3f, r0	; 63
     fca:	0f 90       	pop	r0
     fcc:	1f 90       	pop	r1
     fce:	18 95       	reti

00000fd0 <__vector_3>:
IMPLEMENT_ISR(INT2_vect, EXTERNAL_INT_4)
     fd0:	1f 92       	push	r1
     fd2:	0f 92       	push	r0
     fd4:	0f b6       	in	r0, 0x3f	; 63
     fd6:	0f 92       	push	r0
     fd8:	11 24       	eor	r1, r1
     fda:	0b b6       	in	r0, 0x3b	; 59
     fdc:	0f 92       	push	r0
     fde:	2f 93       	push	r18
     fe0:	3f 93       	push	r19
     fe2:	4f 93       	push	r20
     fe4:	5f 93       	push	r21
     fe6:	6f 93       	push	r22
     fe8:	7f 93       	push	r23
     fea:	8f 93       	push	r24
     fec:	9f 93       	push	r25
     fee:	af 93       	push	r26
     ff0:	bf 93       	push	r27
     ff2:	ef 93       	push	r30
     ff4:	ff 93       	push	r31
     ff6:	e0 91 0a 02 	lds	r30, 0x020A	; 0x80020a <intFunc+0x8>
     ffa:	f0 91 0b 02 	lds	r31, 0x020B	; 0x80020b <intFunc+0x9>
     ffe:	19 95       	eicall
    1000:	ff 91       	pop	r31
    1002:	ef 91       	pop	r30
    1004:	bf 91       	pop	r27
    1006:	af 91       	pop	r26
    1008:	9f 91       	pop	r25
    100a:	8f 91       	pop	r24
    100c:	7f 91       	pop	r23
    100e:	6f 91       	pop	r22
    1010:	5f 91       	pop	r21
    1012:	4f 91       	pop	r20
    1014:	3f 91       	pop	r19
    1016:	2f 91       	pop	r18
    1018:	0f 90       	pop	r0
    101a:	0b be       	out	0x3b, r0	; 59
    101c:	0f 90       	pop	r0
    101e:	0f be       	out	0x3f, r0	; 63
    1020:	0f 90       	pop	r0
    1022:	1f 90       	pop	r1
    1024:	18 95       	reti

00001026 <__vector_4>:
IMPLEMENT_ISR(INT3_vect, EXTERNAL_INT_5)
    1026:	1f 92       	push	r1
    1028:	0f 92       	push	r0
    102a:	0f b6       	in	r0, 0x3f	; 63
    102c:	0f 92       	push	r0
    102e:	11 24       	eor	r1, r1
    1030:	0b b6       	in	r0, 0x3b	; 59
    1032:	0f 92       	push	r0
    1034:	2f 93       	push	r18
    1036:	3f 93       	push	r19
    1038:	4f 93       	push	r20
    103a:	5f 93       	push	r21
    103c:	6f 93       	push	r22
    103e:	7f 93       	push	r23
    1040:	8f 93       	push	r24
    1042:	9f 93       	push	r25
    1044:	af 93       	push	r26
    1046:	bf 93       	push	r27
    1048:	ef 93       	push	r30
    104a:	ff 93       	push	r31
    104c:	e0 91 0c 02 	lds	r30, 0x020C	; 0x80020c <intFunc+0xa>
    1050:	f0 91 0d 02 	lds	r31, 0x020D	; 0x80020d <intFunc+0xb>
    1054:	19 95       	eicall
    1056:	ff 91       	pop	r31
    1058:	ef 91       	pop	r30
    105a:	bf 91       	pop	r27
    105c:	af 91       	pop	r26
    105e:	9f 91       	pop	r25
    1060:	8f 91       	pop	r24
    1062:	7f 91       	pop	r23
    1064:	6f 91       	pop	r22
    1066:	5f 91       	pop	r21
    1068:	4f 91       	pop	r20
    106a:	3f 91       	pop	r19
    106c:	2f 91       	pop	r18
    106e:	0f 90       	pop	r0
    1070:	0b be       	out	0x3b, r0	; 59
    1072:	0f 90       	pop	r0
    1074:	0f be       	out	0x3f, r0	; 63
    1076:	0f 90       	pop	r0
    1078:	1f 90       	pop	r1
    107a:	18 95       	reti

0000107c <__vector_5>:
IMPLEMENT_ISR(INT4_vect, EXTERNAL_INT_0)
    107c:	1f 92       	push	r1
    107e:	0f 92       	push	r0
    1080:	0f b6       	in	r0, 0x3f	; 63
    1082:	0f 92       	push	r0
    1084:	11 24       	eor	r1, r1
    1086:	0b b6       	in	r0, 0x3b	; 59
    1088:	0f 92       	push	r0
    108a:	2f 93       	push	r18
    108c:	3f 93       	push	r19
    108e:	4f 93       	push	r20
    1090:	5f 93       	push	r21
    1092:	6f 93       	push	r22
    1094:	7f 93       	push	r23
    1096:	8f 93       	push	r24
    1098:	9f 93       	push	r25
    109a:	af 93       	push	r26
    109c:	bf 93       	push	r27
    109e:	ef 93       	push	r30
    10a0:	ff 93       	push	r31
    10a2:	e0 91 02 02 	lds	r30, 0x0202	; 0x800202 <intFunc>
    10a6:	f0 91 03 02 	lds	r31, 0x0203	; 0x800203 <intFunc+0x1>
    10aa:	19 95       	eicall
    10ac:	ff 91       	pop	r31
    10ae:	ef 91       	pop	r30
    10b0:	bf 91       	pop	r27
    10b2:	af 91       	pop	r26
    10b4:	9f 91       	pop	r25
    10b6:	8f 91       	pop	r24
    10b8:	7f 91       	pop	r23
    10ba:	6f 91       	pop	r22
    10bc:	5f 91       	pop	r21
    10be:	4f 91       	pop	r20
    10c0:	3f 91       	pop	r19
    10c2:	2f 91       	pop	r18
    10c4:	0f 90       	pop	r0
    10c6:	0b be       	out	0x3b, r0	; 59
    10c8:	0f 90       	pop	r0
    10ca:	0f be       	out	0x3f, r0	; 63
    10cc:	0f 90       	pop	r0
    10ce:	1f 90       	pop	r1
    10d0:	18 95       	reti

000010d2 <__vector_6>:
IMPLEMENT_ISR(INT5_vect, EXTERNAL_INT_1)
    10d2:	1f 92       	push	r1
    10d4:	0f 92       	push	r0
    10d6:	0f b6       	in	r0, 0x3f	; 63
    10d8:	0f 92       	push	r0
    10da:	11 24       	eor	r1, r1
    10dc:	0b b6       	in	r0, 0x3b	; 59
    10de:	0f 92       	push	r0
    10e0:	2f 93       	push	r18
    10e2:	3f 93       	push	r19
    10e4:	4f 93       	push	r20
    10e6:	5f 93       	push	r21
    10e8:	6f 93       	push	r22
    10ea:	7f 93       	push	r23
    10ec:	8f 93       	push	r24
    10ee:	9f 93       	push	r25
    10f0:	af 93       	push	r26
    10f2:	bf 93       	push	r27
    10f4:	ef 93       	push	r30
    10f6:	ff 93       	push	r31
    10f8:	e0 91 04 02 	lds	r30, 0x0204	; 0x800204 <intFunc+0x2>
    10fc:	f0 91 05 02 	lds	r31, 0x0205	; 0x800205 <intFunc+0x3>
    1100:	19 95       	eicall
    1102:	ff 91       	pop	r31
    1104:	ef 91       	pop	r30
    1106:	bf 91       	pop	r27
    1108:	af 91       	pop	r26
    110a:	9f 91       	pop	r25
    110c:	8f 91       	pop	r24
    110e:	7f 91       	pop	r23
    1110:	6f 91       	pop	r22
    1112:	5f 91       	pop	r21
    1114:	4f 91       	pop	r20
    1116:	3f 91       	pop	r19
    1118:	2f 91       	pop	r18
    111a:	0f 90       	pop	r0
    111c:	0b be       	out	0x3b, r0	; 59
    111e:	0f 90       	pop	r0
    1120:	0f be       	out	0x3f, r0	; 63
    1122:	0f 90       	pop	r0
    1124:	1f 90       	pop	r1
    1126:	18 95       	reti

00001128 <__vector_7>:
IMPLEMENT_ISR(INT6_vect, EXTERNAL_INT_6)
    1128:	1f 92       	push	r1
    112a:	0f 92       	push	r0
    112c:	0f b6       	in	r0, 0x3f	; 63
    112e:	0f 92       	push	r0
    1130:	11 24       	eor	r1, r1
    1132:	0b b6       	in	r0, 0x3b	; 59
    1134:	0f 92       	push	r0
    1136:	2f 93       	push	r18
    1138:	3f 93       	push	r19
    113a:	4f 93       	push	r20
    113c:	5f 93       	push	r21
    113e:	6f 93       	push	r22
    1140:	7f 93       	push	r23
    1142:	8f 93       	push	r24
    1144:	9f 93       	push	r25
    1146:	af 93       	push	r26
    1148:	bf 93       	push	r27
    114a:	ef 93       	push	r30
    114c:	ff 93       	push	r31
    114e:	e0 91 0e 02 	lds	r30, 0x020E	; 0x80020e <intFunc+0xc>
    1152:	f0 91 0f 02 	lds	r31, 0x020F	; 0x80020f <intFunc+0xd>
    1156:	19 95       	eicall
    1158:	ff 91       	pop	r31
    115a:	ef 91       	pop	r30
    115c:	bf 91       	pop	r27
    115e:	af 91       	pop	r26
    1160:	9f 91       	pop	r25
    1162:	8f 91       	pop	r24
    1164:	7f 91       	pop	r23
    1166:	6f 91       	pop	r22
    1168:	5f 91       	pop	r21
    116a:	4f 91       	pop	r20
    116c:	3f 91       	pop	r19
    116e:	2f 91       	pop	r18
    1170:	0f 90       	pop	r0
    1172:	0b be       	out	0x3b, r0	; 59
    1174:	0f 90       	pop	r0
    1176:	0f be       	out	0x3f, r0	; 63
    1178:	0f 90       	pop	r0
    117a:	1f 90       	pop	r1
    117c:	18 95       	reti

0000117e <__vector_8>:
IMPLEMENT_ISR(INT7_vect, EXTERNAL_INT_7)
    117e:	1f 92       	push	r1
    1180:	0f 92       	push	r0
    1182:	0f b6       	in	r0, 0x3f	; 63
    1184:	0f 92       	push	r0
    1186:	11 24       	eor	r1, r1
    1188:	0b b6       	in	r0, 0x3b	; 59
    118a:	0f 92       	push	r0
    118c:	2f 93       	push	r18
    118e:	3f 93       	push	r19
    1190:	4f 93       	push	r20
    1192:	5f 93       	push	r21
    1194:	6f 93       	push	r22
    1196:	7f 93       	push	r23
    1198:	8f 93       	push	r24
    119a:	9f 93       	push	r25
    119c:	af 93       	push	r26
    119e:	bf 93       	push	r27
    11a0:	ef 93       	push	r30
    11a2:	ff 93       	push	r31
    11a4:	e0 91 10 02 	lds	r30, 0x0210	; 0x800210 <intFunc+0xe>
    11a8:	f0 91 11 02 	lds	r31, 0x0211	; 0x800211 <intFunc+0xf>
    11ac:	19 95       	eicall
    11ae:	ff 91       	pop	r31
    11b0:	ef 91       	pop	r30
    11b2:	bf 91       	pop	r27
    11b4:	af 91       	pop	r26
    11b6:	9f 91       	pop	r25
    11b8:	8f 91       	pop	r24
    11ba:	7f 91       	pop	r23
    11bc:	6f 91       	pop	r22
    11be:	5f 91       	pop	r21
    11c0:	4f 91       	pop	r20
    11c2:	3f 91       	pop	r19
    11c4:	2f 91       	pop	r18
    11c6:	0f 90       	pop	r0
    11c8:	0b be       	out	0x3b, r0	; 59
    11ca:	0f 90       	pop	r0
    11cc:	0f be       	out	0x3f, r0	; 63
    11ce:	0f 90       	pop	r0
    11d0:	1f 90       	pop	r1
    11d2:	18 95       	reti

000011d4 <__vector_23>:
	

#endif

	// busy wait
	__asm__ __volatile__ (
    11d4:	1f 92       	push	r1
    11d6:	0f 92       	push	r0
    11d8:	0f b6       	in	r0, 0x3f	; 63
    11da:	0f 92       	push	r0
    11dc:	11 24       	eor	r1, r1
    11de:	2f 93       	push	r18
    11e0:	3f 93       	push	r19
    11e2:	8f 93       	push	r24
    11e4:	9f 93       	push	r25
    11e6:	af 93       	push	r26
    11e8:	bf 93       	push	r27
    11ea:	80 91 ac 02 	lds	r24, 0x02AC	; 0x8002ac <timer0_millis>
    11ee:	90 91 ad 02 	lds	r25, 0x02AD	; 0x8002ad <timer0_millis+0x1>
    11f2:	a0 91 ae 02 	lds	r26, 0x02AE	; 0x8002ae <timer0_millis+0x2>
    11f6:	b0 91 af 02 	lds	r27, 0x02AF	; 0x8002af <timer0_millis+0x3>
    11fa:	30 91 ab 02 	lds	r19, 0x02AB	; 0x8002ab <timer0_fract>
    11fe:	23 e0       	ldi	r18, 0x03	; 3
    1200:	23 0f       	add	r18, r19
    1202:	2d 37       	cpi	r18, 0x7D	; 125
    1204:	20 f4       	brcc	.+8      	; 0x120e <__vector_23+0x3a>
    1206:	01 96       	adiw	r24, 0x01	; 1
    1208:	a1 1d       	adc	r26, r1
    120a:	b1 1d       	adc	r27, r1
    120c:	05 c0       	rjmp	.+10     	; 0x1218 <__vector_23+0x44>
    120e:	26 e8       	ldi	r18, 0x86	; 134
    1210:	23 0f       	add	r18, r19
    1212:	02 96       	adiw	r24, 0x02	; 2
    1214:	a1 1d       	adc	r26, r1
    1216:	b1 1d       	adc	r27, r1
    1218:	20 93 ab 02 	sts	0x02AB, r18	; 0x8002ab <timer0_fract>
    121c:	80 93 ac 02 	sts	0x02AC, r24	; 0x8002ac <timer0_millis>
    1220:	90 93 ad 02 	sts	0x02AD, r25	; 0x8002ad <timer0_millis+0x1>
    1224:	a0 93 ae 02 	sts	0x02AE, r26	; 0x8002ae <timer0_millis+0x2>
    1228:	b0 93 af 02 	sts	0x02AF, r27	; 0x8002af <timer0_millis+0x3>
    122c:	80 91 b0 02 	lds	r24, 0x02B0	; 0x8002b0 <timer0_overflow_count>
    1230:	90 91 b1 02 	lds	r25, 0x02B1	; 0x8002b1 <timer0_overflow_count+0x1>
    1234:	a0 91 b2 02 	lds	r26, 0x02B2	; 0x8002b2 <timer0_overflow_count+0x2>
    1238:	b0 91 b3 02 	lds	r27, 0x02B3	; 0x8002b3 <timer0_overflow_count+0x3>
    123c:	01 96       	adiw	r24, 0x01	; 1
    123e:	a1 1d       	adc	r26, r1
    1240:	b1 1d       	adc	r27, r1
    1242:	80 93 b0 02 	sts	0x02B0, r24	; 0x8002b0 <timer0_overflow_count>
    1246:	90 93 b1 02 	sts	0x02B1, r25	; 0x8002b1 <timer0_overflow_count+0x1>
    124a:	a0 93 b2 02 	sts	0x02B2, r26	; 0x8002b2 <timer0_overflow_count+0x2>
    124e:	b0 93 b3 02 	sts	0x02B3, r27	; 0x8002b3 <timer0_overflow_count+0x3>
    1252:	bf 91       	pop	r27
    1254:	af 91       	pop	r26
    1256:	9f 91       	pop	r25
    1258:	8f 91       	pop	r24
    125a:	3f 91       	pop	r19
    125c:	2f 91       	pop	r18
    125e:	0f 90       	pop	r0
    1260:	0f be       	out	0x3f, r0	; 63
    1262:	0f 90       	pop	r0
    1264:	1f 90       	pop	r1
    1266:	18 95       	reti

00001268 <micros>:
    1268:	3f b7       	in	r19, 0x3f	; 63
    126a:	f8 94       	cli
    126c:	80 91 b0 02 	lds	r24, 0x02B0	; 0x8002b0 <timer0_overflow_count>
    1270:	90 91 b1 02 	lds	r25, 0x02B1	; 0x8002b1 <timer0_overflow_count+0x1>
    1274:	a0 91 b2 02 	lds	r26, 0x02B2	; 0x8002b2 <timer0_overflow_count+0x2>
    1278:	b0 91 b3 02 	lds	r27, 0x02B3	; 0x8002b3 <timer0_overflow_count+0x3>
    127c:	26 b5       	in	r18, 0x26	; 38
    127e:	a8 9b       	sbis	0x15, 0	; 21
    1280:	05 c0       	rjmp	.+10     	; 0x128c <micros+0x24>
    1282:	2f 3f       	cpi	r18, 0xFF	; 255
    1284:	19 f0       	breq	.+6      	; 0x128c <micros+0x24>
    1286:	01 96       	adiw	r24, 0x01	; 1
    1288:	a1 1d       	adc	r26, r1
    128a:	b1 1d       	adc	r27, r1
    128c:	3f bf       	out	0x3f, r19	; 63
    128e:	ba 2f       	mov	r27, r26
    1290:	a9 2f       	mov	r26, r25
    1292:	98 2f       	mov	r25, r24
    1294:	88 27       	eor	r24, r24
    1296:	82 0f       	add	r24, r18
    1298:	91 1d       	adc	r25, r1
    129a:	a1 1d       	adc	r26, r1
    129c:	b1 1d       	adc	r27, r1
    129e:	bc 01       	movw	r22, r24
    12a0:	cd 01       	movw	r24, r26
    12a2:	42 e0       	ldi	r20, 0x02	; 2
    12a4:	66 0f       	add	r22, r22
    12a6:	77 1f       	adc	r23, r23
    12a8:	88 1f       	adc	r24, r24
    12aa:	99 1f       	adc	r25, r25
    12ac:	4a 95       	dec	r20
    12ae:	d1 f7       	brne	.-12     	; 0x12a4 <micros+0x3c>
    12b0:	08 95       	ret

000012b2 <delay>:
    12b2:	8f 92       	push	r8
    12b4:	9f 92       	push	r9
    12b6:	af 92       	push	r10
    12b8:	bf 92       	push	r11
    12ba:	cf 92       	push	r12
    12bc:	df 92       	push	r13
    12be:	ef 92       	push	r14
    12c0:	ff 92       	push	r15
    12c2:	6b 01       	movw	r12, r22
    12c4:	7c 01       	movw	r14, r24
    12c6:	d0 df       	rcall	.-96     	; 0x1268 <micros>
    12c8:	4b 01       	movw	r8, r22
    12ca:	5c 01       	movw	r10, r24
    12cc:	c1 14       	cp	r12, r1
    12ce:	d1 04       	cpc	r13, r1
    12d0:	e1 04       	cpc	r14, r1
    12d2:	f1 04       	cpc	r15, r1
    12d4:	f1 f0       	breq	.+60     	; 0x1312 <delay+0x60>
    12d6:	86 d1       	rcall	.+780    	; 0x15e4 <yield>
    12d8:	c7 df       	rcall	.-114    	; 0x1268 <micros>
    12da:	dc 01       	movw	r26, r24
    12dc:	cb 01       	movw	r24, r22
    12de:	88 19       	sub	r24, r8
    12e0:	99 09       	sbc	r25, r9
    12e2:	aa 09       	sbc	r26, r10
    12e4:	bb 09       	sbc	r27, r11
    12e6:	88 3e       	cpi	r24, 0xE8	; 232
    12e8:	93 40       	sbci	r25, 0x03	; 3
    12ea:	a1 05       	cpc	r26, r1
    12ec:	b1 05       	cpc	r27, r1
    12ee:	70 f3       	brcs	.-36     	; 0x12cc <delay+0x1a>
    12f0:	21 e0       	ldi	r18, 0x01	; 1
    12f2:	c2 1a       	sub	r12, r18
    12f4:	d1 08       	sbc	r13, r1
    12f6:	e1 08       	sbc	r14, r1
    12f8:	f1 08       	sbc	r15, r1
    12fa:	88 ee       	ldi	r24, 0xE8	; 232
    12fc:	88 0e       	add	r8, r24
    12fe:	83 e0       	ldi	r24, 0x03	; 3
    1300:	98 1e       	adc	r9, r24
    1302:	a1 1c       	adc	r10, r1
    1304:	b1 1c       	adc	r11, r1
    1306:	c1 14       	cp	r12, r1
    1308:	d1 04       	cpc	r13, r1
    130a:	e1 04       	cpc	r14, r1
    130c:	f1 04       	cpc	r15, r1
    130e:	21 f7       	brne	.-56     	; 0x12d8 <delay+0x26>
    1310:	dd cf       	rjmp	.-70     	; 0x12cc <delay+0x1a>
    1312:	ff 90       	pop	r15
    1314:	ef 90       	pop	r14
    1316:	df 90       	pop	r13
    1318:	cf 90       	pop	r12
    131a:	bf 90       	pop	r11
    131c:	af 90       	pop	r10
    131e:	9f 90       	pop	r9
    1320:	8f 90       	pop	r8
    1322:	08 95       	ret

00001324 <init>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
    1324:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
    1326:	84 b5       	in	r24, 0x24	; 36
    1328:	82 60       	ori	r24, 0x02	; 2
    132a:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
    132c:	84 b5       	in	r24, 0x24	; 36
    132e:	81 60       	ori	r24, 0x01	; 1
    1330:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
    1332:	85 b5       	in	r24, 0x25	; 37
    1334:	82 60       	ori	r24, 0x02	; 2
    1336:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
    1338:	85 b5       	in	r24, 0x25	; 37
    133a:	81 60       	ori	r24, 0x01	; 1
    133c:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
    133e:	ee e6       	ldi	r30, 0x6E	; 110
    1340:	f0 e0       	ldi	r31, 0x00	; 0
    1342:	80 81       	ld	r24, Z
    1344:	81 60       	ori	r24, 0x01	; 1
    1346:	80 83       	st	Z, r24
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
    1348:	e1 e8       	ldi	r30, 0x81	; 129
    134a:	f0 e0       	ldi	r31, 0x00	; 0
    134c:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
    134e:	80 81       	ld	r24, Z
    1350:	82 60       	ori	r24, 0x02	; 2
    1352:	80 83       	st	Z, r24
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
    1354:	80 81       	ld	r24, Z
    1356:	81 60       	ori	r24, 0x01	; 1
    1358:	80 83       	st	Z, r24
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
    135a:	e0 e8       	ldi	r30, 0x80	; 128
    135c:	f0 e0       	ldi	r31, 0x00	; 0
    135e:	80 81       	ld	r24, Z
    1360:	81 60       	ori	r24, 0x01	; 1
    1362:	80 83       	st	Z, r24

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
    1364:	e1 eb       	ldi	r30, 0xB1	; 177
    1366:	f0 e0       	ldi	r31, 0x00	; 0
    1368:	80 81       	ld	r24, Z
    136a:	84 60       	ori	r24, 0x04	; 4
    136c:	80 83       	st	Z, r24

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
    136e:	e0 eb       	ldi	r30, 0xB0	; 176
    1370:	f0 e0       	ldi	r31, 0x00	; 0
    1372:	80 81       	ld	r24, Z
    1374:	81 60       	ori	r24, 0x01	; 1
    1376:	80 83       	st	Z, r24
//#else
	// Timer 2 not finished (may not be present on this CPU)
#endif

#if defined(TCCR3B) && defined(CS31) && defined(WGM30)
	sbi(TCCR3B, CS31);		// set timer 3 prescale factor to 64
    1378:	e1 e9       	ldi	r30, 0x91	; 145
    137a:	f0 e0       	ldi	r31, 0x00	; 0
    137c:	80 81       	ld	r24, Z
    137e:	82 60       	ori	r24, 0x02	; 2
    1380:	80 83       	st	Z, r24
	sbi(TCCR3B, CS30);
    1382:	80 81       	ld	r24, Z
    1384:	81 60       	ori	r24, 0x01	; 1
    1386:	80 83       	st	Z, r24
	sbi(TCCR3A, WGM30);		// put timer 3 in 8-bit phase correct pwm mode
    1388:	e0 e9       	ldi	r30, 0x90	; 144
    138a:	f0 e0       	ldi	r31, 0x00	; 0
    138c:	80 81       	ld	r24, Z
    138e:	81 60       	ori	r24, 0x01	; 1
    1390:	80 83       	st	Z, r24
	sbi(TCCR4D, WGM40);		// put timer 4 in phase- and frequency-correct PWM mode	
	sbi(TCCR4A, PWM4A);		// enable PWM mode for comparator OCR4A
	sbi(TCCR4C, PWM4D);		// enable PWM mode for comparator OCR4D
#else /* beginning of timer4 block for ATMEGA1280 and ATMEGA2560 */
#if defined(TCCR4B) && defined(CS41) && defined(WGM40)
	sbi(TCCR4B, CS41);		// set timer 4 prescale factor to 64
    1392:	e1 ea       	ldi	r30, 0xA1	; 161
    1394:	f0 e0       	ldi	r31, 0x00	; 0
    1396:	80 81       	ld	r24, Z
    1398:	82 60       	ori	r24, 0x02	; 2
    139a:	80 83       	st	Z, r24
	sbi(TCCR4B, CS40);
    139c:	80 81       	ld	r24, Z
    139e:	81 60       	ori	r24, 0x01	; 1
    13a0:	80 83       	st	Z, r24
	sbi(TCCR4A, WGM40);		// put timer 4 in 8-bit phase correct pwm mode
    13a2:	e0 ea       	ldi	r30, 0xA0	; 160
    13a4:	f0 e0       	ldi	r31, 0x00	; 0
    13a6:	80 81       	ld	r24, Z
    13a8:	81 60       	ori	r24, 0x01	; 1
    13aa:	80 83       	st	Z, r24
#endif
#endif /* end timer4 block for ATMEGA1280/2560 and similar */	

#if defined(TCCR5B) && defined(CS51) && defined(WGM50)
	sbi(TCCR5B, CS51);		// set timer 5 prescale factor to 64
    13ac:	e1 e2       	ldi	r30, 0x21	; 33
    13ae:	f1 e0       	ldi	r31, 0x01	; 1
    13b0:	80 81       	ld	r24, Z
    13b2:	82 60       	ori	r24, 0x02	; 2
    13b4:	80 83       	st	Z, r24
	sbi(TCCR5B, CS50);
    13b6:	80 81       	ld	r24, Z
    13b8:	81 60       	ori	r24, 0x01	; 1
    13ba:	80 83       	st	Z, r24
	sbi(TCCR5A, WGM50);		// put timer 5 in 8-bit phase correct pwm mode
    13bc:	e0 e2       	ldi	r30, 0x20	; 32
    13be:	f1 e0       	ldi	r31, 0x01	; 1
    13c0:	80 81       	ld	r24, Z
    13c2:	81 60       	ori	r24, 0x01	; 1
    13c4:	80 83       	st	Z, r24
#endif

#if defined(ADCSRA)
	// set a2d prescaler so we are inside the desired 50-200 KHz range.
	#if F_CPU >= 16000000 // 16 MHz / 128 = 125 KHz
		sbi(ADCSRA, ADPS2);
    13c6:	ea e7       	ldi	r30, 0x7A	; 122
    13c8:	f0 e0       	ldi	r31, 0x00	; 0
    13ca:	80 81       	ld	r24, Z
    13cc:	84 60       	ori	r24, 0x04	; 4
    13ce:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS1);
    13d0:	80 81       	ld	r24, Z
    13d2:	82 60       	ori	r24, 0x02	; 2
    13d4:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS0);
    13d6:	80 81       	ld	r24, Z
    13d8:	81 60       	ori	r24, 0x01	; 1
    13da:	80 83       	st	Z, r24
		cbi(ADCSRA, ADPS2);
		cbi(ADCSRA, ADPS1);
		sbi(ADCSRA, ADPS0);
	#endif
	// enable a2d conversions
	sbi(ADCSRA, ADEN);
    13dc:	80 81       	ld	r24, Z
    13de:	80 68       	ori	r24, 0x80	; 128
    13e0:	80 83       	st	Z, r24
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
    13e2:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7c00c1>
    13e6:	08 95       	ret

000013e8 <turnOffPWM>:
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
    13e8:	90 e0       	ldi	r25, 0x00	; 0
    13ea:	fc 01       	movw	r30, r24
    13ec:	31 97       	sbiw	r30, 0x01	; 1
    13ee:	e2 31       	cpi	r30, 0x12	; 18
    13f0:	f1 05       	cpc	r31, r1
    13f2:	08 f0       	brcs	.+2      	; 0x13f6 <turnOffPWM+0xe>
    13f4:	4d c0       	rjmp	.+154    	; 0x1490 <turnOffPWM+0xa8>
    13f6:	88 27       	eor	r24, r24
    13f8:	e7 58       	subi	r30, 0x87	; 135
    13fa:	ff 4f       	sbci	r31, 0xFF	; 255
    13fc:	8f 4f       	sbci	r24, 0xFF	; 255
    13fe:	40 c1       	rjmp	.+640    	; 0x1680 <__tablejump2__>
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
    1400:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7c0080>
    1404:	8f 77       	andi	r24, 0x7F	; 127
    1406:	03 c0       	rjmp	.+6      	; 0x140e <turnOffPWM+0x26>
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
    1408:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7c0080>
    140c:	8f 7d       	andi	r24, 0xDF	; 223
    140e:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7c0080>
    1412:	08 95       	ret
		#endif
		#if defined(TCCR1A) && defined(COM1C1)
		case TIMER1C:   cbi(TCCR1A, COM1C1);    break;
    1414:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7c0080>
    1418:	87 7f       	andi	r24, 0xF7	; 247
    141a:	f9 cf       	rjmp	.-14     	; 0x140e <turnOffPWM+0x26>
		#if defined(TCCR2) && defined(COM21)
		case  TIMER2:   cbi(TCCR2, COM21);      break;
		#endif
		
		#if defined(TCCR0A) && defined(COM0A1)
		case  TIMER0A:  cbi(TCCR0A, COM0A1);    break;
    141c:	84 b5       	in	r24, 0x24	; 36
    141e:	8f 77       	andi	r24, 0x7F	; 127
    1420:	02 c0       	rjmp	.+4      	; 0x1426 <turnOffPWM+0x3e>
		#endif
		
		#if defined(TCCR0A) && defined(COM0B1)
		case  TIMER0B:  cbi(TCCR0A, COM0B1);    break;
    1422:	84 b5       	in	r24, 0x24	; 36
    1424:	8f 7d       	andi	r24, 0xDF	; 223
    1426:	84 bd       	out	0x24, r24	; 36
    1428:	08 95       	ret
		#endif
		#if defined(TCCR2A) && defined(COM2A1)
		case  TIMER2A:  cbi(TCCR2A, COM2A1);    break;
    142a:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7c00b0>
    142e:	8f 77       	andi	r24, 0x7F	; 127
    1430:	03 c0       	rjmp	.+6      	; 0x1438 <turnOffPWM+0x50>
		#endif
		#if defined(TCCR2A) && defined(COM2B1)
		case  TIMER2B:  cbi(TCCR2A, COM2B1);    break;
    1432:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7c00b0>
    1436:	8f 7d       	andi	r24, 0xDF	; 223
    1438:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7c00b0>
    143c:	08 95       	ret
		#endif
		
		#if defined(TCCR3A) && defined(COM3A1)
		case  TIMER3A:  cbi(TCCR3A, COM3A1);    break;
    143e:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__TEXT_REGION_LENGTH__+0x7c0090>
    1442:	8f 77       	andi	r24, 0x7F	; 127
    1444:	07 c0       	rjmp	.+14     	; 0x1454 <turnOffPWM+0x6c>
		#endif
		#if defined(TCCR3A) && defined(COM3B1)
		case  TIMER3B:  cbi(TCCR3A, COM3B1);    break;
    1446:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__TEXT_REGION_LENGTH__+0x7c0090>
    144a:	8f 7d       	andi	r24, 0xDF	; 223
    144c:	03 c0       	rjmp	.+6      	; 0x1454 <turnOffPWM+0x6c>
		#endif
		#if defined(TCCR3A) && defined(COM3C1)
		case  TIMER3C:  cbi(TCCR3A, COM3C1);    break;
    144e:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__TEXT_REGION_LENGTH__+0x7c0090>
    1452:	87 7f       	andi	r24, 0xF7	; 247
    1454:	80 93 90 00 	sts	0x0090, r24	; 0x800090 <__TEXT_REGION_LENGTH__+0x7c0090>
    1458:	08 95       	ret
		#endif

		#if defined(TCCR4A) && defined(COM4A1)
		case  TIMER4A:  cbi(TCCR4A, COM4A1);    break;
    145a:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7c00a0>
    145e:	8f 77       	andi	r24, 0x7F	; 127
    1460:	07 c0       	rjmp	.+14     	; 0x1470 <turnOffPWM+0x88>
		#endif					
		#if defined(TCCR4A) && defined(COM4B1)
		case  TIMER4B:  cbi(TCCR4A, COM4B1);    break;
    1462:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7c00a0>
    1466:	8f 7d       	andi	r24, 0xDF	; 223
    1468:	03 c0       	rjmp	.+6      	; 0x1470 <turnOffPWM+0x88>
		#endif
		#if defined(TCCR4A) && defined(COM4C1)
		case  TIMER4C:  cbi(TCCR4A, COM4C1);    break;
    146a:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7c00a0>
    146e:	87 7f       	andi	r24, 0xF7	; 247
    1470:	80 93 a0 00 	sts	0x00A0, r24	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7c00a0>
    1474:	08 95       	ret
		#if defined(TCCR4C) && defined(COM4D1)
		case TIMER4D:	cbi(TCCR4C, COM4D1);	break;
		#endif			
			
		#if defined(TCCR5A)
		case  TIMER5A:  cbi(TCCR5A, COM5A1);    break;
    1476:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <__TEXT_REGION_LENGTH__+0x7c0120>
    147a:	8f 77       	andi	r24, 0x7F	; 127
    147c:	07 c0       	rjmp	.+14     	; 0x148c <turnOffPWM+0xa4>
		case  TIMER5B:  cbi(TCCR5A, COM5B1);    break;
    147e:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <__TEXT_REGION_LENGTH__+0x7c0120>
    1482:	8f 7d       	andi	r24, 0xDF	; 223
    1484:	03 c0       	rjmp	.+6      	; 0x148c <turnOffPWM+0xa4>
		case  TIMER5C:  cbi(TCCR5A, COM5C1);    break;
    1486:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <__TEXT_REGION_LENGTH__+0x7c0120>
    148a:	87 7f       	andi	r24, 0xF7	; 247
    148c:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <__TEXT_REGION_LENGTH__+0x7c0120>
    1490:	08 95       	ret

00001492 <pinMode>:
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
    1492:	cf 93       	push	r28
    1494:	df 93       	push	r29
	uint8_t bit = digitalPinToBitMask(pin);
    1496:	90 e0       	ldi	r25, 0x00	; 0
    1498:	fc 01       	movw	r30, r24
    149a:	e4 5a       	subi	r30, 0xA4	; 164
    149c:	fe 4f       	sbci	r31, 0xFE	; 254
    149e:	24 91       	lpm	r18, Z
	uint8_t port = digitalPinToPort(pin);
    14a0:	fc 01       	movw	r30, r24
    14a2:	ee 55       	subi	r30, 0x5E	; 94
    14a4:	fe 4f       	sbci	r31, 0xFE	; 254
    14a6:	84 91       	lpm	r24, Z
	volatile uint8_t *reg, *out;

	if (port == NOT_A_PIN) return;
    14a8:	88 23       	and	r24, r24
    14aa:	61 f1       	breq	.+88     	; 0x1504 <pinMode+0x72>

	// JWS: can I let the optimizer do this?
	reg = portModeRegister(port);
    14ac:	90 e0       	ldi	r25, 0x00	; 0
    14ae:	88 0f       	add	r24, r24
    14b0:	99 1f       	adc	r25, r25
    14b2:	fc 01       	movw	r30, r24
    14b4:	ee 5f       	subi	r30, 0xFE	; 254
    14b6:	fd 4f       	sbci	r31, 0xFD	; 253
    14b8:	c5 91       	lpm	r28, Z+
    14ba:	d4 91       	lpm	r29, Z
	out = portOutputRegister(port);
    14bc:	fc 01       	movw	r30, r24
    14be:	e8 51       	subi	r30, 0x18	; 24
    14c0:	fe 4f       	sbci	r31, 0xFE	; 254
    14c2:	a5 91       	lpm	r26, Z+
    14c4:	b4 91       	lpm	r27, Z

	if (mode == INPUT) { 
    14c6:	61 11       	cpse	r22, r1
    14c8:	09 c0       	rjmp	.+18     	; 0x14dc <pinMode+0x4a>
		uint8_t oldSREG = SREG;
    14ca:	9f b7       	in	r25, 0x3f	; 63
                cli();
    14cc:	f8 94       	cli
		*reg &= ~bit;
    14ce:	88 81       	ld	r24, Y
    14d0:	20 95       	com	r18
    14d2:	82 23       	and	r24, r18
    14d4:	88 83       	st	Y, r24
		*out &= ~bit;
    14d6:	ec 91       	ld	r30, X
    14d8:	2e 23       	and	r18, r30
    14da:	0b c0       	rjmp	.+22     	; 0x14f2 <pinMode+0x60>
		SREG = oldSREG;
	} else if (mode == INPUT_PULLUP) {
    14dc:	62 30       	cpi	r22, 0x02	; 2
    14de:	61 f4       	brne	.+24     	; 0x14f8 <pinMode+0x66>
		uint8_t oldSREG = SREG;
    14e0:	9f b7       	in	r25, 0x3f	; 63
                cli();
    14e2:	f8 94       	cli
		*reg &= ~bit;
    14e4:	88 81       	ld	r24, Y
    14e6:	32 2f       	mov	r19, r18
    14e8:	30 95       	com	r19
    14ea:	83 23       	and	r24, r19
    14ec:	88 83       	st	Y, r24
		*out |= bit;
    14ee:	ec 91       	ld	r30, X
    14f0:	2e 2b       	or	r18, r30
    14f2:	2c 93       	st	X, r18
		SREG = oldSREG;
    14f4:	9f bf       	out	0x3f, r25	; 63
    14f6:	06 c0       	rjmp	.+12     	; 0x1504 <pinMode+0x72>
	} else {
		uint8_t oldSREG = SREG;
    14f8:	8f b7       	in	r24, 0x3f	; 63
                cli();
    14fa:	f8 94       	cli
		*reg |= bit;
    14fc:	e8 81       	ld	r30, Y
    14fe:	2e 2b       	or	r18, r30
    1500:	28 83       	st	Y, r18
		SREG = oldSREG;
    1502:	8f bf       	out	0x3f, r24	; 63
	}
}
    1504:	df 91       	pop	r29
    1506:	cf 91       	pop	r28
    1508:	08 95       	ret

0000150a <digitalWrite>:
		#endif
	}
}

void digitalWrite(uint8_t pin, uint8_t val)
{
    150a:	1f 93       	push	r17
    150c:	cf 93       	push	r28
    150e:	df 93       	push	r29
	uint8_t timer = digitalPinToTimer(pin);
    1510:	28 2f       	mov	r18, r24
    1512:	30 e0       	ldi	r19, 0x00	; 0
    1514:	f9 01       	movw	r30, r18
    1516:	ea 5e       	subi	r30, 0xEA	; 234
    1518:	fe 4f       	sbci	r31, 0xFE	; 254
    151a:	84 91       	lpm	r24, Z
	uint8_t bit = digitalPinToBitMask(pin);
    151c:	f9 01       	movw	r30, r18
    151e:	e4 5a       	subi	r30, 0xA4	; 164
    1520:	fe 4f       	sbci	r31, 0xFE	; 254
    1522:	d4 91       	lpm	r29, Z
	uint8_t port = digitalPinToPort(pin);
    1524:	f9 01       	movw	r30, r18
    1526:	ee 55       	subi	r30, 0x5E	; 94
    1528:	fe 4f       	sbci	r31, 0xFE	; 254
    152a:	c4 91       	lpm	r28, Z
	volatile uint8_t *out;

	if (port == NOT_A_PIN) return;
    152c:	cc 23       	and	r28, r28
    152e:	b9 f0       	breq	.+46     	; 0x155e <digitalWrite+0x54>
    1530:	16 2f       	mov	r17, r22

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    1532:	81 11       	cpse	r24, r1
    1534:	59 df       	rcall	.-334    	; 0x13e8 <turnOffPWM>

	out = portOutputRegister(port);
    1536:	ec 2f       	mov	r30, r28
    1538:	f0 e0       	ldi	r31, 0x00	; 0
    153a:	ee 0f       	add	r30, r30
    153c:	ff 1f       	adc	r31, r31
    153e:	e8 51       	subi	r30, 0x18	; 24
    1540:	fe 4f       	sbci	r31, 0xFE	; 254
    1542:	a5 91       	lpm	r26, Z+
    1544:	b4 91       	lpm	r27, Z

	uint8_t oldSREG = SREG;
    1546:	9f b7       	in	r25, 0x3f	; 63
	cli();
    1548:	f8 94       	cli

	if (val == LOW) {
    154a:	11 11       	cpse	r17, r1
    154c:	04 c0       	rjmp	.+8      	; 0x1556 <digitalWrite+0x4c>
		*out &= ~bit;
    154e:	8c 91       	ld	r24, X
    1550:	d0 95       	com	r29
    1552:	d8 23       	and	r29, r24
    1554:	02 c0       	rjmp	.+4      	; 0x155a <digitalWrite+0x50>
	} else {
		*out |= bit;
    1556:	ec 91       	ld	r30, X
    1558:	de 2b       	or	r29, r30
    155a:	dc 93       	st	X, r29
	}

	SREG = oldSREG;
    155c:	9f bf       	out	0x3f, r25	; 63
}
    155e:	df 91       	pop	r29
    1560:	cf 91       	pop	r28
    1562:	1f 91       	pop	r17
    1564:	08 95       	ret

00001566 <_Z3maplllll>:
  long diff = howbig - howsmall;
  return random(diff) + howsmall;
}

long map(long x, long in_min, long in_max, long out_min, long out_max)
{
    1566:	4f 92       	push	r4
    1568:	5f 92       	push	r5
    156a:	6f 92       	push	r6
    156c:	7f 92       	push	r7
    156e:	af 92       	push	r10
    1570:	bf 92       	push	r11
    1572:	cf 92       	push	r12
    1574:	df 92       	push	r13
    1576:	ef 92       	push	r14
    1578:	ff 92       	push	r15
    157a:	0f 93       	push	r16
    157c:	1f 93       	push	r17
    157e:	cf 93       	push	r28
    1580:	df 93       	push	r29
    1582:	cd b7       	in	r28, 0x3d	; 61
    1584:	de b7       	in	r29, 0x3e	; 62
    1586:	29 01       	movw	r4, r18
    1588:	3a 01       	movw	r6, r20
  return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
    158a:	9b 01       	movw	r18, r22
    158c:	ac 01       	movw	r20, r24
    158e:	24 19       	sub	r18, r4
    1590:	35 09       	sbc	r19, r5
    1592:	46 09       	sbc	r20, r6
    1594:	57 09       	sbc	r21, r7
    1596:	8a 89       	ldd	r24, Y+18	; 0x12
    1598:	9b 89       	ldd	r25, Y+19	; 0x13
    159a:	ac 89       	ldd	r26, Y+20	; 0x14
    159c:	bd 89       	ldd	r27, Y+21	; 0x15
    159e:	bc 01       	movw	r22, r24
    15a0:	cd 01       	movw	r24, r26
    15a2:	6a 19       	sub	r22, r10
    15a4:	7b 09       	sbc	r23, r11
    15a6:	8c 09       	sbc	r24, r12
    15a8:	9d 09       	sbc	r25, r13
    15aa:	1d d0       	rcall	.+58     	; 0x15e6 <__mulsi3>
    15ac:	a8 01       	movw	r20, r16
    15ae:	97 01       	movw	r18, r14
    15b0:	24 19       	sub	r18, r4
    15b2:	35 09       	sbc	r19, r5
    15b4:	46 09       	sbc	r20, r6
    15b6:	57 09       	sbc	r21, r7
    15b8:	47 d0       	rcall	.+142    	; 0x1648 <__divmodsi4>
    15ba:	ca 01       	movw	r24, r20
    15bc:	b9 01       	movw	r22, r18
    15be:	6a 0d       	add	r22, r10
    15c0:	7b 1d       	adc	r23, r11
    15c2:	8c 1d       	adc	r24, r12
    15c4:	9d 1d       	adc	r25, r13
}
    15c6:	df 91       	pop	r29
    15c8:	cf 91       	pop	r28
    15ca:	1f 91       	pop	r17
    15cc:	0f 91       	pop	r16
    15ce:	ff 90       	pop	r15
    15d0:	ef 90       	pop	r14
    15d2:	df 90       	pop	r13
    15d4:	cf 90       	pop	r12
    15d6:	bf 90       	pop	r11
    15d8:	af 90       	pop	r10
    15da:	7f 90       	pop	r7
    15dc:	6f 90       	pop	r6
    15de:	5f 90       	pop	r5
    15e0:	4f 90       	pop	r4
    15e2:	08 95       	ret

000015e4 <yield>:
 * libraries or sketches that supports cooperative threads.
 *
 * Its defined as a weak symbol and it can be redefined to implement a
 * real cooperative scheduler.
 */
static void __empty() {
    15e4:	08 95       	ret

000015e6 <__mulsi3>:
    15e6:	db 01       	movw	r26, r22
    15e8:	8f 93       	push	r24
    15ea:	9f 93       	push	r25
    15ec:	51 d0       	rcall	.+162    	; 0x1690 <__muluhisi3>
    15ee:	bf 91       	pop	r27
    15f0:	af 91       	pop	r26
    15f2:	a2 9f       	mul	r26, r18
    15f4:	80 0d       	add	r24, r0
    15f6:	91 1d       	adc	r25, r1
    15f8:	a3 9f       	mul	r26, r19
    15fa:	90 0d       	add	r25, r0
    15fc:	b2 9f       	mul	r27, r18
    15fe:	90 0d       	add	r25, r0
    1600:	11 24       	eor	r1, r1
    1602:	08 95       	ret

00001604 <__udivmodsi4>:
    1604:	a1 e2       	ldi	r26, 0x21	; 33
    1606:	1a 2e       	mov	r1, r26
    1608:	aa 1b       	sub	r26, r26
    160a:	bb 1b       	sub	r27, r27
    160c:	fd 01       	movw	r30, r26
    160e:	0d c0       	rjmp	.+26     	; 0x162a <__udivmodsi4_ep>

00001610 <__udivmodsi4_loop>:
    1610:	aa 1f       	adc	r26, r26
    1612:	bb 1f       	adc	r27, r27
    1614:	ee 1f       	adc	r30, r30
    1616:	ff 1f       	adc	r31, r31
    1618:	a2 17       	cp	r26, r18
    161a:	b3 07       	cpc	r27, r19
    161c:	e4 07       	cpc	r30, r20
    161e:	f5 07       	cpc	r31, r21
    1620:	20 f0       	brcs	.+8      	; 0x162a <__udivmodsi4_ep>
    1622:	a2 1b       	sub	r26, r18
    1624:	b3 0b       	sbc	r27, r19
    1626:	e4 0b       	sbc	r30, r20
    1628:	f5 0b       	sbc	r31, r21

0000162a <__udivmodsi4_ep>:
    162a:	66 1f       	adc	r22, r22
    162c:	77 1f       	adc	r23, r23
    162e:	88 1f       	adc	r24, r24
    1630:	99 1f       	adc	r25, r25
    1632:	1a 94       	dec	r1
    1634:	69 f7       	brne	.-38     	; 0x1610 <__udivmodsi4_loop>
    1636:	60 95       	com	r22
    1638:	70 95       	com	r23
    163a:	80 95       	com	r24
    163c:	90 95       	com	r25
    163e:	9b 01       	movw	r18, r22
    1640:	ac 01       	movw	r20, r24
    1642:	bd 01       	movw	r22, r26
    1644:	cf 01       	movw	r24, r30
    1646:	08 95       	ret

00001648 <__divmodsi4>:
    1648:	05 2e       	mov	r0, r21
    164a:	97 fb       	bst	r25, 7
    164c:	16 f4       	brtc	.+4      	; 0x1652 <__divmodsi4+0xa>
    164e:	00 94       	com	r0
    1650:	0f d0       	rcall	.+30     	; 0x1670 <__negsi2>
    1652:	57 fd       	sbrc	r21, 7
    1654:	05 d0       	rcall	.+10     	; 0x1660 <__divmodsi4_neg2>
    1656:	d6 df       	rcall	.-84     	; 0x1604 <__udivmodsi4>
    1658:	07 fc       	sbrc	r0, 7
    165a:	02 d0       	rcall	.+4      	; 0x1660 <__divmodsi4_neg2>
    165c:	46 f4       	brtc	.+16     	; 0x166e <__divmodsi4_exit>
    165e:	08 c0       	rjmp	.+16     	; 0x1670 <__negsi2>

00001660 <__divmodsi4_neg2>:
    1660:	50 95       	com	r21
    1662:	40 95       	com	r20
    1664:	30 95       	com	r19
    1666:	21 95       	neg	r18
    1668:	3f 4f       	sbci	r19, 0xFF	; 255
    166a:	4f 4f       	sbci	r20, 0xFF	; 255
    166c:	5f 4f       	sbci	r21, 0xFF	; 255

0000166e <__divmodsi4_exit>:
    166e:	08 95       	ret

00001670 <__negsi2>:
    1670:	90 95       	com	r25
    1672:	80 95       	com	r24
    1674:	70 95       	com	r23
    1676:	61 95       	neg	r22
    1678:	7f 4f       	sbci	r23, 0xFF	; 255
    167a:	8f 4f       	sbci	r24, 0xFF	; 255
    167c:	9f 4f       	sbci	r25, 0xFF	; 255
    167e:	08 95       	ret

00001680 <__tablejump2__>:
    1680:	ee 0f       	add	r30, r30
    1682:	ff 1f       	adc	r31, r31
    1684:	88 1f       	adc	r24, r24
    1686:	8b bf       	out	0x3b, r24	; 59
    1688:	07 90       	elpm	r0, Z+
    168a:	f6 91       	elpm	r31, Z
    168c:	e0 2d       	mov	r30, r0
    168e:	19 94       	eijmp

00001690 <__muluhisi3>:
    1690:	09 d0       	rcall	.+18     	; 0x16a4 <__umulhisi3>
    1692:	a5 9f       	mul	r26, r21
    1694:	90 0d       	add	r25, r0
    1696:	b4 9f       	mul	r27, r20
    1698:	90 0d       	add	r25, r0
    169a:	a4 9f       	mul	r26, r20
    169c:	80 0d       	add	r24, r0
    169e:	91 1d       	adc	r25, r1
    16a0:	11 24       	eor	r1, r1
    16a2:	08 95       	ret

000016a4 <__umulhisi3>:
    16a4:	a2 9f       	mul	r26, r18
    16a6:	b0 01       	movw	r22, r0
    16a8:	b3 9f       	mul	r27, r19
    16aa:	c0 01       	movw	r24, r0
    16ac:	a3 9f       	mul	r26, r19
    16ae:	70 0d       	add	r23, r0
    16b0:	81 1d       	adc	r24, r1
    16b2:	11 24       	eor	r1, r1
    16b4:	91 1d       	adc	r25, r1
    16b6:	b2 9f       	mul	r27, r18
    16b8:	70 0d       	add	r23, r0
    16ba:	81 1d       	adc	r24, r1
    16bc:	11 24       	eor	r1, r1
    16be:	91 1d       	adc	r25, r1
    16c0:	08 95       	ret

000016c2 <_exit>:
    16c2:	f8 94       	cli

000016c4 <__stop_program>:
    16c4:	ff cf       	rjmp	.-2      	; 0x16c4 <__stop_program>
