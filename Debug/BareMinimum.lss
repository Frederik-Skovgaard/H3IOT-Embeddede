
BareMinimum.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000002  00800200  000006c0  00000754  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000006c0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000f  00800202  00800202  00000756  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000756  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000788  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000d8  00000000  00000000  000007c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001a82  00000000  00000000  000008a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000fa5  00000000  00000000  00002322  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000a1c  00000000  00000000  000032c7  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001fc  00000000  00000000  00003ce4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000a97  00000000  00000000  00003ee0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000008af  00000000  00000000  00004977  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000098  00000000  00000000  00005226  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	06 c1       	rjmp	.+524    	; 0x20e <__ctors_end>
   2:	00 00       	nop
   4:	23 c1       	rjmp	.+582    	; 0x24c <__bad_interrupt>
   6:	00 00       	nop
   8:	21 c1       	rjmp	.+578    	; 0x24c <__bad_interrupt>
   a:	00 00       	nop
   c:	1f c1       	rjmp	.+574    	; 0x24c <__bad_interrupt>
   e:	00 00       	nop
  10:	1d c1       	rjmp	.+570    	; 0x24c <__bad_interrupt>
  12:	00 00       	nop
  14:	1b c1       	rjmp	.+566    	; 0x24c <__bad_interrupt>
  16:	00 00       	nop
  18:	19 c1       	rjmp	.+562    	; 0x24c <__bad_interrupt>
  1a:	00 00       	nop
  1c:	17 c1       	rjmp	.+558    	; 0x24c <__bad_interrupt>
  1e:	00 00       	nop
  20:	15 c1       	rjmp	.+554    	; 0x24c <__bad_interrupt>
  22:	00 00       	nop
  24:	13 c1       	rjmp	.+550    	; 0x24c <__bad_interrupt>
  26:	00 00       	nop
  28:	11 c1       	rjmp	.+546    	; 0x24c <__bad_interrupt>
  2a:	00 00       	nop
  2c:	0f c1       	rjmp	.+542    	; 0x24c <__bad_interrupt>
  2e:	00 00       	nop
  30:	0d c1       	rjmp	.+538    	; 0x24c <__bad_interrupt>
  32:	00 00       	nop
  34:	0b c1       	rjmp	.+534    	; 0x24c <__bad_interrupt>
  36:	00 00       	nop
  38:	09 c1       	rjmp	.+530    	; 0x24c <__bad_interrupt>
  3a:	00 00       	nop
  3c:	07 c1       	rjmp	.+526    	; 0x24c <__bad_interrupt>
  3e:	00 00       	nop
  40:	05 c1       	rjmp	.+522    	; 0x24c <__bad_interrupt>
  42:	00 00       	nop
  44:	03 c1       	rjmp	.+518    	; 0x24c <__bad_interrupt>
  46:	00 00       	nop
  48:	01 c1       	rjmp	.+514    	; 0x24c <__bad_interrupt>
  4a:	00 00       	nop
  4c:	ff c0       	rjmp	.+510    	; 0x24c <__bad_interrupt>
  4e:	00 00       	nop
  50:	fd c0       	rjmp	.+506    	; 0x24c <__bad_interrupt>
  52:	00 00       	nop
  54:	fb c0       	rjmp	.+502    	; 0x24c <__bad_interrupt>
  56:	00 00       	nop
  58:	f9 c0       	rjmp	.+498    	; 0x24c <__bad_interrupt>
  5a:	00 00       	nop
  5c:	89 c1       	rjmp	.+786    	; 0x370 <__vector_23>
  5e:	00 00       	nop
  60:	f5 c0       	rjmp	.+490    	; 0x24c <__bad_interrupt>
  62:	00 00       	nop
  64:	f3 c0       	rjmp	.+486    	; 0x24c <__bad_interrupt>
  66:	00 00       	nop
  68:	f1 c0       	rjmp	.+482    	; 0x24c <__bad_interrupt>
  6a:	00 00       	nop
  6c:	ef c0       	rjmp	.+478    	; 0x24c <__bad_interrupt>
  6e:	00 00       	nop
  70:	ed c0       	rjmp	.+474    	; 0x24c <__bad_interrupt>
  72:	00 00       	nop
  74:	eb c0       	rjmp	.+470    	; 0x24c <__bad_interrupt>
  76:	00 00       	nop
  78:	e9 c0       	rjmp	.+466    	; 0x24c <__bad_interrupt>
  7a:	00 00       	nop
  7c:	e7 c0       	rjmp	.+462    	; 0x24c <__bad_interrupt>
  7e:	00 00       	nop
  80:	e5 c0       	rjmp	.+458    	; 0x24c <__bad_interrupt>
  82:	00 00       	nop
  84:	e3 c0       	rjmp	.+454    	; 0x24c <__bad_interrupt>
  86:	00 00       	nop
  88:	e1 c0       	rjmp	.+450    	; 0x24c <__bad_interrupt>
  8a:	00 00       	nop
  8c:	df c0       	rjmp	.+446    	; 0x24c <__bad_interrupt>
  8e:	00 00       	nop
  90:	dd c0       	rjmp	.+442    	; 0x24c <__bad_interrupt>
  92:	00 00       	nop
  94:	db c0       	rjmp	.+438    	; 0x24c <__bad_interrupt>
  96:	00 00       	nop
  98:	d9 c0       	rjmp	.+434    	; 0x24c <__bad_interrupt>
  9a:	00 00       	nop
  9c:	d7 c0       	rjmp	.+430    	; 0x24c <__bad_interrupt>
  9e:	00 00       	nop
  a0:	d5 c0       	rjmp	.+426    	; 0x24c <__bad_interrupt>
  a2:	00 00       	nop
  a4:	d3 c0       	rjmp	.+422    	; 0x24c <__bad_interrupt>
  a6:	00 00       	nop
  a8:	d1 c0       	rjmp	.+418    	; 0x24c <__bad_interrupt>
  aa:	00 00       	nop
  ac:	cf c0       	rjmp	.+414    	; 0x24c <__bad_interrupt>
  ae:	00 00       	nop
  b0:	cd c0       	rjmp	.+410    	; 0x24c <__bad_interrupt>
  b2:	00 00       	nop
  b4:	cb c0       	rjmp	.+406    	; 0x24c <__bad_interrupt>
  b6:	00 00       	nop
  b8:	c9 c0       	rjmp	.+402    	; 0x24c <__bad_interrupt>
  ba:	00 00       	nop
  bc:	c7 c0       	rjmp	.+398    	; 0x24c <__bad_interrupt>
  be:	00 00       	nop
  c0:	c5 c0       	rjmp	.+394    	; 0x24c <__bad_interrupt>
  c2:	00 00       	nop
  c4:	c3 c0       	rjmp	.+390    	; 0x24c <__bad_interrupt>
  c6:	00 00       	nop
  c8:	c1 c0       	rjmp	.+386    	; 0x24c <__bad_interrupt>
  ca:	00 00       	nop
  cc:	bf c0       	rjmp	.+382    	; 0x24c <__bad_interrupt>
  ce:	00 00       	nop
  d0:	bd c0       	rjmp	.+378    	; 0x24c <__bad_interrupt>
  d2:	00 00       	nop
  d4:	bb c0       	rjmp	.+374    	; 0x24c <__bad_interrupt>
  d6:	00 00       	nop
  d8:	b9 c0       	rjmp	.+370    	; 0x24c <__bad_interrupt>
  da:	00 00       	nop
  dc:	b7 c0       	rjmp	.+366    	; 0x24c <__bad_interrupt>
  de:	00 00       	nop
  e0:	b5 c0       	rjmp	.+362    	; 0x24c <__bad_interrupt>
  e2:	00 00       	nop
  e4:	8a 02       	muls	r24, r26
  e6:	8d 02       	muls	r24, r29
  e8:	7c 02       	muls	r23, r28
  ea:	80 02       	muls	r24, r16
  ec:	86 02       	muls	r24, r22
  ee:	c4 02       	muls	r28, r20
  f0:	91 02       	muls	r25, r17
  f2:	95 02       	muls	r25, r21
  f4:	9b 02       	muls	r25, r27
  f6:	9f 02       	muls	r25, r31
  f8:	a3 02       	muls	r26, r19
  fa:	a9 02       	muls	r26, r25
  fc:	ad 02       	muls	r26, r29
  fe:	b1 02       	muls	r27, r17
 100:	c4 02       	muls	r28, r20
 102:	b7 02       	muls	r27, r23
 104:	bb 02       	muls	r27, r27
 106:	bf 02       	muls	r27, r31

00000108 <__trampolines_end>:
 108:	00 00       	nop
 10a:	0a 0b       	sbc	r16, r26
 10c:	02 09       	sbc	r16, r2
 10e:	0c 0d       	add	r16, r12
 110:	0e 08       	sbc	r0, r14
 112:	07 03       	mulsu	r16, r23
 114:	04 01       	movw	r0, r8
	...
 132:	00 00       	nop
 134:	12 11       	cpse	r17, r2
 136:	10 00       	.word	0x0010	; ????
	...

0000014e <digital_pin_to_bit_mask_PGM>:
 14e:	01 02 10 20 20 08 08 10 20 40 10 20 40 80 02 01     ...  ... @. @...
 15e:	02 01 08 04 02 01 01 02 04 08 10 20 40 80 80 40     ........... @..@
 16e:	20 10 08 04 02 01 80 04 02 01 80 40 20 10 08 04      ..........@ ...
 17e:	02 01 08 04 02 01 01 02 04 08 10 20 40 80 01 02     ........... @...
 18e:	04 08 10 20 40 80                                   ... @.

00000194 <digital_pin_to_port_PGM>:
 194:	05 05 05 05 07 05 08 08 08 08 02 02 02 02 0a 0a     ................
 1a4:	08 08 04 04 04 04 01 01 01 01 01 01 01 01 03 03     ................
 1b4:	03 03 03 03 03 03 04 07 07 07 0c 0c 0c 0c 0c 0c     ................
 1c4:	0c 0c 02 02 02 02 06 06 06 06 06 06 06 06 0b 0b     ................
 1d4:	0b 0b 0b 0b 0b 0b                                   ......

000001da <port_to_output_PGM>:
 1da:	00 00 22 00 25 00 28 00 2b 00 2e 00 31 00 34 00     ..".%.(.+...1.4.
 1ea:	02 01 00 00 05 01 08 01 0b 01                       ..........

000001f4 <port_to_mode_PGM>:
 1f4:	00 00 21 00 24 00 27 00 2a 00 2d 00 30 00 33 00     ..!.$.'.*.-.0.3.
 204:	01 01 00 00 04 01 07 01 0a 01                       ..........

0000020e <__ctors_end>:
 20e:	11 24       	eor	r1, r1
 210:	1f be       	out	0x3f, r1	; 63
 212:	cf ef       	ldi	r28, 0xFF	; 255
 214:	d1 e2       	ldi	r29, 0x21	; 33
 216:	de bf       	out	0x3e, r29	; 62
 218:	cd bf       	out	0x3d, r28	; 61
 21a:	00 e0       	ldi	r16, 0x00	; 0
 21c:	0c bf       	out	0x3c, r16	; 60

0000021e <__do_copy_data>:
 21e:	12 e0       	ldi	r17, 0x02	; 2
 220:	a0 e0       	ldi	r26, 0x00	; 0
 222:	b2 e0       	ldi	r27, 0x02	; 2
 224:	e0 ec       	ldi	r30, 0xC0	; 192
 226:	f6 e0       	ldi	r31, 0x06	; 6
 228:	00 e0       	ldi	r16, 0x00	; 0
 22a:	0b bf       	out	0x3b, r16	; 59
 22c:	02 c0       	rjmp	.+4      	; 0x232 <__do_copy_data+0x14>
 22e:	07 90       	elpm	r0, Z+
 230:	0d 92       	st	X+, r0
 232:	a2 30       	cpi	r26, 0x02	; 2
 234:	b1 07       	cpc	r27, r17
 236:	d9 f7       	brne	.-10     	; 0x22e <__do_copy_data+0x10>

00000238 <__do_clear_bss>:
 238:	22 e0       	ldi	r18, 0x02	; 2
 23a:	a2 e0       	ldi	r26, 0x02	; 2
 23c:	b2 e0       	ldi	r27, 0x02	; 2
 23e:	01 c0       	rjmp	.+2      	; 0x242 <.do_clear_bss_start>

00000240 <.do_clear_bss_loop>:
 240:	1d 92       	st	X+, r1

00000242 <.do_clear_bss_start>:
 242:	a1 31       	cpi	r26, 0x11	; 17
 244:	b2 07       	cpc	r27, r18
 246:	e1 f7       	brne	.-8      	; 0x240 <.do_clear_bss_loop>
 248:	88 d0       	rcall	.+272    	; 0x35a <main>
 24a:	38 c2       	rjmp	.+1136   	; 0x6bc <_exit>

0000024c <__bad_interrupt>:
 24c:	d9 ce       	rjmp	.-590    	; 0x0 <__vectors>

0000024e <setup>:
unsigned long previousMillis = 0;       

//Interval at which to blink
const long interval = 1000;

void setup() {
 24e:	cf 93       	push	r28
 250:	df 93       	push	r29
 252:	cd b7       	in	r28, 0x3d	; 61
 254:	de b7       	in	r29, 0x3e	; 62
	//Set the digital pin as output
	pinMode(ledPin, OUTPUT);
 256:	61 e0       	ldi	r22, 0x01	; 1
 258:	82 e0       	ldi	r24, 0x02	; 2
 25a:	97 d1       	rcall	.+814    	; 0x58a <pinMode>
	
	digitalWrite(ledPin, LOW);
 25c:	60 e0       	ldi	r22, 0x00	; 0
 25e:	82 e0       	ldi	r24, 0x02	; 2
 260:	d0 d1       	rcall	.+928    	; 0x602 <digitalWrite>
}
 262:	00 00       	nop
 264:	df 91       	pop	r29
 266:	cf 91       	pop	r28
 268:	08 95       	ret

0000026a <loop>:


void loop() {
 26a:	ef 92       	push	r14
 26c:	ff 92       	push	r15
 26e:	0f 93       	push	r16
 270:	1f 93       	push	r17
 272:	cf 93       	push	r28
 274:	df 93       	push	r29
 276:	00 d0       	rcall	.+0      	; 0x278 <loop+0xe>
 278:	1f 92       	push	r1
 27a:	cd b7       	in	r28, 0x3d	; 61
 27c:	de b7       	in	r29, 0x3e	; 62
	
	//The interval at which you want to blink the LED.
	unsigned long currentMillis = millis();
 27e:	c2 d0       	rcall	.+388    	; 0x404 <millis>
 280:	dc 01       	movw	r26, r24
 282:	cb 01       	movw	r24, r22
 284:	89 83       	std	Y+1, r24	; 0x01
 286:	9a 83       	std	Y+2, r25	; 0x02
 288:	ab 83       	std	Y+3, r26	; 0x03
 28a:	bc 83       	std	Y+4, r27	; 0x04
	//IF (led state is equal to low)
	//Turn on led
	//Else
	//Turn off led

	if (((year % 4 == 0) && (year % 100!= 0)) || (year%400 == 0)) {
 28c:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <__DATA_REGION_ORIGIN__>
 290:	90 91 01 02 	lds	r25, 0x0201	; 0x800201 <__DATA_REGION_ORIGIN__+0x1>
 294:	83 70       	andi	r24, 0x03	; 3
 296:	99 27       	eor	r25, r25
 298:	89 2b       	or	r24, r25
 29a:	51 f4       	brne	.+20     	; 0x2b0 <loop+0x46>
 29c:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <__DATA_REGION_ORIGIN__>
 2a0:	90 91 01 02 	lds	r25, 0x0201	; 0x800201 <__DATA_REGION_ORIGIN__+0x1>
 2a4:	24 e6       	ldi	r18, 0x64	; 100
 2a6:	30 e0       	ldi	r19, 0x00	; 0
 2a8:	b9 01       	movw	r22, r18
 2aa:	d9 d1       	rcall	.+946    	; 0x65e <__divmodhi4>
 2ac:	89 2b       	or	r24, r25
 2ae:	59 f4       	brne	.+22     	; 0x2c6 <loop+0x5c>
 2b0:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <__DATA_REGION_ORIGIN__>
 2b4:	90 91 01 02 	lds	r25, 0x0201	; 0x800201 <__DATA_REGION_ORIGIN__+0x1>
 2b8:	20 e9       	ldi	r18, 0x90	; 144
 2ba:	31 e0       	ldi	r19, 0x01	; 1
 2bc:	b9 01       	movw	r22, r18
 2be:	cf d1       	rcall	.+926    	; 0x65e <__divmodhi4>
 2c0:	89 2b       	or	r24, r25
 2c2:	09 f0       	breq	.+2      	; 0x2c6 <loop+0x5c>
 2c4:	3d c0       	rjmp	.+122    	; 0x340 <loop+0xd6>
		if (currentMillis - previousMillis >= interval) {
 2c6:	80 91 04 02 	lds	r24, 0x0204	; 0x800204 <previousMillis>
 2ca:	90 91 05 02 	lds	r25, 0x0205	; 0x800205 <previousMillis+0x1>
 2ce:	a0 91 06 02 	lds	r26, 0x0206	; 0x800206 <previousMillis+0x2>
 2d2:	b0 91 07 02 	lds	r27, 0x0207	; 0x800207 <previousMillis+0x3>
 2d6:	29 81       	ldd	r18, Y+1	; 0x01
 2d8:	3a 81       	ldd	r19, Y+2	; 0x02
 2da:	4b 81       	ldd	r20, Y+3	; 0x03
 2dc:	5c 81       	ldd	r21, Y+4	; 0x04
 2de:	79 01       	movw	r14, r18
 2e0:	8a 01       	movw	r16, r20
 2e2:	e8 1a       	sub	r14, r24
 2e4:	f9 0a       	sbc	r15, r25
 2e6:	0a 0b       	sbc	r16, r26
 2e8:	1b 0b       	sbc	r17, r27
 2ea:	d8 01       	movw	r26, r16
 2ec:	c7 01       	movw	r24, r14
 2ee:	88 3e       	cpi	r24, 0xE8	; 232
 2f0:	93 40       	sbci	r25, 0x03	; 3
 2f2:	a1 05       	cpc	r26, r1
 2f4:	b1 05       	cpc	r27, r1
 2f6:	20 f1       	brcs	.+72     	; 0x340 <loop+0xd6>
			// save the last time you blinked the LED
			previousMillis = currentMillis;
 2f8:	89 81       	ldd	r24, Y+1	; 0x01
 2fa:	9a 81       	ldd	r25, Y+2	; 0x02
 2fc:	ab 81       	ldd	r26, Y+3	; 0x03
 2fe:	bc 81       	ldd	r27, Y+4	; 0x04
 300:	80 93 04 02 	sts	0x0204, r24	; 0x800204 <previousMillis>
 304:	90 93 05 02 	sts	0x0205, r25	; 0x800205 <previousMillis+0x1>
 308:	a0 93 06 02 	sts	0x0206, r26	; 0x800206 <previousMillis+0x2>
 30c:	b0 93 07 02 	sts	0x0207, r27	; 0x800207 <previousMillis+0x3>
		
			// if the LED is off turn it on and vice-versa:
			if (ledState == LOW) {
 310:	80 91 02 02 	lds	r24, 0x0202	; 0x800202 <__data_end>
 314:	90 91 03 02 	lds	r25, 0x0203	; 0x800203 <__data_end+0x1>
 318:	89 2b       	or	r24, r25
 31a:	39 f4       	brne	.+14     	; 0x32a <loop+0xc0>
				ledState = HIGH;
 31c:	81 e0       	ldi	r24, 0x01	; 1
 31e:	90 e0       	ldi	r25, 0x00	; 0
 320:	90 93 03 02 	sts	0x0203, r25	; 0x800203 <__data_end+0x1>
 324:	80 93 02 02 	sts	0x0202, r24	; 0x800202 <__data_end>
 328:	04 c0       	rjmp	.+8      	; 0x332 <loop+0xc8>
				} else {
				ledState = LOW;
 32a:	10 92 03 02 	sts	0x0203, r1	; 0x800203 <__data_end+0x1>
 32e:	10 92 02 02 	sts	0x0202, r1	; 0x800202 <__data_end>
			}

			// set the LED with the ledState of the variable:
			digitalWrite(ledPin, ledState);
 332:	80 91 02 02 	lds	r24, 0x0202	; 0x800202 <__data_end>
 336:	90 91 03 02 	lds	r25, 0x0203	; 0x800203 <__data_end+0x1>
 33a:	68 2f       	mov	r22, r24
 33c:	82 e0       	ldi	r24, 0x02	; 2
 33e:	61 d1       	rcall	.+706    	; 0x602 <digitalWrite>
		}
	}
}
 340:	00 00       	nop
 342:	0f 90       	pop	r0
 344:	0f 90       	pop	r0
 346:	0f 90       	pop	r0
 348:	0f 90       	pop	r0
 34a:	df 91       	pop	r29
 34c:	cf 91       	pop	r28
 34e:	1f 91       	pop	r17
 350:	0f 91       	pop	r16
 352:	ff 90       	pop	r15
 354:	ef 90       	pop	r14
 356:	08 95       	ret

00000358 <initVariant>:
 358:	08 95       	ret

0000035a <main>:
void setupUSB() __attribute__((weak));
void setupUSB() { }

int main(void)
{
	init();
 35a:	60 d0       	rcall	.+192    	; 0x41c <init>

	initVariant();
 35c:	fd df       	rcall	.-6      	; 0x358 <initVariant>

#if defined(USBCON)
	USBDevice.attach();
#endif
	
	setup();
 35e:	77 df       	rcall	.-274    	; 0x24e <setup>
    
	for (;;) {
		loop();
		if (serialEventRun) serialEventRun();
 360:	c0 e0       	ldi	r28, 0x00	; 0
 362:	d0 e0       	ldi	r29, 0x00	; 0
#endif
	
	setup();
    
	for (;;) {
		loop();
 364:	82 df       	rcall	.-252    	; 0x26a <loop>
 366:	20 97       	sbiw	r28, 0x00	; 0
		if (serialEventRun) serialEventRun();
 368:	e9 f3       	breq	.-6      	; 0x364 <main+0xa>
 36a:	0e 94 00 00 	call	0	; 0x0 <__vectors>
 36e:	fa cf       	rjmp	.-12     	; 0x364 <main+0xa>

00000370 <__vector_23>:
 370:	1f 92       	push	r1
	

#endif

	// busy wait
	__asm__ __volatile__ (
 372:	0f 92       	push	r0
 374:	0f b6       	in	r0, 0x3f	; 63
 376:	0f 92       	push	r0
 378:	11 24       	eor	r1, r1
 37a:	2f 93       	push	r18
 37c:	3f 93       	push	r19
 37e:	8f 93       	push	r24
 380:	9f 93       	push	r25
 382:	af 93       	push	r26
 384:	bf 93       	push	r27
 386:	80 91 09 02 	lds	r24, 0x0209	; 0x800209 <timer0_millis>
 38a:	90 91 0a 02 	lds	r25, 0x020A	; 0x80020a <timer0_millis+0x1>
 38e:	a0 91 0b 02 	lds	r26, 0x020B	; 0x80020b <timer0_millis+0x2>
 392:	b0 91 0c 02 	lds	r27, 0x020C	; 0x80020c <timer0_millis+0x3>
 396:	30 91 08 02 	lds	r19, 0x0208	; 0x800208 <timer0_fract>
 39a:	23 e0       	ldi	r18, 0x03	; 3
 39c:	23 0f       	add	r18, r19
 39e:	2d 37       	cpi	r18, 0x7D	; 125
 3a0:	20 f4       	brcc	.+8      	; 0x3aa <__vector_23+0x3a>
 3a2:	01 96       	adiw	r24, 0x01	; 1
 3a4:	a1 1d       	adc	r26, r1
 3a6:	b1 1d       	adc	r27, r1
 3a8:	05 c0       	rjmp	.+10     	; 0x3b4 <__vector_23+0x44>
 3aa:	26 e8       	ldi	r18, 0x86	; 134
 3ac:	23 0f       	add	r18, r19
 3ae:	02 96       	adiw	r24, 0x02	; 2
 3b0:	a1 1d       	adc	r26, r1
 3b2:	b1 1d       	adc	r27, r1
 3b4:	20 93 08 02 	sts	0x0208, r18	; 0x800208 <timer0_fract>
 3b8:	80 93 09 02 	sts	0x0209, r24	; 0x800209 <timer0_millis>
 3bc:	90 93 0a 02 	sts	0x020A, r25	; 0x80020a <timer0_millis+0x1>
 3c0:	a0 93 0b 02 	sts	0x020B, r26	; 0x80020b <timer0_millis+0x2>
 3c4:	b0 93 0c 02 	sts	0x020C, r27	; 0x80020c <timer0_millis+0x3>
 3c8:	80 91 0d 02 	lds	r24, 0x020D	; 0x80020d <timer0_overflow_count>
 3cc:	90 91 0e 02 	lds	r25, 0x020E	; 0x80020e <timer0_overflow_count+0x1>
 3d0:	a0 91 0f 02 	lds	r26, 0x020F	; 0x80020f <timer0_overflow_count+0x2>
 3d4:	b0 91 10 02 	lds	r27, 0x0210	; 0x800210 <timer0_overflow_count+0x3>
 3d8:	01 96       	adiw	r24, 0x01	; 1
 3da:	a1 1d       	adc	r26, r1
 3dc:	b1 1d       	adc	r27, r1
 3de:	80 93 0d 02 	sts	0x020D, r24	; 0x80020d <timer0_overflow_count>
 3e2:	90 93 0e 02 	sts	0x020E, r25	; 0x80020e <timer0_overflow_count+0x1>
 3e6:	a0 93 0f 02 	sts	0x020F, r26	; 0x80020f <timer0_overflow_count+0x2>
 3ea:	b0 93 10 02 	sts	0x0210, r27	; 0x800210 <timer0_overflow_count+0x3>
 3ee:	bf 91       	pop	r27
 3f0:	af 91       	pop	r26
 3f2:	9f 91       	pop	r25
 3f4:	8f 91       	pop	r24
 3f6:	3f 91       	pop	r19
 3f8:	2f 91       	pop	r18
 3fa:	0f 90       	pop	r0
 3fc:	0f be       	out	0x3f, r0	; 63
 3fe:	0f 90       	pop	r0
 400:	1f 90       	pop	r1
 402:	18 95       	reti

00000404 <millis>:
 404:	2f b7       	in	r18, 0x3f	; 63
 406:	f8 94       	cli
 408:	60 91 09 02 	lds	r22, 0x0209	; 0x800209 <timer0_millis>
 40c:	70 91 0a 02 	lds	r23, 0x020A	; 0x80020a <timer0_millis+0x1>
 410:	80 91 0b 02 	lds	r24, 0x020B	; 0x80020b <timer0_millis+0x2>
 414:	90 91 0c 02 	lds	r25, 0x020C	; 0x80020c <timer0_millis+0x3>
 418:	2f bf       	out	0x3f, r18	; 63
 41a:	08 95       	ret

0000041c <init>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
 41c:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
 41e:	84 b5       	in	r24, 0x24	; 36
 420:	82 60       	ori	r24, 0x02	; 2
 422:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
 424:	84 b5       	in	r24, 0x24	; 36
 426:	81 60       	ori	r24, 0x01	; 1
 428:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
 42a:	85 b5       	in	r24, 0x25	; 37
 42c:	82 60       	ori	r24, 0x02	; 2
 42e:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
 430:	85 b5       	in	r24, 0x25	; 37
 432:	81 60       	ori	r24, 0x01	; 1
 434:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
 436:	ee e6       	ldi	r30, 0x6E	; 110
 438:	f0 e0       	ldi	r31, 0x00	; 0
 43a:	80 81       	ld	r24, Z
 43c:	81 60       	ori	r24, 0x01	; 1
 43e:	80 83       	st	Z, r24
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
 440:	e1 e8       	ldi	r30, 0x81	; 129
 442:	f0 e0       	ldi	r31, 0x00	; 0
 444:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
 446:	80 81       	ld	r24, Z
 448:	82 60       	ori	r24, 0x02	; 2
 44a:	80 83       	st	Z, r24
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
 44c:	80 81       	ld	r24, Z
 44e:	81 60       	ori	r24, 0x01	; 1
 450:	80 83       	st	Z, r24
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
 452:	e0 e8       	ldi	r30, 0x80	; 128
 454:	f0 e0       	ldi	r31, 0x00	; 0
 456:	80 81       	ld	r24, Z
 458:	81 60       	ori	r24, 0x01	; 1
 45a:	80 83       	st	Z, r24

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
 45c:	e1 eb       	ldi	r30, 0xB1	; 177
 45e:	f0 e0       	ldi	r31, 0x00	; 0
 460:	80 81       	ld	r24, Z
 462:	84 60       	ori	r24, 0x04	; 4
 464:	80 83       	st	Z, r24

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
 466:	e0 eb       	ldi	r30, 0xB0	; 176
 468:	f0 e0       	ldi	r31, 0x00	; 0
 46a:	80 81       	ld	r24, Z
 46c:	81 60       	ori	r24, 0x01	; 1
 46e:	80 83       	st	Z, r24
//#else
	// Timer 2 not finished (may not be present on this CPU)
#endif

#if defined(TCCR3B) && defined(CS31) && defined(WGM30)
	sbi(TCCR3B, CS31);		// set timer 3 prescale factor to 64
 470:	e1 e9       	ldi	r30, 0x91	; 145
 472:	f0 e0       	ldi	r31, 0x00	; 0
 474:	80 81       	ld	r24, Z
 476:	82 60       	ori	r24, 0x02	; 2
 478:	80 83       	st	Z, r24
	sbi(TCCR3B, CS30);
 47a:	80 81       	ld	r24, Z
 47c:	81 60       	ori	r24, 0x01	; 1
 47e:	80 83       	st	Z, r24
	sbi(TCCR3A, WGM30);		// put timer 3 in 8-bit phase correct pwm mode
 480:	e0 e9       	ldi	r30, 0x90	; 144
 482:	f0 e0       	ldi	r31, 0x00	; 0
 484:	80 81       	ld	r24, Z
 486:	81 60       	ori	r24, 0x01	; 1
 488:	80 83       	st	Z, r24
	sbi(TCCR4D, WGM40);		// put timer 4 in phase- and frequency-correct PWM mode	
	sbi(TCCR4A, PWM4A);		// enable PWM mode for comparator OCR4A
	sbi(TCCR4C, PWM4D);		// enable PWM mode for comparator OCR4D
#else /* beginning of timer4 block for ATMEGA1280 and ATMEGA2560 */
#if defined(TCCR4B) && defined(CS41) && defined(WGM40)
	sbi(TCCR4B, CS41);		// set timer 4 prescale factor to 64
 48a:	e1 ea       	ldi	r30, 0xA1	; 161
 48c:	f0 e0       	ldi	r31, 0x00	; 0
 48e:	80 81       	ld	r24, Z
 490:	82 60       	ori	r24, 0x02	; 2
 492:	80 83       	st	Z, r24
	sbi(TCCR4B, CS40);
 494:	80 81       	ld	r24, Z
 496:	81 60       	ori	r24, 0x01	; 1
 498:	80 83       	st	Z, r24
	sbi(TCCR4A, WGM40);		// put timer 4 in 8-bit phase correct pwm mode
 49a:	e0 ea       	ldi	r30, 0xA0	; 160
 49c:	f0 e0       	ldi	r31, 0x00	; 0
 49e:	80 81       	ld	r24, Z
 4a0:	81 60       	ori	r24, 0x01	; 1
 4a2:	80 83       	st	Z, r24
#endif
#endif /* end timer4 block for ATMEGA1280/2560 and similar */	

#if defined(TCCR5B) && defined(CS51) && defined(WGM50)
	sbi(TCCR5B, CS51);		// set timer 5 prescale factor to 64
 4a4:	e1 e2       	ldi	r30, 0x21	; 33
 4a6:	f1 e0       	ldi	r31, 0x01	; 1
 4a8:	80 81       	ld	r24, Z
 4aa:	82 60       	ori	r24, 0x02	; 2
 4ac:	80 83       	st	Z, r24
	sbi(TCCR5B, CS50);
 4ae:	80 81       	ld	r24, Z
 4b0:	81 60       	ori	r24, 0x01	; 1
 4b2:	80 83       	st	Z, r24
	sbi(TCCR5A, WGM50);		// put timer 5 in 8-bit phase correct pwm mode
 4b4:	e0 e2       	ldi	r30, 0x20	; 32
 4b6:	f1 e0       	ldi	r31, 0x01	; 1
 4b8:	80 81       	ld	r24, Z
 4ba:	81 60       	ori	r24, 0x01	; 1
 4bc:	80 83       	st	Z, r24
#endif

#if defined(ADCSRA)
	// set a2d prescaler so we are inside the desired 50-200 KHz range.
	#if F_CPU >= 16000000 // 16 MHz / 128 = 125 KHz
		sbi(ADCSRA, ADPS2);
 4be:	ea e7       	ldi	r30, 0x7A	; 122
 4c0:	f0 e0       	ldi	r31, 0x00	; 0
 4c2:	80 81       	ld	r24, Z
 4c4:	84 60       	ori	r24, 0x04	; 4
 4c6:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS1);
 4c8:	80 81       	ld	r24, Z
 4ca:	82 60       	ori	r24, 0x02	; 2
 4cc:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS0);
 4ce:	80 81       	ld	r24, Z
 4d0:	81 60       	ori	r24, 0x01	; 1
 4d2:	80 83       	st	Z, r24
		cbi(ADCSRA, ADPS2);
		cbi(ADCSRA, ADPS1);
		sbi(ADCSRA, ADPS0);
	#endif
	// enable a2d conversions
	sbi(ADCSRA, ADEN);
 4d4:	80 81       	ld	r24, Z
 4d6:	80 68       	ori	r24, 0x80	; 128
 4d8:	80 83       	st	Z, r24
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
 4da:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7c00c1>
 4de:	08 95       	ret

000004e0 <turnOffPWM>:
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
 4e0:	90 e0       	ldi	r25, 0x00	; 0
 4e2:	fc 01       	movw	r30, r24
 4e4:	31 97       	sbiw	r30, 0x01	; 1
 4e6:	e2 31       	cpi	r30, 0x12	; 18
 4e8:	f1 05       	cpc	r31, r1
 4ea:	08 f0       	brcs	.+2      	; 0x4ee <turnOffPWM+0xe>
 4ec:	4d c0       	rjmp	.+154    	; 0x588 <turnOffPWM+0xa8>
 4ee:	88 27       	eor	r24, r24
 4f0:	ee 58       	subi	r30, 0x8E	; 142
 4f2:	ff 4f       	sbci	r31, 0xFF	; 255
 4f4:	8f 4f       	sbci	r24, 0xFF	; 255
 4f6:	c6 c0       	rjmp	.+396    	; 0x684 <__tablejump2__>
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
 4f8:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7c0080>
 4fc:	8f 77       	andi	r24, 0x7F	; 127
 4fe:	03 c0       	rjmp	.+6      	; 0x506 <turnOffPWM+0x26>
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
 500:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7c0080>
 504:	8f 7d       	andi	r24, 0xDF	; 223
 506:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7c0080>
 50a:	08 95       	ret
		#endif
		#if defined(TCCR1A) && defined(COM1C1)
		case TIMER1C:   cbi(TCCR1A, COM1C1);    break;
 50c:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7c0080>
 510:	87 7f       	andi	r24, 0xF7	; 247
 512:	f9 cf       	rjmp	.-14     	; 0x506 <turnOffPWM+0x26>
		#if defined(TCCR2) && defined(COM21)
		case  TIMER2:   cbi(TCCR2, COM21);      break;
		#endif
		
		#if defined(TCCR0A) && defined(COM0A1)
		case  TIMER0A:  cbi(TCCR0A, COM0A1);    break;
 514:	84 b5       	in	r24, 0x24	; 36
 516:	8f 77       	andi	r24, 0x7F	; 127
 518:	02 c0       	rjmp	.+4      	; 0x51e <turnOffPWM+0x3e>
		#endif
		
		#if defined(TCCR0A) && defined(COM0B1)
		case  TIMER0B:  cbi(TCCR0A, COM0B1);    break;
 51a:	84 b5       	in	r24, 0x24	; 36
 51c:	8f 7d       	andi	r24, 0xDF	; 223
 51e:	84 bd       	out	0x24, r24	; 36
 520:	08 95       	ret
		#endif
		#if defined(TCCR2A) && defined(COM2A1)
		case  TIMER2A:  cbi(TCCR2A, COM2A1);    break;
 522:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7c00b0>
 526:	8f 77       	andi	r24, 0x7F	; 127
 528:	03 c0       	rjmp	.+6      	; 0x530 <turnOffPWM+0x50>
		#endif
		#if defined(TCCR2A) && defined(COM2B1)
		case  TIMER2B:  cbi(TCCR2A, COM2B1);    break;
 52a:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7c00b0>
 52e:	8f 7d       	andi	r24, 0xDF	; 223
 530:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7c00b0>
 534:	08 95       	ret
		#endif
		
		#if defined(TCCR3A) && defined(COM3A1)
		case  TIMER3A:  cbi(TCCR3A, COM3A1);    break;
 536:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__TEXT_REGION_LENGTH__+0x7c0090>
 53a:	8f 77       	andi	r24, 0x7F	; 127
 53c:	07 c0       	rjmp	.+14     	; 0x54c <turnOffPWM+0x6c>
		#endif
		#if defined(TCCR3A) && defined(COM3B1)
		case  TIMER3B:  cbi(TCCR3A, COM3B1);    break;
 53e:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__TEXT_REGION_LENGTH__+0x7c0090>
 542:	8f 7d       	andi	r24, 0xDF	; 223
 544:	03 c0       	rjmp	.+6      	; 0x54c <turnOffPWM+0x6c>
		#endif
		#if defined(TCCR3A) && defined(COM3C1)
		case  TIMER3C:  cbi(TCCR3A, COM3C1);    break;
 546:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__TEXT_REGION_LENGTH__+0x7c0090>
 54a:	87 7f       	andi	r24, 0xF7	; 247
 54c:	80 93 90 00 	sts	0x0090, r24	; 0x800090 <__TEXT_REGION_LENGTH__+0x7c0090>
 550:	08 95       	ret
		#endif

		#if defined(TCCR4A) && defined(COM4A1)
		case  TIMER4A:  cbi(TCCR4A, COM4A1);    break;
 552:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7c00a0>
 556:	8f 77       	andi	r24, 0x7F	; 127
 558:	07 c0       	rjmp	.+14     	; 0x568 <turnOffPWM+0x88>
		#endif					
		#if defined(TCCR4A) && defined(COM4B1)
		case  TIMER4B:  cbi(TCCR4A, COM4B1);    break;
 55a:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7c00a0>
 55e:	8f 7d       	andi	r24, 0xDF	; 223
 560:	03 c0       	rjmp	.+6      	; 0x568 <turnOffPWM+0x88>
		#endif
		#if defined(TCCR4A) && defined(COM4C1)
		case  TIMER4C:  cbi(TCCR4A, COM4C1);    break;
 562:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7c00a0>
 566:	87 7f       	andi	r24, 0xF7	; 247
 568:	80 93 a0 00 	sts	0x00A0, r24	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7c00a0>
 56c:	08 95       	ret
		#if defined(TCCR4C) && defined(COM4D1)
		case TIMER4D:	cbi(TCCR4C, COM4D1);	break;
		#endif			
			
		#if defined(TCCR5A)
		case  TIMER5A:  cbi(TCCR5A, COM5A1);    break;
 56e:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <__TEXT_REGION_LENGTH__+0x7c0120>
 572:	8f 77       	andi	r24, 0x7F	; 127
 574:	07 c0       	rjmp	.+14     	; 0x584 <turnOffPWM+0xa4>
		case  TIMER5B:  cbi(TCCR5A, COM5B1);    break;
 576:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <__TEXT_REGION_LENGTH__+0x7c0120>
 57a:	8f 7d       	andi	r24, 0xDF	; 223
 57c:	03 c0       	rjmp	.+6      	; 0x584 <turnOffPWM+0xa4>
		case  TIMER5C:  cbi(TCCR5A, COM5C1);    break;
 57e:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <__TEXT_REGION_LENGTH__+0x7c0120>
 582:	87 7f       	andi	r24, 0xF7	; 247
 584:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <__TEXT_REGION_LENGTH__+0x7c0120>
 588:	08 95       	ret

0000058a <pinMode>:
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
 58a:	cf 93       	push	r28
 58c:	df 93       	push	r29
	uint8_t bit = digitalPinToBitMask(pin);
 58e:	90 e0       	ldi	r25, 0x00	; 0
 590:	fc 01       	movw	r30, r24
 592:	e2 5b       	subi	r30, 0xB2	; 178
 594:	fe 4f       	sbci	r31, 0xFE	; 254
 596:	24 91       	lpm	r18, Z
	uint8_t port = digitalPinToPort(pin);
 598:	fc 01       	movw	r30, r24
 59a:	ec 56       	subi	r30, 0x6C	; 108
 59c:	fe 4f       	sbci	r31, 0xFE	; 254
 59e:	84 91       	lpm	r24, Z
	volatile uint8_t *reg, *out;

	if (port == NOT_A_PIN) return;
 5a0:	88 23       	and	r24, r24
 5a2:	61 f1       	breq	.+88     	; 0x5fc <pinMode+0x72>

	// JWS: can I let the optimizer do this?
	reg = portModeRegister(port);
 5a4:	90 e0       	ldi	r25, 0x00	; 0
 5a6:	88 0f       	add	r24, r24
 5a8:	99 1f       	adc	r25, r25
 5aa:	fc 01       	movw	r30, r24
 5ac:	ec 50       	subi	r30, 0x0C	; 12
 5ae:	fe 4f       	sbci	r31, 0xFE	; 254
 5b0:	c5 91       	lpm	r28, Z+
 5b2:	d4 91       	lpm	r29, Z
	out = portOutputRegister(port);
 5b4:	fc 01       	movw	r30, r24
 5b6:	e6 52       	subi	r30, 0x26	; 38
 5b8:	fe 4f       	sbci	r31, 0xFE	; 254
 5ba:	a5 91       	lpm	r26, Z+
 5bc:	b4 91       	lpm	r27, Z

	if (mode == INPUT) { 
 5be:	61 11       	cpse	r22, r1
 5c0:	09 c0       	rjmp	.+18     	; 0x5d4 <pinMode+0x4a>
		uint8_t oldSREG = SREG;
 5c2:	9f b7       	in	r25, 0x3f	; 63
                cli();
 5c4:	f8 94       	cli
		*reg &= ~bit;
 5c6:	88 81       	ld	r24, Y
 5c8:	20 95       	com	r18
 5ca:	82 23       	and	r24, r18
 5cc:	88 83       	st	Y, r24
		*out &= ~bit;
 5ce:	ec 91       	ld	r30, X
 5d0:	2e 23       	and	r18, r30
 5d2:	0b c0       	rjmp	.+22     	; 0x5ea <pinMode+0x60>
		SREG = oldSREG;
	} else if (mode == INPUT_PULLUP) {
 5d4:	62 30       	cpi	r22, 0x02	; 2
 5d6:	61 f4       	brne	.+24     	; 0x5f0 <pinMode+0x66>
		uint8_t oldSREG = SREG;
 5d8:	9f b7       	in	r25, 0x3f	; 63
                cli();
 5da:	f8 94       	cli
		*reg &= ~bit;
 5dc:	88 81       	ld	r24, Y
 5de:	32 2f       	mov	r19, r18
 5e0:	30 95       	com	r19
 5e2:	83 23       	and	r24, r19
 5e4:	88 83       	st	Y, r24
		*out |= bit;
 5e6:	ec 91       	ld	r30, X
 5e8:	2e 2b       	or	r18, r30
 5ea:	2c 93       	st	X, r18
		SREG = oldSREG;
 5ec:	9f bf       	out	0x3f, r25	; 63
 5ee:	06 c0       	rjmp	.+12     	; 0x5fc <pinMode+0x72>
	} else {
		uint8_t oldSREG = SREG;
 5f0:	8f b7       	in	r24, 0x3f	; 63
                cli();
 5f2:	f8 94       	cli
		*reg |= bit;
 5f4:	e8 81       	ld	r30, Y
 5f6:	2e 2b       	or	r18, r30
 5f8:	28 83       	st	Y, r18
		SREG = oldSREG;
 5fa:	8f bf       	out	0x3f, r24	; 63
	}
}
 5fc:	df 91       	pop	r29
 5fe:	cf 91       	pop	r28
 600:	08 95       	ret

00000602 <digitalWrite>:
		#endif
	}
}

void digitalWrite(uint8_t pin, uint8_t val)
{
 602:	1f 93       	push	r17
 604:	cf 93       	push	r28
 606:	df 93       	push	r29
	uint8_t timer = digitalPinToTimer(pin);
 608:	28 2f       	mov	r18, r24
 60a:	30 e0       	ldi	r19, 0x00	; 0
 60c:	f9 01       	movw	r30, r18
 60e:	e8 5f       	subi	r30, 0xF8	; 248
 610:	fe 4f       	sbci	r31, 0xFE	; 254
 612:	84 91       	lpm	r24, Z
	uint8_t bit = digitalPinToBitMask(pin);
 614:	f9 01       	movw	r30, r18
 616:	e2 5b       	subi	r30, 0xB2	; 178
 618:	fe 4f       	sbci	r31, 0xFE	; 254
 61a:	d4 91       	lpm	r29, Z
	uint8_t port = digitalPinToPort(pin);
 61c:	f9 01       	movw	r30, r18
 61e:	ec 56       	subi	r30, 0x6C	; 108
 620:	fe 4f       	sbci	r31, 0xFE	; 254
 622:	c4 91       	lpm	r28, Z
	volatile uint8_t *out;

	if (port == NOT_A_PIN) return;
 624:	cc 23       	and	r28, r28
 626:	b9 f0       	breq	.+46     	; 0x656 <digitalWrite+0x54>
 628:	16 2f       	mov	r17, r22

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
 62a:	81 11       	cpse	r24, r1
 62c:	59 df       	rcall	.-334    	; 0x4e0 <turnOffPWM>

	out = portOutputRegister(port);
 62e:	ec 2f       	mov	r30, r28
 630:	f0 e0       	ldi	r31, 0x00	; 0
 632:	ee 0f       	add	r30, r30
 634:	ff 1f       	adc	r31, r31
 636:	e6 52       	subi	r30, 0x26	; 38
 638:	fe 4f       	sbci	r31, 0xFE	; 254
 63a:	a5 91       	lpm	r26, Z+
 63c:	b4 91       	lpm	r27, Z

	uint8_t oldSREG = SREG;
 63e:	9f b7       	in	r25, 0x3f	; 63
	cli();
 640:	f8 94       	cli

	if (val == LOW) {
 642:	11 11       	cpse	r17, r1
 644:	04 c0       	rjmp	.+8      	; 0x64e <digitalWrite+0x4c>
		*out &= ~bit;
 646:	8c 91       	ld	r24, X
 648:	d0 95       	com	r29
 64a:	d8 23       	and	r29, r24
 64c:	02 c0       	rjmp	.+4      	; 0x652 <digitalWrite+0x50>
	} else {
		*out |= bit;
 64e:	ec 91       	ld	r30, X
 650:	de 2b       	or	r29, r30
 652:	dc 93       	st	X, r29
	}

	SREG = oldSREG;
 654:	9f bf       	out	0x3f, r25	; 63
}
 656:	df 91       	pop	r29
 658:	cf 91       	pop	r28
 65a:	1f 91       	pop	r17
 65c:	08 95       	ret

0000065e <__divmodhi4>:
 65e:	97 fb       	bst	r25, 7
 660:	07 2e       	mov	r0, r23
 662:	16 f4       	brtc	.+4      	; 0x668 <__divmodhi4+0xa>
 664:	00 94       	com	r0
 666:	06 d0       	rcall	.+12     	; 0x674 <__divmodhi4_neg1>
 668:	77 fd       	sbrc	r23, 7
 66a:	08 d0       	rcall	.+16     	; 0x67c <__divmodhi4_neg2>
 66c:	13 d0       	rcall	.+38     	; 0x694 <__udivmodhi4>
 66e:	07 fc       	sbrc	r0, 7
 670:	05 d0       	rcall	.+10     	; 0x67c <__divmodhi4_neg2>
 672:	3e f4       	brtc	.+14     	; 0x682 <__divmodhi4_exit>

00000674 <__divmodhi4_neg1>:
 674:	90 95       	com	r25
 676:	81 95       	neg	r24
 678:	9f 4f       	sbci	r25, 0xFF	; 255
 67a:	08 95       	ret

0000067c <__divmodhi4_neg2>:
 67c:	70 95       	com	r23
 67e:	61 95       	neg	r22
 680:	7f 4f       	sbci	r23, 0xFF	; 255

00000682 <__divmodhi4_exit>:
 682:	08 95       	ret

00000684 <__tablejump2__>:
 684:	ee 0f       	add	r30, r30
 686:	ff 1f       	adc	r31, r31
 688:	88 1f       	adc	r24, r24
 68a:	8b bf       	out	0x3b, r24	; 59
 68c:	07 90       	elpm	r0, Z+
 68e:	f6 91       	elpm	r31, Z
 690:	e0 2d       	mov	r30, r0
 692:	19 94       	eijmp

00000694 <__udivmodhi4>:
 694:	aa 1b       	sub	r26, r26
 696:	bb 1b       	sub	r27, r27
 698:	51 e1       	ldi	r21, 0x11	; 17
 69a:	07 c0       	rjmp	.+14     	; 0x6aa <__udivmodhi4_ep>

0000069c <__udivmodhi4_loop>:
 69c:	aa 1f       	adc	r26, r26
 69e:	bb 1f       	adc	r27, r27
 6a0:	a6 17       	cp	r26, r22
 6a2:	b7 07       	cpc	r27, r23
 6a4:	10 f0       	brcs	.+4      	; 0x6aa <__udivmodhi4_ep>
 6a6:	a6 1b       	sub	r26, r22
 6a8:	b7 0b       	sbc	r27, r23

000006aa <__udivmodhi4_ep>:
 6aa:	88 1f       	adc	r24, r24
 6ac:	99 1f       	adc	r25, r25
 6ae:	5a 95       	dec	r21
 6b0:	a9 f7       	brne	.-22     	; 0x69c <__udivmodhi4_loop>
 6b2:	80 95       	com	r24
 6b4:	90 95       	com	r25
 6b6:	bc 01       	movw	r22, r24
 6b8:	cd 01       	movw	r24, r26
 6ba:	08 95       	ret

000006bc <_exit>:
 6bc:	f8 94       	cli

000006be <__stop_program>:
 6be:	ff cf       	rjmp	.-2      	; 0x6be <__stop_program>
